<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一些前端小概念</title>
    <link href="/2021/12/29/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E5%B0%8F%E6%A6%82%E5%BF%B5/"/>
    <url>/2021/12/29/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E5%B0%8F%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="1-HTTP-和-HTTPS"><a href="#1-HTTP-和-HTTPS" class="headerlink" title="1. HTTP 和 HTTPS"></a>1. HTTP 和 HTTPS</h3><h4 id="1-http-和-https-的基本概念"><a href="#1-http-和-https-的基本概念" class="headerlink" title="1.http 和 https 的基本概念"></a>1.http 和 https 的基本概念</h4><p>http: 是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。<br>https:是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。其作用是：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p><h4 id="2-http-和-https-的区别及优缺点？"><a href="#2-http-和-https-的区别及优缺点？" class="headerlink" title="2.http 和 https 的区别及优缺点？"></a>2.http 和 https 的区别及优缺点？</h4><ul><li>  http 是超文本传输协议，信息是明文传输，HTTPS 协议要比 http 协议<code>安全</code>，https 是具有安全性的 ssl 加密传输协议，可防止数据在传输过程中被窃取、改变，确保数据的完整性(当然这种安全性并非绝对的，对于更深入的 Web 安全问题，此处暂且不表)。</li><li>  http 协议的<code>默认端口</code>为 80，https 的默认端口为 443。</li><li>  http 的连接很简单，是无状态的。https 握手阶段比较<code>费时</code>，会使页面加载时间延长 50%，增加 10%~20%的耗电。</li><li>  https <code>缓存</code>不如 http 高效，会增加数据开销。</li><li>  Https 协议需要 ca 证书，费用较高，功能越强大的<code>证书费</code>用越高。</li><li>  SSL 证书需要绑定 <code>IP</code>，不能再同一个 IP 上绑定多个域名，IPV4 资源支持不了这种消耗。</li></ul><h4 id="3-https-协议的工作原理"><a href="#3-https-协议的工作原理" class="headerlink" title="3.https 协议的工作原理"></a>3.https 协议的工作原理</h4><p>客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：</p><ol><li> 客户端使用 https url 访问服务器，则要求 web 服务器<code>建立 ssl 链接</code>。</li><li> web 服务器接收到客户端的请求之后，会<code>将网站的证书（证书中包含了公钥），传输给客户端</code>。</li><li> 客户端和 web 服务器端开始<code>协商 SSL 链接的安全等级</code>，也就是加密等级。</li><li> 客户端浏览器通过双方协商一致的安全等级，<code>建立会话密钥</code>，然后通过网站的公钥来加密会话密钥，并传送给网站。</li><li> web 服务器<code>通过自己的私钥解密出会话密钥</code>。</li><li> web 服务器<code>通过会话密钥加密与客户端之间的通信</code>。</li></ol><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><ol><li> 第一次握手：<code>建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认</code>；SYN：同步序列编号（Synchronize Sequence Numbers）。</li><li> 第二次握手：<code>服务器收到syn包并确认客户的SYN</code>（ack=j+1），<code>同时也发送一个自己的SYN包</code>（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li><li> 第三次握手：<code>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1）</code>，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</li></ol><blockquote><p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。</p></blockquote><h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><ol><li> <code>客户端进程发出连接释放报文</code>，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，<code>客户端进入FIN-WAIT-1（终止等待1）状态</code>。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li></ol><p>2）<code>服务器收到连接释放报文，发出确认报文</code>，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，<code>服务端就进入了CLOSE-WAIT（关闭等待）状态</code>。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</p><p>3）客户端收到服务器的确认请求后，此时，<code>客户端就进入FIN-WAIT-2（终止等待2）状态</code>，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最 后的数据）。</p><p>4）<code>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文</code>，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，<code>服务器就进入了LAST-ACK（最后确认）状态</code>，等待客户端的确认。</p><p>5）<code>客户端收到服务器的连接释放报文后，必须发出确认</code>，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，<code>客户端就进入了TIME-WAIT（时间等待）状态</code>。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，<code>当客户端撤销相应的TCB后，才进入CLOSED状态</code>。</p><p>6）服务器只要收到了客户端发出的确认，<code>立即进入CLOSED状态</code>。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，<code>服务器结束TCP连接的时间要比客户端早一些</code>。</p><h3 id="TCP-IP-如何保证数据包传输的有序可靠？"><a href="#TCP-IP-如何保证数据包传输的有序可靠？" class="headerlink" title="TCP/IP / 如何保证数据包传输的有序可靠？"></a>TCP/IP / 如何保证数据包传输的有序可靠？</h3><p>对字节流分段并进行编号然后<code>通过 ACK 回复</code>和<code>超时重发</code>这两个机制来保证。</p><p>（1）为了保证数据包的可靠传递，发送方必须把已发送的数据包保留在缓冲区；<br>（2）并为每个已发送的数据包启动一个超时定时器；<br>（3）如在定时器超时之前收到了对方发来的应答信息（可能是对本包的应答，也可以是对本包后续包的应答），则释放该数据包占用的缓冲区;<br>（4）否则，重传该数据包，直到收到应答或重传次数超过规定的最大次数为止。<br>（5）接收方收到数据包后，先进行CRC校验，如果正确则把数据交给上层协议，然后给发送方发送一个累计应答包，表明该数据已收到，如果接收方正好也有数据要发给发送方，应答包也可方在数据包中捎带过去。</p><h3 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h3><ol><li> TCP是面向<code>链接</code>的，而UDP是面向无连接的。</li><li> TCP仅支持<code>单播传输</code>，UDP 提供了单播，多播，广播的功能。</li><li> TCP的三次握手保证了连接的<code>可靠性</code>; UDP是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。</li><li> UDP的<code>头部开销</code>比TCP的更小，数据<code>传输速率更高</code>，<code>实时性更好</code>。</li></ol><h3 id="HTTP-请求跨域问题"><a href="#HTTP-请求跨域问题" class="headerlink" title="HTTP 请求跨域问题"></a>HTTP 请求跨域问题</h3><ol><li>跨域的原理 <strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的<code>同源策略</code>造成的。<br> <strong>同源策略</strong>,是浏览器对 JavaScript 实施的安全限制，只要<code>协议、域名、端口</code>有任何一个不同，都被当作是不同的域。<br> <strong>跨域原理</strong>，即是通过各种方式，<code>避开浏览器的安全限制</code>。</li><li>解决方案 最初做项目的时候，使用的是jsonp，但存在一些问题，使用get请求不安全，携带数据较小，后来也用过iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和proxy代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用proxy，在服务器上使用nginx代理，这样开发过程中彼此都方便，效率也高；现在h5新特性还有 windows.postMessage()<ul><li><strong>JSONP</strong>：<br>  ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。  步骤：<ol><li> 去创建一个script标签</li><li> script的src属性设置接口地址</li><li> 接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li><li> 通过定义函数名去接受返回的数据</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//动态创建 script</span><br><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br><br><span class="hljs-comment">// 设置回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;<br><br><span class="hljs-comment">//设置 script 的 src 属性，并设置请求地址</span><br>script.src = <span class="hljs-string">&#x27;http://localhost:3000/?callback=getData&#x27;</span>;<br><br><span class="hljs-comment">// 让 script 生效</span><br><span class="hljs-built_in">document</span>.body.appendChild(script);<br><br></code></pre></td></tr></table></figure>  <strong>JSONP 的缺点</strong>:<br>  JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</li><li><strong>document.domain</strong> 基础域名相同 子域名不同</li><li><strong>window.name</strong> 利用在一个浏览器窗口内，载入所有的域名都是共享一个window.name</li><li><strong>CORS</strong> CORS(Cross-origin resource sharing)跨域资源共享 服务器设置对CORS的支持原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</li><li><strong>proxy代理</strong> 目前常用方式,通过服务器设置代理</li><li><strong>window.postMessage()</strong> 利用h5新特性window.postMessage()</li></ul></li></ol><h3 id="Cookie、sessionStorage、localStorage-的区别"><a href="#Cookie、sessionStorage、localStorage-的区别" class="headerlink" title="Cookie、sessionStorage、localStorage 的区别"></a>Cookie、sessionStorage、localStorage 的区别</h3><p><strong>相同点</strong>：</p><ul><li>  存储在客户端</li></ul><p><strong>不同点</strong>：</p><ul><li>  cookie数据大小不能超过4k；sessionStorage和localStorage的存储比cookie大得多，可以达到5M+</li><li>  cookie设置的过期时间之前一直有效；localStorage永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage数据在当前浏览器窗口关闭后自动删除</li><li>  cookie的数据会自动的传递到服务器；sessionStorage和localStorage数据保存在本地</li></ul><h3 id="粘包问题分析与对策"><a href="#粘包问题分析与对策" class="headerlink" title="粘包问题分析与对策"></a>粘包问题分析与对策</h3><p>TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p><p><strong>粘包出现原因</strong></p><p>简单得说，在流传输中出现，UDP不会出现粘包，因为它有<strong>消息边界</strong></p><p>粘包情况有两种，一种是<code>粘在一起的包都是完整的数据包</code>，另一种情况是<code>粘在一起的包有不完整的包</code>。</p><p>为了<strong>避免粘包</strong>现象，可采取以下几种措施：</p><p>（1）对于发送方引起的粘包现象，用户可通过编程设置来避免，<code>TCP提供了强制数据立即传送的操作指令push</code>，TCP软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；</p><p>（2）对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、<code>提高接收进程优先级等措施</code>，使其及时接收数据，从而尽量避免出现粘包现象；</p><p>（3）由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。<code>分包多发</code>。</p><p>以上提到的三种措施，都有其不足之处。</p><p>（1）第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。</p><p>（2）第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。</p><p>（3）第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。</p><blockquote><p>一种比较周全的对策是：接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开。实验证明这种方法是高效可行的。</p></blockquote><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="从输入URL到页面加载的全过程"><a href="#从输入URL到页面加载的全过程" class="headerlink" title="从输入URL到页面加载的全过程"></a>从输入URL到页面加载的全过程</h3><p><img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/e44aa8a92602405db3c12161b71e2094_tplv-k3u1fbpfcp-watermark.jpg" alt="从输入URL到页面加载的主干流程"></p><ol><li>首先在浏览器中输入URL</li><li>查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。<ul><li>  浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；</li><li>  操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)；</li><li>  路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；</li><li>  ISP缓存：若上述均失败，继续向ISP搜索。</li></ul></li><li>DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。<code>DNS服务器是基于UDP的，因此会用到UDP协议</code>。</li><li>建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接</li><li>发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器</li><li>服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器</li><li>关闭TCP连接：通过四次挥手释放TCP连接</li><li>浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为：<ul><li>  构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象</li><li>  构建CSS规则树：生成CSS规则树（CSS Rule Tree）</li><li>  构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）</li><li>  布局（Layout）：计算出每个节点在屏幕中的位置</li><li>  绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。</li></ul> <img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/a90660027f0d4c559732519bad4c6323_tplv-k3u1fbpfcp-watermark.jpg" alt="浏览器渲染流程图"></li><li>JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）<ul><li>  创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。</li><li>  加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译</li><li>  预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为’undefined’；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。</li><li>  解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。</li></ul></li></ol><h3 id="浏览器重绘与重排的区别？"><a href="#浏览器重绘与重排的区别？" class="headerlink" title="浏览器重绘与重排的区别？"></a>浏览器重绘与重排的区别？</h3><ul><li>  <code>重排/回流（Reflow）</code>：当<code>DOM</code>的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。</li><li>  <code>重绘(Repaint)</code>: 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变</li></ul><p>单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分</p><p>重排和重绘代价是高昂的，它们会破坏用户体验，并且让UI展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。</p><p>『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。</p><h3 id="如何触发重排和重绘？"><a href="#如何触发重排和重绘？" class="headerlink" title="如何触发重排和重绘？"></a>如何触发重排和重绘？</h3><p>任何改变用来构建渲染树的信息都会导致一次重排或重绘：</p><ul><li>  添加、删除、更新DOM节点</li><li>  通过display: none隐藏一个DOM节点-触发重排和重绘</li><li>  通过visibility: hidden隐藏一个DOM节点-只触发重绘，因为没有几何变化</li><li>  移动或者给页面中的DOM节点添加动画</li><li>  添加一个样式表，调整样式属性</li><li>  用户行为，例如调整窗口大小，改变字号，或者滚动。</li></ul><h3 id="如何避免重绘或者重排？"><a href="#如何避免重绘或者重排？" class="headerlink" title="如何避免重绘或者重排？"></a>如何避免重绘或者重排？</h3><ol><li><code>集中改变样式</code>，不要一条一条地修改 DOM 的样式。</li><li>不要把 DOM 结点的属性值放在循环里当成循环里的变量。</li><li>为动画的 HTML 元件使用 <code>fixed</code> 或 <code>absoult</code> 的 <code>position</code>，那么修改他们的 CSS 是不会 reflow 的。</li><li>不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。</li><li>尽量只修改<code>position：absolute</code>或<code>fixed</code>元素，对其他元素影响不大</li><li>动画开始<code>GPU</code>加速，<code>translate</code>使用<code>3D</code>变化</li><li>提升为合成层 将元素提升为合成层有以下优点：<ul><li>  合成层的位图，会交由 GPU 合成，比 CPU 处理要快</li><li>  当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</li><li>  对于 transform 和 opacity 效果，不会触发 layout 和 paint</li></ul> 提升合成层的最好方式是使用 CSS 的 will-change 属性： <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">#<span class="hljs-keyword">target</span> &#123;<br>  will-<span class="hljs-built_in">change</span>: transform;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="介绍下304过程"><a href="#介绍下304过程" class="headerlink" title="介绍下304过程"></a>介绍下304过程</h3><ul><li>  a. 浏览器请求资源时首先命中资源的Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过Cache-control: max-age指定最大生命周期，状态仍然返回200，但不会请求数据，在浏览器中能明显看到from cache字样。</li><li>  b. 强缓存失效，进入协商缓存阶段，首先验证ETagETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据客户端上送的If-None-Match值来判断是否命中缓存。</li><li>  c. 协商缓存Last-Modify/If-Modify-Since阶段，客户端第一次请求资源时，服务服返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间。再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。</li></ul><h3 id="浏览器的缓存机制-强制缓存-amp-amp-协商缓存"><a href="#浏览器的缓存机制-强制缓存-amp-amp-协商缓存" class="headerlink" title="浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存"></a>浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h3><p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/magicut_1643984709413.png" alt="图片"></p><p>由上图我们可以知道：</p><ul><li>  浏览器每次发起请求，都会<code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li><li>  浏览器每次拿到返回的请求结果都会<code>将该结果和缓存标识存入浏览器缓存中</code></li></ul><p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是<code>强制缓存</code>和<code>协商缓存</code>。</p><ul><li><strong>强制缓存</strong>  <code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</code>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 <code>Expires</code> 和 <code>Cache-Control</code>，其中Cache-Control优先级比Expires高。  强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：<ol><li> 不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li><li> 存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li><li> 存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li></ol></li><li><strong>协商缓存</strong>  <code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code>，同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<code>Last-Modified / If-Modified-Since</code> 和 <code>Etag / If-None-Match</code>，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。协商缓存主要有以下两种情况：<ol><li> 协商缓存生效，返回304</li><li> 协商缓存失效，返回200和请求结果结果</li></ol></li></ul><h3 id="说下进程、线程和协程"><a href="#说下进程、线程和协程" class="headerlink" title="说下进程、线程和协程"></a>说下进程、线程和协程</h3><p><strong>进程</strong>是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，<code>是操作系统进行资源分配和调度的一个独立单位</code>，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。</p><p><strong>线程</strong>是程序执行中一个单一的顺序控制流程，是<code>程序执行流的最小单元</code>，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成。</p><p><strong>协程</strong>，英文Coroutines，是一种<code>基于线程之上，但又比线程更加轻量级的存在</code>，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。</p><p><strong>进程和线程的区别与联系</strong></p><p>【区别】：<br>调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；<br>并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；<br>拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。<br>系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。</p><p>【联系】： 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；<br>资源分配给进程，同一进程的所有线程共享该进程的所有资源；<br>处理机分给线程，即真正在处理机上运行的是线程；<br>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p><h2 id="HTML-amp-amp-CSS"><a href="#HTML-amp-amp-CSS" class="headerlink" title="HTML &amp;&amp; CSS"></a>HTML &amp;&amp; CSS</h2><h3 id="HTML5-新特性、语义化"><a href="#HTML5-新特性、语义化" class="headerlink" title="HTML5 新特性、语义化"></a>HTML5 新特性、语义化</h3><ol><li><strong>概念</strong>： HTML5的语义化指的是<code>合理正确的使用语义化的标签来创建页面结构</code>。【正确的标签做正确的事】</li><li><strong>语义化标签</strong>： header nav main article section aside footer</li><li><strong>语义化的优点</strong>:<ul><li>  在<code>没CSS样式的情况下，页面整体也会呈现很好的结构效果</code></li><li>  <code>代码结构清晰</code>，易于阅读，</li><li>  <code>利于开发和维护</code> 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。</li><li>  <code>有利于搜索引擎优化（SEO）</code>，搜索引擎爬虫会根据不同的标签来赋予不同的权重</li></ul></li></ol><h3 id="CSS-选择器及优先级"><a href="#CSS-选择器及优先级" class="headerlink" title="CSS 选择器及优先级"></a>CSS 选择器及优先级</h3><p><strong>选择器</strong></p><ul><li>  id选择器(#myid)</li><li>  类选择器(.myclass)</li><li>  属性选择器(a[rel=”external”])</li><li>  伪类选择器(a:hover, li:nth-child)</li><li>  标签选择器(div, h1,p)</li><li>  相邻选择器（h1 + p）</li><li>  子选择器(ul &gt; li)</li><li>  后代选择器(li a)</li><li>  通配符选择器(*)</li></ul><p><strong>优先级：</strong></p><ul><li>  <code>!important</code></li><li>  内联样式（1000）</li><li>  ID选择器（0100）</li><li>  类选择器/属性选择器/伪类选择器（0010）</li><li>  元素选择器/伪元素选择器（0001）</li><li>  关系选择器/通配符选择器（0000）</li></ul><p>带!important 标记的样式属性优先级最高； 样式表的来源相同时：<code>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p><h3 id="position-属性的值有哪些及其区别"><a href="#position-属性的值有哪些及其区别" class="headerlink" title="position 属性的值有哪些及其区别"></a>position 属性的值有哪些及其区别</h3><p><strong>固定定位 fixed</strong>： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。</p><p><strong>相对定位 relative</strong>： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</p><p><strong>绝对定位 absolute</strong>： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。</p><p><strong>粘性定位 sticky</strong>： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。</p><p><strong>默认定位 Static</strong>： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声 明）。 inherit: 规定应该从父元素继承 position 属性的值。</p><h3 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h3><p>box-sizing 规定两个并排的带边框的框，语法为 box-sizing：content-box/border-box/inherit</p><p><strong>content-box</strong>：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。【标准盒子模型】</p><p><strong>border-box</strong>：为元素设定的宽度和高度决定了元素的边框盒。【IE 盒子模型】</p><p><strong>inherit</strong>：继承父元素的 box-sizing 值。</p><h3 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h3><p>CSS 盒模型本质上是一个盒子，它包括：边距，边框，填充和实际内容。CSS 中的盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。<br>在标准的盒子模型中，<code>width 指 content 部分的宽度</code>。<br>在 IE 盒子模型中，<code>width 表示 content+padding+border 这三个部分的宽度</code>。</p><p>故在计算盒子的宽度时存在差异：</p><p><strong>标准盒模型：</strong> 一个块的总宽度 = width+margin(左右)+padding(左右)+border(左右)</p><p><strong>怪异盒模型：</strong> 一个块的总宽度 = width+margin（左右）（既 width 已经包含了 padding 和 border 值）</p><h3 id="BFC（块级格式上下文）"><a href="#BFC（块级格式上下文）" class="headerlink" title="BFC（块级格式上下文）"></a>BFC（块级格式上下文）</h3><p><strong>BFC的概念</strong></p><p><code>BFC</code> 是 <code>Block Formatting Context</code> 的缩写，即块级格式化上下文。<code>BFC</code>是CSS布局的一个概念，是一个独立的渲染区域，规定了内部box如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。</p><p><strong>BFC的原理布局规则</strong></p><ul><li>  内部的Box会在<code>垂直方向</code>，一个接一个地放置</li><li>  Box<code>垂直方向的距离由margin决定</code>。属于同一个BFC的两个相邻Box的margin会发生重叠</li><li>  每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反</li><li>  BFC的区域<code>不会与float box重叠</code></li><li>  BFC是一个独立容器，容器里面的<code>子元素不会影响到外面的元素</code></li><li>  计算BFC的高度时，<code>浮动元素也参与计算高度</code></li><li>  元素的类型和<code>display属性，决定了这个Box的类型</code>。不同类型的Box会参与不同的<code>Formatting Context</code>。</li></ul><p><strong>如何创建BFC？</strong></p><ul><li>  根元素，即HTML元素</li><li>  float的值不为none</li><li>  position为absolute或fixed</li><li>  display的值为inline-block、table-cell、table-caption</li><li>  overflow的值不为visible</li></ul><p><strong>BFC的使用场景</strong></p><ul><li>  去除边距重叠现象</li><li>  清除浮动（让父元素的高度包含子浮动元素）</li><li>  避免某元素被浮动元素覆盖</li><li>  避免多列布局由于宽度计算四舍五入而自动换行</li></ul><h3 id="让一个元素水平垂直居中"><a href="#让一个元素水平垂直居中" class="headerlink" title="让一个元素水平垂直居中"></a>让一个元素水平垂直居中</h3><ul><li><strong>水平居中</strong><ul><li>对于 行内元素 : <code>text-align: center</code>;</li><li>对于确定宽度的块级元素：  （1）width和margin实现。<code>margin: 0 auto</code>;  （2）绝对定位和margin-left: (父width - 子width）/2, 前提是父元素position: relative</li><li>对于宽度未知的块级元素  （1）<code>table标签配合margin左右auto实现水平居中</code>。使用table标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右margin为auto。  （2）inline-block实现水平居中方法。display：inline-block和text-align:center实现水平居中。  （3）<code>绝对定位+transform</code>，translateX可以移动本身元素的50%。  （4）flex布局使用<code>justify-content:center</code></li></ul></li><li><strong>垂直居中</strong><ol><li> 利用 <code>line-height</code> 实现居中，这种方法适合纯文字类</li><li> 通过设置父容器 相对定位 ，子级设置 <code>绝对定位</code>，标签通过margin实现自适应居中</li><li> 弹性布局 flex :父级设置display: flex; 子级设置margin为auto实现自适应居中</li><li> 父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现</li><li> <code>table 布局</code>，父级通过转换成表格形式，<code>然后子级设置 vertical-align 实现</code>。（需要注意的是：vertical-align: middle使用的前提条件是内联元素以及display值为table-cell的元素）。</li></ol></li></ul><h3 id="隐藏页面中某个元素的方法"><a href="#隐藏页面中某个元素的方法" class="headerlink" title="隐藏页面中某个元素的方法"></a>隐藏页面中某个元素的方法</h3><p>1.<code>opacity：0</code>，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如click 事件，那么点击该区域，也能触发点击事件的</p><p>2.<code>visibility：hidden</code>，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p><p>3.<code>display：none</code>，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）</p><blockquote><p>该问题会引出 回流和重绘</p></blockquote><h3 id="用CSS实现三角符号"><a href="#用CSS实现三角符号" class="headerlink" title="用CSS实现三角符号"></a>用CSS实现三角符号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*记忆口诀：盒子宽高均为零，三面边框皆透明。 */</span><br><span class="hljs-selector-tag">div</span>:after&#123;<br>    position: absolute;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-attribute">border-right</span>: <span class="hljs-number">100px</span> solid transparent;<br>    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">100px</span> solid <span class="hljs-number">#ff0</span>;<br>    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">100px</span> solid transparent;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">100px</span> solid transparent;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><h4 id="1-Flex-布局"><a href="#1-Flex-布局" class="headerlink" title="1.Flex 布局"></a>1.Flex 布局</h4><p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”,用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。</p><p>容器的属性：</p><ul><li>  flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;</li><li>  flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;</li><li>  flex-flow： .box { flex-flow: || ; }</li><li>  justify-content：对其方式，水平主轴对齐方式</li><li>  align-items：对齐方式，竖直轴线方向</li><li>  align-content</li></ul><p>项目的属性（元素的属性）：</p><ul><li>  order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0</li><li>  flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大</li><li>  flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小</li><li>  flex-basis 属性：定义了在分配多余的空间，项目占据的空间。</li><li>  flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。</li><li>  align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖</li><li>  align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局</li></ul><h4 id="2-Rem-布局"><a href="#2-Rem-布局" class="headerlink" title="2.Rem 布局"></a>2.Rem 布局</h4><p>首先 Rem 相对于根(html)的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;,那么（1rem = 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。</p><p><strong>优点</strong>：可以快速适用移动端布局，字体，图片高度</p><p><strong>缺点</strong>：</p><p>①目前 ie 不支持，对 pc 页面来讲使用次数不多；<br>②数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；<br>③在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。</p><h4 id="3-百分比布局"><a href="#3-百分比布局" class="headerlink" title="3.百分比布局"></a>3.百分比布局</h4><p>通过百分比单位 “ % “ 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。</p><p><strong>缺点</strong>：</p><p>（1）计算困难<br>（2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。</p><h4 id="4-浮动布局"><a href="#4-浮动布局" class="headerlink" title="4.浮动布局"></a>4.浮动布局</h4><p>浮动布局:当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。</p><p><strong>优点</strong></p><p>这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与inline-block还是有一些区别的，第一个就是关于横向排序的时候，float可以设置方向而inline-block方向是固定的；还有一个就是inline-block在使用时有时会有空白间隙的问题</p><p><strong>缺点</strong></p><p>最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素，<code>会造成父级元素高度塌陷</code>。</p><h3 id="如何使用rem或viewport进行移动端适配"><a href="#如何使用rem或viewport进行移动端适配" class="headerlink" title="如何使用rem或viewport进行移动端适配"></a>如何使用rem或viewport进行移动端适配</h3><p><strong>rem适配原理：</strong></p><p>改变了一个元素在不同设备上占据的css像素的个数</p><p>rem适配的优缺点</p><ul><li>  优点：没有破坏完美视口</li><li>  缺点：px值转换rem太过于复杂(下面我们使用less来解决这个问题)</li></ul><p><strong>viewport适配的原理</strong></p><p>viewport适配方案中，每一个元素在不同设备上占据的css像素的个数是一样的。但是css像素和物理像素的比例是不一样的，等比的</p><p>viewport适配的优缺点</p><ul><li>  在我们设计图上所量取的大小即为我们可以设置的像素大小，即所量即所设</li><li>  缺点破坏完美视口</li></ul><h3 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h3><ul><li>  添加额外标签</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">parent</span>&quot;&gt;<br>    //添加额外标签并且添加<span class="hljs-symbol">clear</span>属性<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">style</span>=&quot;<span class="hljs-symbol">clear:<span class="hljs-symbol">both</span></span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br>    //也可以加一个<span class="hljs-symbol">br</span>标签<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br><br></code></pre></td></tr></table></figure><ul><li>  父级添加overflow属性，或者设置高度</li><li>  建立伪类选择器清除浮动</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//在css中添加:after伪元素</span><br><span class="hljs-selector-class">.parent</span>:after&#123;<br>    /* 设置添加子元素的内容是空 */<br>    content: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">/* 设置添加子元素为块级元素 */</span><br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-comment">/* 设置添加的子元素的高度0 */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/* 设置添加子元素看不见 */</span><br>    <span class="hljs-attribute">visibility</span>: hidden;<br>    <span class="hljs-comment">/* 设置clear：both */</span><br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="JS、TS、ES6"><a href="#JS、TS、ES6" class="headerlink" title="JS、TS、ES6"></a>JS、TS、ES6</h2><h3 id="JS中的8种数据类型及区别"><a href="#JS中的8种数据类型及区别" class="headerlink" title="JS中的8种数据类型及区别"></a>JS中的8种数据类型及区别</h3><p>包括值类型(基本对象类型)和引用类型(复杂对象类型)</p><p><strong>基本类型(值类型)：</strong> Number(数字),String(字符串),Boolean(布尔),Symbol(符号),null(空),undefined(未定义)在内存中占据固定大小，保存在栈内存中</p><p><strong>引用类型(复杂数据类型)：</strong> Object(对象)、Function(函数)。其他还有Array(数组)、Date(日期)、RegExp(正则表达式)、特殊的基本包装类型(String、Number、Boolean) 以及单体内置对象(Global、Math)等 引用类型的值是对象 保存在堆内存中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。</p><h3 id="JS中的数据类型检测方案"><a href="#JS中的数据类型检测方案" class="headerlink" title="JS中的数据类型检测方案"></a>JS中的数据类型检测方案</h3><h4 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1.typeof"></a>1.typeof</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>);               <span class="hljs-comment">// number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>);            <span class="hljs-comment">// boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;mc&#x27;</span>);            <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>)           <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;);    <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">console</span>.log());   <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> []);              <span class="hljs-comment">// object </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> &#123;&#125;);              <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>);            <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>);       <span class="hljs-comment">// undefined</span><br><br></code></pre></td></tr></table></figure><p>优点：能够快速区分基本数据类型</p><p>缺点：不能将Object、Array和Null区分，都返回object</p><h4 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2.instanceof"></a>2.instanceof</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Number</span>);                    <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Boolean</span>);                <span class="hljs-comment">// false </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span>);                <span class="hljs-comment">// false  </span><br><span class="hljs-built_in">console</span>.log([] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>);                    <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>);       <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>);                   <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><p>优点：能够区分Array、Object和Function，适合用于判断自定义的类实例对象</p><p>缺点：Number，Boolean，String基本数据类型不能判断</p><h4 id="3-Object-prototype-toString-call"><a href="#3-Object-prototype-toString-call" class="headerlink" title="3.Object.prototype.toString.call()"></a>3.Object.prototype.toString.call()</h4><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sqf">var <span class="hljs-built_in">toString</span> = Object.prototype.<span class="hljs-built_in">toString</span>;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(<span class="hljs-number">1</span>));                      <span class="hljs-comment">//[object Number]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(<span class="hljs-literal">true</span>));                   <span class="hljs-comment">//[object Boolean]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(<span class="hljs-string">&#x27;mc&#x27;</span>));                   <span class="hljs-comment">//[object String]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>([]));                     <span class="hljs-comment">//[object Array]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(&#123;&#125;));                     <span class="hljs-comment">//[object Object]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(function()&#123;&#125;));           <span class="hljs-comment">//[object Function]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(undefined));              <span class="hljs-comment">//[object Undefined]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(null));                   <span class="hljs-comment">//[object Null]</span><br><br></code></pre></td></tr></table></figure><p>优点：精准判断数据类型</p><p>缺点：写法繁琐不容易记，推荐进行封装后使用</p><h3 id="var-amp-amp-let-amp-amp-const"><a href="#var-amp-amp-let-amp-amp-const" class="headerlink" title="var &amp;&amp; let &amp;&amp; const"></a>var &amp;&amp; let &amp;&amp; const</h3><p>ES6之前创建变量用的是var,之后创建变量用的是let/const</p><p><strong>三者区别</strong>：</p><ol><li>var定义的变量，<code>没有块的概念，可以跨块访问</code>, 不能跨函数访问。<br> let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。<br> const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，且不能修改。</li><li> var可以<code>先使用，后声明</code>，因为存在变量提升；let必须先声明后使用。</li><li> var是允许在相同作用域内<code>重复声明同一个变量</code>的，而let与const不允许这一现象。</li><li>在全局上下文中，基于let声明的全局变量和全局对象GO（window）没有任何关系 ;<br> var声明的变量会和GO有映射关系；</li><li> <code>会产生暂时性死区</code>：</li></ol><blockquote><p>暂时性死区是浏览器的bug：检测一个未被声明的变量类型时，不会报错，会返回undefined<br>如：console.log(typeof a) //undefined<br>而：console.log(typeof a)//未声明之前不能使用<br>let a</p></blockquote><ol start="6"><li> let /const/function会把当前所在的大括号(除函数之外)作为一个全新的块级上下文，应用这个机制，在开发项目的时候，遇到循环事件绑定等类似的需求，无需再自己构建闭包来存储，只要基于let的块作用特征即可解决</li></ol><h3 id="JS垃圾回收机制"><a href="#JS垃圾回收机制" class="headerlink" title="JS垃圾回收机制"></a>JS垃圾回收机制</h3><ol><li>项目中，如果存在大量不被释放的内存（堆/栈/上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。</li><li>浏览器垃圾回收机制/内存回收机制:<blockquote><p>浏览器的<code>Javascript</code>具有自动垃圾回收机制(<code>GC:Garbage Collecation</code>)，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p></blockquote> <strong>标记清除</strong>:在<code>js</code>中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为“进入环境”，当变量离开执行环境时，会被标记为“离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。<br> <strong>谷歌浏览器</strong>：“查找引用”，浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会回收它；如果被占用，就不能回收。<br> <strong>IE浏览器</strong>：“引用计数法”，当前内存被占用一次，计数累加1次，移除占用就减1，减到0时，浏览器就回收它。</li><li>优化手段：内存优化 ; 手动释放：取消内存的占用即可。 （1）堆内存：fn = null 【null：空指针对象】 （2）栈内存：把上下文中，被外部占用的堆的占用取消即可。</li><li>内存泄漏 在 JS 中，常见的内存泄露主要有 4 种,全局变量、闭包、DOM 元素的引用、定时器</li></ol><h3 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h3><p>创建函数的时候，已经声明了当前函数的作用域==&gt;<code>当前创建函数所处的上下文</code>。如果是在全局下创建的函数就是<code>[[scope]]:EC(G)</code>，函数执行的时候，形成一个全新的私有上下文<code>EC(FN)</code>，供字符串代码执行(进栈执行)</p><p>定义：简单来说作用域就是变量与函数的可访问范围，<code>由当前环境与上层环境的一系列变量对象组成</code><br>1.全局作用域：代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。<br>2.函数作用域：在固定的代码片段才能被访问</p><p>作用：作用域最大的用处就是<code>隔离变量</code>，不同作用域下同名变量不会有冲突。</p><p><strong>作用域链参考链接</strong>一般情况下，变量到 创建该变量 的函数的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p><h3 id="闭包的两大作用：保存-保护"><a href="#闭包的两大作用：保存-保护" class="headerlink" title="闭包的两大作用：保存/保护"></a>闭包的两大作用：保存/保护</h3><ul><li><strong>闭包的概念</strong>  函数执行时形成的私有上下文EC(FN)，正常情况下，代码执行完会出栈后释放;但是特殊情况下，如果当前私有上下文中的某个东西被上下文以外的事物占用了，则上下文不会出栈释放，从而形成不销毁的上下文。 函数执行函数执行过程中，会形成一个全新的私有上下文，可能会被释放，可能不会被释放，不论释放与否，他的作用是：</li></ul><p>（1）保护：划分一个独立的代码执行区域，在这个区域中有自己私有变量存储的空间，保护自己的私有变量不受外界干扰（操作自己的私有变量和外界没有关系）；</p><p>（2）保存：如果当前上下文不被释放【只要上下文中的某个东西被外部占用即可】，则存储的这些私有变量也不会被释放，可以供其下级上下文中调取使用，相当于把一些值保存起来了；</p><p>我们把函数执行形成私有上下文，来保护和保存私有变量机制称为<code>闭包</code>。</p><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数–《JavaScript高级程序设计》</p></blockquote><p><strong>稍全面的回答</strong>： 在js中变量的作用域属于函数作用域, 在函数执行完后,作用域就会被清理,内存也会随之被回收,但是由于闭包函数是建立在函数内部的子函数, 由于其可访问上级作用域,即使上级函数执行完, 作用域也不会随之销毁, 这时的子函数(也就是闭包),便拥有了访问上级作用域中变量的权限,即使上级函数执行完后作用域内的值也不会被销毁。</p><ul><li><strong>闭包的特性</strong>：<ul><li>1、内部函数可以访问定义他们外部函数的参数和变量。(作用域链的向上查找，把外围的作用域中的变量值存储在内存中而不是在函数调用完毕后销毁)设计私有的方法和变量，避免全局变量的污染。  1.1.闭包是密闭的容器，，类似于set、map容器，存储数据的  1.2.闭包是一个对象，存放数据的格式为 key-value 形式</li><li>2、函数嵌套函数</li><li>3、本质是将函数内部和外部连接起来。优点是可以读取函数内部的变量，让这些变量的值始终保存在内存中，不会在函数被调用之后自动清除</li></ul></li><li><strong>闭包形成的条件</strong>：<ol><li> 函数的嵌套</li><li> 内部函数引用外部函数的局部变量，延长外部函数的变量生命周期</li></ol></li><li><strong>闭包的用途</strong>：<ol><li> 模仿块级作用域</li><li> 保护外部函数的变量 能够访问函数定义时所在的词法作用域(阻止其被回收)</li><li> 封装私有化变量</li><li> 创建模块</li></ol></li><li><strong>闭包应用场景</strong>  闭包的两个场景，闭包的两大作用：<code>保存/保护</code>。 在开发中, 其实我们随处可见闭包的身影, 大部分前端JavaScript 代码都是“事件驱动”的,即一个事件绑定的回调方法; 发送ajax请求成功|失败的回调;setTimeout的延时回调;或者一个函数内部返回另一个匿名函数,这些都是闭包的应用。</li><li><strong>闭包的优点</strong>：延长局部变量的生命周期</li><li><strong>闭包缺点</strong>：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</li></ul><h3 id="JS-中-this-的五种情况"><a href="#JS-中-this-的五种情况" class="headerlink" title="JS 中 this 的五种情况"></a>JS 中 this 的五种情况</h3><ol><li> 作为普通函数执行时，<code>this</code>指向<code>window</code>。</li><li> 当函数作为对象的方法被调用时，<code>this</code>就会指向<code>该对象</code>。</li><li> 构造器调用，<code>this</code>指向<code>返回的这个对象</code>。</li><li> 箭头函数 箭头函数的<code>this</code>绑定看的是<code>this所在函数定义在哪个对象下</code>，就绑定哪个对象。如果有嵌套的情况，则this绑定到最近的一层对象上。</li><li> 基于Function.prototype上的 <code>apply 、 call 和 bind</code> 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。<code>apply</code>接收参数的是数组，<code>call</code>接受参数列表，`` bind<code>方法通过传入一个对象，返回一个</code> this <code>绑定了传入对象的新函数。这个函数的</code> this<code>指向除了使用</code>new `时会被改变，其他情况下都不会改变。若为空默认是指向全局对象window。</li></ol><h3 id="原型-amp-amp-原型链"><a href="#原型-amp-amp-原型链" class="headerlink" title="原型 &amp;&amp; 原型链"></a>原型 &amp;&amp; 原型链</h3><p><strong>原型关系：</strong></p><ul><li>  每个 class都有显示原型 prototype</li><li>  每个实例都有隐式原型 _ proto_</li><li>  实例的_ proto_指向对应 class 的 prototype</li></ul><p>‌ <strong>原型:</strong>  在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个<code>函数对象</code>都有一个<code>prototype</code> 属性，这个属性指向函数的<code>原型对象</code>。</p><p>原型链：函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype.__ proto__ = null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范</p><p><strong>特点:</strong>  <code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p><h3 id="new运算符的实现机制"><a href="#new运算符的实现机制" class="headerlink" title="new运算符的实现机制"></a>new运算符的实现机制</h3><ol><li> 首先创建了一个新的<code>空对象</code></li><li> <code>设置原型</code>，将对象的原型设置为函数的<code>prototype</code>对象。</li><li> 让函数的<code>this</code>指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li><li> 判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li></ol><h3 id="EventLoop-事件循环"><a href="#EventLoop-事件循环" class="headerlink" title="EventLoop 事件循环"></a>EventLoop 事件循环</h3><p><code>JS</code>是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，<code>Promise.then</code>，<code>MutationObserver</code>，宏任务的话就是<code>setImmediate setTimeout setInterval</code></p><p>JS运行的环境。一般为浏览器或者Node。 在浏览器环境中，有JS 引擎线程和渲染线程，且两个线程互斥。 Node环境中，只有JS 线程。 不同环境执行机制有差异，不同任务进入不同Event Queue队列。 当主程结束，先执行准备好微任务，然后再执行准备好的宏任务，一个轮询结束。</p><h4 id="浏览器中的事件环（Event-Loop"><a href="#浏览器中的事件环（Event-Loop" class="headerlink" title="浏览器中的事件环（Event Loop)"></a><strong>浏览器中的事件环（Event Loop)</strong></h4><p>事件环的运行机制是，先会执行栈中的内容，栈中的内容执行后执行微任务，微任务清空后再执行宏任务，先取出一个宏任务，再去执行微任务，然后在取宏任务清微任务这样不停的循环。</p><ul><li>eventLoop 是由JS的宿主环境（浏览器）来实现的；</li><li>事件循环可以简单的描述为以下四个步骤:<ol><li> 函数入栈，当Stack中执行到异步任务的时候，就将他丢给WebAPIs,接着执行同步任务,直到Stack为空；</li><li> 此期间WebAPIs完成这个事件，把回调函数放入队列中等待执行（微任务放到微任务队列，宏任务放到宏任务队列）</li><li> 执行栈为空时，Event Loop把微任务队列执行清空；</li><li> 微任务队列清空后，进入宏任务队列，取队列的第一项任务放入Stack(栈）中执行，执行完成后，查看微任务队列是否有任务，有的话，清空微任务队列。重复4，继续从宏任务中取任务执行，执行完成之后，继续清空微任务，如此反复循环，直至清空所有的任务。</li></ol>  <img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/342e581223d2471d9484fc48beb9f8e1_tplv-k3u1fbpfcp-watermark.jpg" alt="事件循环流程"></li><li>浏览器中的任务源(task):<ul><li><code>宏任务(macrotask)</code>：<br>  宿主环境提供的，比如浏览器<br>  ajax、setTimeout、setInterval、setTmmediate(只兼容ie)、script、requestAnimationFrame、messageChannel、UI渲染、一些浏览器api</li><li><code>微任务(microtask)</code>：<br>  语言本身提供的，比如promise.then<br>  then、queueMicrotask(基于then)、mutationObserver(浏览器提供)、messageChannel 、mutationObersve</li></ul></li></ul><p>传送门 ☞ <a href="https://juejin.cn/post/7001881781125251086" title="https://juejin.cn/post/7001881781125251086"># 宏任务和微任务</a></p><h4 id="Node-环境中的事件环（Event-Loop"><a href="#Node-环境中的事件环（Event-Loop" class="headerlink" title="Node 环境中的事件环（Event Loop)"></a><strong>Node 环境中的事件环（Event Loop)</strong></h4><p><code>Node</code>是基于V8引擎的运行在服务端的<code>JavaScript</code>运行环境，在处理高并发、I/O密集(文件操作、网络操作、数据库操作等)场景有明显的优势。虽然用到也是V8引擎，但由于服务目的和环境不同，导致了它的API与原生JS有些区别，其Event Loop还要处理一些I/O，比如新的网络连接等，所以Node的Event Loop(事件环机制)与浏览器的是不太一样。</p><p><img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/e362c1770f62428fbf3faabd99d2a64c_tplv-k3u1fbpfcp-watermark.jpg" alt="2020120317343116.png"> 执行顺序如下：</p><ul><li>  <code>timers</code>: 计时器，执行setTimeout和setInterval的回调</li><li>  <code>pending callbacks</code>: 执行延迟到下一个循环迭代的 I/O 回调</li><li>  <code>idle, prepare</code>: 队列的移动，仅系统内部使用</li><li>  <code>poll轮询</code>: 检索新的 I/O 事件;执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。</li><li>  <code>check</code>: 执行<code>setImmediate</code>回调，setImmediate在这里执行</li><li>  <code>close callbacks</code>: 执行<code>close</code>事件的<code>callback</code>，一些关闭的回调函数，如：socket.on(‘close’, …)</li></ul><h3 id="setTimeout、Promise、Async-Await-的区别"><a href="#setTimeout、Promise、Async-Await-的区别" class="headerlink" title="setTimeout、Promise、Async/Await 的区别"></a>setTimeout、Promise、Async/Await 的区别</h3><ol><li>setTimeout settimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行。</li><li>Promise Promise本身是<strong>同步的立即执行函数</strong>， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>)<br><span class="hljs-keyword">let</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>    resolve()<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1 end&#x27;</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;settimeout&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>)<br><span class="hljs-comment">// 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;settimeout</span><br><br></code></pre></td></tr></table></figure></li><li>async/await async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>);<br>    <span class="hljs-keyword">await</span> async2();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>);<br>async1();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>)<br><br><span class="hljs-comment">// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end</span><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="Async-Await-如何通过同步的方式实现异步"><a href="#Async-Await-如何通过同步的方式实现异步" class="headerlink" title="Async/Await 如何通过同步的方式实现异步"></a>Async/Await 如何通过同步的方式实现异步</h3><p>Async/Await就是一个<strong>自执行</strong>的generate函数。利用generate函数的特性把异步的代码写成“同步”的形式,第一个请求的返回值作为后面一个请求的参数,其中每一个参数都是一个promise对象.</p><h3 id="介绍节流防抖原理、区别以及应用"><a href="#介绍节流防抖原理、区别以及应用" class="headerlink" title="介绍节流防抖原理、区别以及应用"></a>介绍节流防抖原理、区别以及应用</h3><p><code>节流</code>：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。</p><p><code>防抖</code>：多次触发事件，事件处理函数只能执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发准备执行事件函数前，会等待一定的时间（这时间是码农自己去定义的，比如 1 秒），如果没有再次被触发，那么就执行，如果被触发了，那就本次作废，重新从新触发的时间开始计算，并再次等待 1 秒，直到能最终执行！</p><p><code>使用场景</code>：<br>节流：滚动加载更多、搜索框搜的索联想功能、高频点击、表单重复提交……<br>防抖：搜索框搜索输入，并在输入完以后自动搜索、手机号，邮箱验证输入检测、窗口大小 resize 变化后，再重新渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 节流函数 一个函数执行一次后，只有大于设定的执行周期才会执行第二次。有个需要频繁触发的函数，出于优化性能的角度，在规定时间内，只让函数触发的第一次生效，后面的不生效。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>fn要被节流的函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>delay规定的时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>    <span class="hljs-comment">//记录上一次函数触发的时间</span><br>    <span class="hljs-keyword">var</span> lastTime = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//记录当前函数触发的时间</span><br>        <span class="hljs-keyword">var</span> nowTime = <span class="hljs-built_in">Date</span>.now();<br>        <span class="hljs-keyword">if</span>(nowTime - lastTime &gt; delay)&#123;<br>            <span class="hljs-comment">//修正this指向问题</span><br>            fn.call(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-comment">//同步执行结束时间</span><br>            lastTime = nowTime;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">document</span>.onscroll = throttle(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;scllor事件被触发了&#x27;</span> + <span class="hljs-built_in">Date</span>.now());<br>&#125;, <span class="hljs-number">200</span>); <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 防抖函数  一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>fn要被节流的函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>delay规定的时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>    <span class="hljs-comment">//记录上一次的延时器</span><br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-comment">//清除上一次的演示器</span><br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        <span class="hljs-comment">//重新设置新的延时器</span><br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//修正this指向问题</span><br>            fn.apply(<span class="hljs-built_in">this</span>);<br>        &#125;, delay); <br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>).onclick = debounce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;按钮被点击了&#x27;</span> + <span class="hljs-built_in">Date</span>.now());<br>&#125;, <span class="hljs-number">1000</span>);<br><br></code></pre></td></tr></table></figure><h3 id="简述MVVM"><a href="#简述MVVM" class="headerlink" title="简述MVVM"></a>简述MVVM</h3><p><strong>什么是MVVM？</strong></p><p><code>视图模型双向绑定</code>，是<code>Model-View-ViewModel</code>的缩写，也就是把<code>MVC</code>中的<code>Controller</code>演变成<code>ViewModel。Model</code>层代表数据模型，<code>View</code>代表UI组件，<code>ViewModel</code>是<code>View</code>和<code>Model</code>层的桥梁，数据会绑定到<code>viewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>viewModel</code>层更新数据。以前是操作DOM结构更新视图，现在是<code>数据驱动视图</code>。</p><p><strong>MVVM的优点：</strong></p><p>1.<code>低耦合</code>。视图（View）可以独立于Model变化和修改，一个Model可以绑定到不同的View上，当View变化的时候Model可以不变化，当Model变化的时候View也可以不变；<br>2.<code>可重用性</code>。你可以把一些视图逻辑放在一个Model里面，让很多View重用这段视图逻辑。<br>3.<code>独立开发</code>。开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计。<br>4.<code>可测试</code>。</p><h3 id="Vue底层实现原理"><a href="#Vue底层实现原理" class="headerlink" title="Vue底层实现原理"></a>Vue底层实现原理</h3><p>vue.js是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter和getter，在数据变动时发布消息给订阅者，触发相应的监听回调<br>Vue是一个典型的MVVM框架，模型（Model）只是普通的javascript对象，修改它则试图（View）会自动更新。这种设计让状态管理变得非常简单而直观</p><p><strong>Observer（数据监听器）</strong> : Observer的核心是通过Object.defineProprtty()来监听数据的变动，这个函数内部可以定义setter和getter，每当数据发生变化，就会触发setter。这时候Observer就要通知订阅者，订阅者就是Watcher</p><p><strong>Watcher（订阅者）</strong> : Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是：</p><ol><li> 在自身实例化时往属性订阅器(dep)里面添加自己</li><li> 自身必须有一个update()方法</li><li> 待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调</li></ol><p><strong>Compile（指令解析器）</strong> : Compile主要做的事情是解析模板指令，将模板中变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，一旦数据有变动，收到通知，更新试图</p><h3 id="谈谈对vue生命周期的理解？"><a href="#谈谈对vue生命周期的理解？" class="headerlink" title="谈谈对vue生命周期的理解？"></a>谈谈对vue生命周期的理解？</h3><p>每个<code>Vue</code>实例在创建时都会经过一系列的初始化过程，<code>vue</code>的生命周期钩子，就是说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件</p><ul><li><code>create阶段</code>：vue实例被创建<br>  <code>beforeCreate</code>: 创建前，此时data和methods中的数据都还没有初始化<br>  <code>created</code>： 创建完毕，data中有值，未挂载</li><li><code>mount阶段</code>： vue实例被挂载到真实DOM节点<br>  <code>beforeMount</code>：可以发起服务端请求，去数据<br>  <code>mounted</code>: 此时可以操作DOM</li><li><code>update阶段</code>：当vue实例里面的data数据变化时，触发组件的重新渲染<br>  <code>beforeUpdate</code> :更新前<br>  <code>updated</code>：更新后</li><li><code>destroy阶段</code>：vue实例被销毁<br>  <code>beforeDestroy</code>：实例被销毁前，此时可以手动销毁一些方法<br>  <code>destroyed</code>:销毁后</li></ul><h4 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h4><p>生命周期（父子组件） 父组件beforeCreate –&gt; 父组件created –&gt; 父组件beforeMount –&gt; 子组件beforeCreate –&gt; 子组件created –&gt; 子组件beforeMount –&gt; 子组件 mounted –&gt; 父组件mounted –&gt;父组件beforeUpdate –&gt;子组件beforeDestroy–&gt; 子组件destroyed –&gt; 父组件updated</p><p><strong>加载渲染过程</strong> 父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p><p><strong>挂载阶段</strong> 父created-&gt;子created-&gt;子mounted-&gt;父mounted</p><p><strong>父组件更新阶段</strong> 父beforeUpdate-&gt;父updated</p><p><strong>子组件更新阶段</strong> 父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p><p><strong>销毁阶段</strong> 父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p><h3 id="computed与watch"><a href="#computed与watch" class="headerlink" title="computed与watch"></a><code>computed与watch</code></h3><p>通俗来讲，既能用 computed 实现又可以用 watch 监听来实现的功能，推荐用 computed， 重点在于 computed 的缓存功能 computed 计算属性是用来声明式的描述一个值依赖了其它的值，当所依赖的值或者变量 改变时，计算属性也会跟着改变； watch 监听的是已经在 data 中定义的变量，当该变量变化时，会触发 watch 中的方法。</p><p><strong>watch 属性监听</strong> 是一个对象，键是需要观察的属性，值是对应回调函数，主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作,监听属性的变化，需要在数据变化时执行异步或开销较大的操作时使用</p><p><strong>computed 计算属性</strong> 属性的结果会被<code>缓存</code>，当<code>computed</code>中的函数所依赖的属性没有发生改变的时候，那么调用当前函数的时候结果会从缓存中读取。除非依赖的响应式属性变化时才会重新计算，主要当做属性来使用 <code>computed</code>中的函数必须用<code>return</code>返回最终的结果 <code>computed</code>更高效，优先使用。<code>data 不改变，computed 不更新。</code></p><p><strong>使用场景</strong> <code>computed</code>：当一个属性受多个属性影响的时候使用，例：购物车商品结算功能 <code>watch</code>：当一条数据影响多条数据的时候使用，例：搜索数据</p><h3 id="组件中的data为什么是一个函数？"><a href="#组件中的data为什么是一个函数？" class="headerlink" title="组件中的data为什么是一个函数？"></a>组件中的data为什么是一个函数？</h3><p>1.一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。 2.如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。</p><h3 id="为什么v-for和v-if不建议用在一起"><a href="#为什么v-for和v-if不建议用在一起" class="headerlink" title="为什么v-for和v-if不建议用在一起"></a>为什么v-for和v-if不建议用在一起</h3><p>1.当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费<br>2.这种场景建议使用 computed，先对数据进行过滤</p><p>注意：3.x 版本中 <code>v-if</code> 总是优先于 <code>v-for</code> 生效。由于语法上存在歧义，建议避免在同一元素上同时使用两者。比起在模板层面管理相关逻辑，更好的办法是通过创建计算属性筛选出列表，并以此创建可见元素。</p><h3 id="React-Vue-项目中-key-的作用"><a href="#React-Vue-项目中-key-的作用" class="headerlink" title="React/Vue 项目中 key 的作用"></a>React/Vue 项目中 key 的作用</h3><ul><li>key的作用是为了在diff算法执行时更快的找到对应的节点，<code>提高diff速度，更高效的更新虚拟DOM</code>;  vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找。相比而言。map映射的速度更快。</li><li>为了在数据变化时强制更新组件，以避免<code>“就地复用”</code>带来的副作用。  当 Vue.js 用 <code>v-for</code> 更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。重复的key会造成渲染错误。</li></ul><h3 id="vue组件的通信方式"><a href="#vue组件的通信方式" class="headerlink" title="vue组件的通信方式"></a>vue组件的通信方式</h3><ul><li><code>props</code>/<code>$emit</code> 父子组件通信  父-&gt;子<code>props</code>，子-&gt;父 <code>$on、$emit</code> 获取父子组件实例 <code>parent、children</code> <code>Ref</code> 获取实例的方式调用组件的属性或者方法 父-&gt;子孙 <code>Provide、inject</code> 官方不推荐使用，但是写组件库时很常用</li><li><code>$emit</code>/<code>$on</code> 自定义事件 兄弟组件通信  <code>Event Bus</code> 实现跨组件通信 <code>Vue.prototype.$bus = new Vue()</code> 自定义事件</li><li>vuex 跨级组件通信  Vuex、<code>$attrs、$listeners</code> <code>Provide、inject</code></li></ul><h3 id="nextTick的实现"><a href="#nextTick的实现" class="headerlink" title="nextTick的实现"></a>nextTick的实现</h3><ol><li> <code>nextTick</code>是<code>Vue</code>提供的一个全局<code>API</code>,是在下次<code>DOM</code>更新循环结束之后执行延迟回调，在修改数据之后使用<code>$nextTick</code>，则可以在回调中获取更新后的<code>DOM</code>；</li><li> Vue在更新DOM时是异步执行的。只要侦听到数据变化，<code>Vue</code>将开启1个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个<code>watcher</code>被多次触发，只会被推入到队列中-次。这种在缓冲时去除重复数据对于避免不必要的计算和<code>DOM</code>操作是非常重要的。<code>nextTick</code>方法会在队列中加入一个回调函数，确保该函数在前面的dom操作完成后才调用；</li><li> 比如，我在干什么的时候就会使用nextTick，传一个回调函数进去，在里面执行dom操作即可；</li><li> 我也有简单了解<code>nextTick</code>实现，它会在<code>callbacks</code>里面加入我们传入的函数，然后用<code>timerFunc</code>异步方式调用它们，首选的异步方式会是<code>Promise</code>。这让我明白了为什么可以在<code>nextTick</code>中看到<code>dom</code>操作结果。</li></ol><h3 id="nextTick的实现原理是什么？"><a href="#nextTick的实现原理是什么？" class="headerlink" title="nextTick的实现原理是什么？"></a>nextTick的实现原理是什么？</h3><p>在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。 nextTick主要使用了宏任务和微任务。 根据执行环境分别尝试采用Promise、MutationObserver、setImmediate，如果以上都不行则采用setTimeout定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</p><h3 id="使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽"><a href="#使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽" class="headerlink" title="使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽"></a>使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽</h3><p>vue中的插槽是一个非常好用的东西slot说白了就是一个占位的 在vue当中插槽包含三种一种是默认插槽（匿名）一种是具名插槽还有一种就是作用域插槽 匿名插槽就是没有名字的只要默认的都填到这里具名插槽指的是具有名字的</p><h3 id="keep-alive的实现"><a href="#keep-alive的实现" class="headerlink" title="keep-alive的实现"></a>keep-alive的实现</h3><p>作用：实现组件缓存，保持这些组件的状态，以避免反复渲染导致的性能问题。 需要缓存组件 频繁切换，不需要重复渲染</p><p>场景：tabs标签页 后台导航，vue性能优化</p><p>原理：<code>Vue.js</code>内部将<code>DOM</code>节点抽象成了一个个的<code>VNode</code>节点，<code>keep-alive</code>组件的缓存也是基于<code>VNode</code>节点的而不是直接存储<code>DOM</code>结构。它将满足条件<code>（pruneCache与pruneCache）</code>的组件在<code>cache</code>对象中缓存起来，在需要重新渲染的时候再将<code>vnode</code>节点从<code>cache</code>对象中取出并渲染。</p><h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>mixin 项目变得复杂的时候，多个组件间有重复的逻辑就会用到mixin<br>多个组件有相同的逻辑，抽离出来<br>mixin并不是完美的解决方案，会有一些问题<br>vue3提出的Composition API旨在解决这些问题【追求完美是要消耗一定的成本的，如开发成本】<br>场景：PC端新闻列表和详情页一样的右侧栏目，可以使用mixin进行混合<br>劣势：1.变量来源不明确，不利于阅读<br>2.多mixin可能会造成命名冲突 3.mixin和组件可能出现多对多的关系，使得项目复杂度变高</p><h3 id="Vuex的理解及使用场景"><a href="#Vuex的理解及使用场景" class="headerlink" title="Vuex的理解及使用场景"></a>Vuex的理解及使用场景</h3><p>Vuex 是一个专为 Vue 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。</p><ol><li> Vuex 的状态存储是响应式的；当 Vue 组件从 store 中读取状态的时候，</li></ol><p>若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新 2. 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation， 这样使得我们可以方便地跟踪每一个状态的变化 Vuex主要包括以下几个核心模块：</p><ol><li> State：定义了应用的状态数据</li><li> Getter：在 store 中定义“getter”（可以认为是 store 的计算属性），</li></ol><p>就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算 3. Mutation：是唯一更改 store 中状态的方法，且必须是同步函数 4. Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作 5. Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</p><p><img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/a7249773a1634f779c48f3f0ffabf968_tplv-k3u1fbpfcp-watermark.jpg"></p><h3 id="hooks用过吗？聊聊react中class组件和函数组件的区别"><a href="#hooks用过吗？聊聊react中class组件和函数组件的区别" class="headerlink" title="hooks用过吗？聊聊react中class组件和函数组件的区别"></a>hooks用过吗？聊聊react中class组件和函数组件的区别</h3><p>类组件是使用ES6 的 class 来定义的组件。 函数组件是接收一个单一的 <code>props</code> 对象并返回一个React元素。</p><p>关于React的两套API（类（class）API 和基于函数的钩子（hooks） API）。官方推荐使用钩子（函数），而不是类。因为钩子更简洁，代码量少，用起来比较”轻”，而类比较”重”。而且，钩子是函数，更符合 React 函数式的本质。</p><p>函数一般来说，只应该做一件事，就是返回一个值。 如果你有多个操作，每个操作应该写成一个单独的函数。而且，数据的状态应该与操作方法分离。根据函数这种理念，React 的函数组件只应该做一件事情：返回组件的 HTML 代码，而没有其他的功能。函数的返回结果只依赖于它的参数。不改变函数体外部数据、函数执行过程里面没有副作用。</p><p>类（class）是数据和逻辑的封装。 也就是说，组件的状态和操作方法是封装在一起的。如果选择了类的写法，就应该把相关的数据和操作，都写在同一个 class 里面。</p><p><strong>类组件的缺点</strong> :</p><p>大型组件很难拆分和重构，也很难测试。<br>业务逻辑分散在组件的各个方法之中，导致重复逻辑或关联逻辑。<br>组件类引入了复杂的编程模式，比如 render props 和高阶组件。<br>难以理解的 class，理解 JavaScript 中 <code>this</code> 的工作方式。</p><p><strong>区别</strong>：</p><p>函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。</p><p>1.状态的有无<br>hooks出现之前，函数组件<code>没有实例</code>，<code>没有生命周期</code>，<code>没有state</code>，<code>没有this</code>，所以我们称函数组件为无状态组件。 hooks出现之前，react中的函数组件通常只考虑负责UI的渲染，没有自身的状态没有业务逻辑代码，是一个纯函数。它的输出只由参数props决定，不受其他任何因素影响。</p><p>2.调用方式的不同<br>函数组件重新渲染，将重新调用组件方法返回新的react元素。类组件重新渲染将new一个新的组件实例，然后调用render类方法返回react元素，这也说明为什么类组件中this是可变的。</p><p>3.因为调用方式不同，在函数组件使用中会出现问题<br>在操作中改变状态值，类组件可以获取最新的状态值，而函数组件则会按照顺序返回状态值</p><p><strong>React Hooks（钩子的作用）</strong></p><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p><p>React Hooks的几个常用钩子:</p><ol><li> <code>useState()</code> //状态钩子</li><li> <code>useContext()</code> //共享状态钩子</li><li> <code>useReducer()</code> //action 钩子</li><li> <code>useEffect()</code> //副作用钩子</li></ol><p>还有几个不常见的大概的说下，后续会专门写篇文章描述下</p><ul><li>1.useCallback 记忆函数 一般把<strong>函数式组件理解为class组件render函数的语法糖</strong>，所以每次重新渲染的时候，函数式组件内部所有的代码都会重新执行一遍。而有了 useCallback 就不一样了，你可以通过 useCallback 获得一个记忆后的函数。  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> memoizedHandleClick = useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Click happened&#x27;</span>)<br>  &#125;, []); <span class="hljs-comment">// 空数组代表无论什么情况下该函数都不会发生改变</span><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">SomeComponent</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;memoizedHandleClick&#125;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">SomeComponent</span>&gt;</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>  第二个参数传入一个数组，数组中的每一项一旦值或者引用发生改变，useCallback 就会重新返回一个新的记忆函数提供给后面进行渲染。</li><li>2.useMemo 记忆组件 useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的。 唯一的区别是：<strong>useCallback 不会执行第一个参数函数，而是将它返回给你，而 useMemo 会执行第一个函数并且将函数执行结果返回给你</strong>。<br>  所以 useCallback 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。而 useMemo 更适合经过函数计算得到一个确定的值，比如记忆组件。</li><li>3.useRef 保存引用值  useRef 跟 createRef 类似，都可以用来生成对 DOM 对象的引用。useRef 返回的值传递给组件或者 DOM 的 ref 属性，就可以通过 ref.current 值<strong>访问组件或真实的 DOM 节点，重点是组件也是可以访问到的</strong>，从而可以对 DOM 进行一些操作，比如监听事件等等。</li><li>4.useImperativeHandle 穿透 Ref  通过 useImperativeHandle 用于让父组件获取子组件内的索引</li><li>5.useLayoutEffect 同步执行副作用  大部分情况下，使用 useEffect 就可以帮我们处理组件的副作用，但是如果想要同步调用一些副作用，比如对 DOM 的操作，就需要使用 useLayoutEffect，useLayoutEffect 中的副作用会在 DOM 更新之后同步执行。  <strong>useEffect和useLayoutEffect有什么区别</strong>：简单来说就是调用时机不同，useLayoutEffect和原来componentDidMount&amp;componentDidUpdate一致，在react完成DOM更新后马上同步调用的代码，会阻塞页面渲染。而useEffect是会在整个页面渲染完才会调用的代码。<code>官方建议优先使用useEffect</code></li></ul><h3 id="React-组件通信方式"><a href="#React-组件通信方式" class="headerlink" title="React 组件通信方式"></a>React 组件通信方式</h3><p>react组件间通信常见的几种情况:</p><ul><li><ol><li> 父组件向子组件通信</li></ol></li><li><ol start="2"><li> 子组件向父组件通信</li></ol></li><li><ol start="3"><li> 跨级组件通信</li></ol></li><li><ol start="4"><li> 非嵌套关系的组件通信</li></ol></li></ul><h4 id="1）父组件向子组件通信"><a href="#1）父组件向子组件通信" class="headerlink" title="1）父组件向子组件通信"></a>1）父组件向子组件通信</h4><p>父组件通过 props 向子组件传递需要的信息。父传子是在父组件中直接绑定一个正常的属性，这个属性就是指具体的值，在子组件中，用props就可以获取到这个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 子组件: Child</span><br><span class="hljs-keyword">const</span> Child = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-comment">// 父组件 Parent</span><br><span class="hljs-keyword">const</span> Parent = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;京程一灯&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2）子组件向父组件通信"><a href="#2）子组件向父组件通信" class="headerlink" title="2）子组件向父组件通信"></a>2）子组件向父组件通信</h4><p>props+回调的方式，使用公共组件进行状态提升。子传父是先在父组件上绑定属性设置为一个函数，当子组件需要给父组件传值的时候，则通过props调用该函数将参数传入到该函数当中，此时就可以在父组件中的函数中接收到该参数了，这个参数则为子组件传过来的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 子组件: Child</span><br><span class="hljs-keyword">const</span> Child = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span>&#123;<br>  <span class="hljs-keyword">const</span> cb = <span class="hljs-function"><span class="hljs-params">msg</span> =&gt;</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>          props.callback(msg)<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;cb(</span>&quot;京程一灯欢迎你!&quot;)&#125;&gt;</span>京程一灯欢迎你<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-comment">// 父组件 Parent</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">callback</span>(<span class="hljs-params">msg</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(msg)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">callback</span>=<span class="hljs-string">&#123;this.callback.bind(this)&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span>    <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3）跨级组件通信"><a href="#3）跨级组件通信" class="headerlink" title="3）跨级组件通信"></a>3）跨级组件通信</h4><p>即父组件向子组件的子组件通信，向更深层子组件通信。</p><ul><li>  使用props，利用中间组件层层传递,但是如果父组件结构较深，那么中间每一层组件都要去传递props，增加了复杂度，并且这些props并不是中间组件自己需要的。</li><li>  使用context，context相当于一个大容器，我们可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用context实现。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// context方式实现跨级组件通信 </span><br><span class="hljs-comment">// Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据</span><br><br>const <span class="hljs-type">BatteryContext</span> = createContext();<br><br><span class="hljs-comment">//  子组件的子组件 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GrandChild</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    render()&#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;<span class="hljs-type">BatteryContext</span>.<span class="hljs-type">Consumer</span>&gt;<br>                &#123;<br>                    color =&gt; &lt;h1 style=&#123;&#123;<span class="hljs-string">&quot;color&quot;</span>:color&#125;&#125;&gt;我是红色的:&#123;color&#125;&lt;/h1&gt;<br>                &#125;<br>            &lt;/<span class="hljs-type">BatteryContext</span>.<span class="hljs-type">Consumer</span>&gt;<br>        ) <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//  子组件</span><br>const <span class="hljs-type">Child</span> = () =&gt;&#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;<span class="hljs-type">GrandChild</span>/&gt;<br>    )<br>&#125;<br><span class="hljs-comment">// 父组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>      state = &#123;<br>          color:<span class="hljs-string">&quot;red&quot;</span><br>      &#125;<br>      render()&#123;<br>          const &#123;color&#125; = <span class="hljs-keyword">this</span>.state<br>          <span class="hljs-keyword">return</span> (<br>          &lt;<span class="hljs-type">BatteryContext</span>.<span class="hljs-type">Provider</span> value=&#123;color&#125;&gt;<br>              &lt;<span class="hljs-type">Child</span>&gt;&lt;/<span class="hljs-type">Child</span>&gt;<br>          &lt;/<span class="hljs-type">BatteryContext</span>.<span class="hljs-type">Provider</span>&gt; <br>          )<br>      &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4）非嵌套关系的组件通信"><a href="#4）非嵌套关系的组件通信" class="headerlink" title="4）非嵌套关系的组件通信"></a>4）非嵌套关系的组件通信</h4><p>即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。</p><ul><li><ol><li> 可以使用自定义事件通信（发布订阅模式），使用pubsub-js</li></ol></li><li><ol start="2"><li> 可以通过redux等进行全局状态管理</li></ol></li><li><ol start="3"><li> 如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点, 结合父子间通信方式进行通信。</li></ol></li><li><ol start="4"><li> 也可以new一个 Vue 的 EventBus,进行事件监听，一边执行监听，一边执行新增 VUE的eventBus 就是发布订阅模式，是可以在React中使用的;</li></ol></li></ul><h3 id="setState-既存在异步情况也存在同步情况"><a href="#setState-既存在异步情况也存在同步情况" class="headerlink" title="setState 既存在异步情况也存在同步情况"></a>setState 既存在异步情况也存在同步情况</h3><p>1.异步情况 在<code>React事件当中是异步操作</code></p><p>2.同步情况 如果是在<code>setTimeout事件或者自定义的dom事件</code>中，都是同步的</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pf">//<span class="hljs-built_in">set</span>Timeout事件<br>import React,&#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br>class Count extends Component&#123;<br>    constructor(props)&#123;<br>        super(props);<br>        this.<span class="hljs-keyword">state</span> = &#123;<br>            count:<span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br><br>    render()&#123;<br>        return (<br>            <span class="hljs-variable">&lt;&gt;</span><br>                <span class="hljs-variable">&lt;p&gt;</span>count:&#123;this.<span class="hljs-keyword">state</span>.count&#125;&lt;/p&gt;<br>                <span class="hljs-variable">&lt;button onClick=&#123;this.btnAction&#125;&gt;</span>增加&lt;/button&gt;<br>            &lt;/&gt;<br>        )<br>    &#125;<br>    <br>    btnAction = ()=&gt;&#123;<br>        //不能直接修改<span class="hljs-keyword">state</span>，需要通过<span class="hljs-built_in">set</span>State进行修改<br>        //同步<br>        <span class="hljs-built_in">set</span>Timeout(()=&gt;&#123;<br>            this.<span class="hljs-built_in">set</span>State(&#123;<br>                count: this.<span class="hljs-keyword">state</span>.count + <span class="hljs-number">1</span><br>            &#125;);<br>            console.<span class="hljs-keyword">log</span>(this.<span class="hljs-keyword">state</span>.count);<br>        &#125;)<br>    &#125;<br>&#125;<br><br>export <span class="hljs-keyword">default</span> Count;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//自定义dom事件</span><br><span class="hljs-keyword">import</span> React,&#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Count</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>count:&#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>绑定点击事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br>        )<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//自定义dom事件，也是同步修改</span><br>        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">this</span>.setState(&#123;<br>                <span class="hljs-attr">count</span>: <span class="hljs-built_in">this</span>.state.count + <span class="hljs-number">1</span><br>            &#125;);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.count);<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Count;<br><br></code></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/magicut_1643985822853.png" alt="image.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">安装<br>当组件的实例被创建并插入到 DOM 中时，这些方法按以下顺序调用：<br><br><span class="hljs-function"><span class="hljs-title">constructor</span><span class="hljs-params">()</span></span><br>static getDerivedStateFromProps()<br><span class="hljs-function"><span class="hljs-title">render</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">componentDidMount</span><span class="hljs-params">()</span></span><br><br>更新中<br>更新可能由道具或状态的更改引起。当重新渲染组件时，这些方法按以下顺序调用：<br><br>static getDerivedStateFromProps()<br><span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">render</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">getSnapshotBeforeUpdate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">componentDidUpdate</span><span class="hljs-params">()</span></span><br><br>卸载<br>当组件从 DOM 中移除时调用此方法：<br><br><span class="hljs-function"><span class="hljs-title">componentWillUnmount</span><span class="hljs-params">()</span></span><br><br></code></pre></td></tr></table></figure><h3 id="说一下-react-fiber"><a href="#说一下-react-fiber" class="headerlink" title="说一下 react-fiber"></a>说一下 react-fiber</h3><h4 id="1）背景"><a href="#1）背景" class="headerlink" title="1）背景"></a>1）背景</h4><p>react-fiber 产生的根本原因，是<code>大量的同步计算任务阻塞了浏览器的 UI 渲染</code>。默认情况下，JS 运算、页面布局和页面绘制都是运行在浏览器的主线程当中，他们之间是互斥的关系。如果 JS 运算持续占用主线程，页面就没法得到及时的更新。当我们调用<code>setState</code>更新页面的时候，React 会遍历应用的所有节点，计算出差异，然后再更新 UI。如果页面元素很多，整个过程占用的时机就可能超过 16 毫秒，就容易出现掉帧的现象。</p><h4 id="2）实现原理"><a href="#2）实现原理" class="headerlink" title="2）实现原理"></a>2）实现原理</h4><ul><li>react内部运转分三层：<ul><li>  Virtual DOM 层，描述页面长什么样。</li><li>  Reconciler 层，负责调用组件生命周期方法，进行 Diff 运算等。</li><li>  Renderer 层，根据不同的平台，渲染出相应的页面，比较常见的是 ReactDOM 和 ReactNative。</li></ul></li></ul><p><code>Fiber 其实指的是一种数据结构，它可以用一个纯 JS 对象来表示</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">const fiber = &#123;<br>    stateNode,    <span class="hljs-regexp">//</span> 节点实例<br>    child,        <span class="hljs-regexp">//</span> 子节点<br>    sibling,      <span class="hljs-regexp">//</span> 兄弟节点<br>    return,       <span class="hljs-regexp">//</span> 父节点<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>为了实现不卡顿，就需要有一个调度器 (Scheduler) 来进行任务分配。优先级高的任务（如键盘输入）可以打断优先级低的任务（如Diff）的执行，从而更快的生效。任务的优先级有六种：<ul><li>  synchronous，与之前的Stack Reconciler操作一样，同步执行</li><li>  task，在next tick之前执行</li><li>  animation，下一帧之前执行</li><li>  high，在不久的将来立即执行</li><li>  low，稍微延迟执行也没关系</li><li>  offscreen，下一次render时或scroll时才执行</li></ul></li><li>Fiber Reconciler（react ）执行过程分为2个阶段：<ul><li>  阶段一，生成 Fiber 树，得出需要更新的节点信息。这一步是一个渐进的过程，可以被打断。阶段一可被打断的特性，让优先级更高的任务先执行，从框架层面大大降低了页面掉帧的概率。</li><li>  阶段二，将需要更新的节点一次过批量更新，这个过程不能被打断。</li></ul></li><li>Fiber树：React 在 render 第一次渲染时，会通过 React.createElement 创建一颗 Element 树，可以称之为 Virtual DOM Tree，由于要记录上下文信息，加入了 Fiber，每一个 Element 会对应一个 Fiber Node，将 Fiber Node 链接起来的结构成为 Fiber Tree。Fiber Tree 一个重要的特点是链表结构，将递归遍历编程循环遍历，然后配合 requestIdleCallback API, 实现任务拆分、中断与恢复。</li></ul><p>从Stack Reconciler到Fiber Reconciler，源码层面其实就是干了一件递归改循环的事情</p><h3 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h3><p>Portals 提供了一种一流的方式来将子组件渲染到存在于父组件的 DOM 层次结构之外的 DOM 节点中。结构不受外界的控制的情况下就可以使用portals进行创建</p><h3 id="何时要使用异步组件？如和使用异步组件"><a href="#何时要使用异步组件？如和使用异步组件" class="headerlink" title="何时要使用异步组件？如和使用异步组件"></a>何时要使用异步组件？如和使用异步组件</h3><ul><li>  加载大组件的时候</li><li>  路由异步加载的时候</li></ul><p>react 中要配合 Suspense 使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 异步懒加载</span><br><span class="hljs-keyword">const</span> Box = lazy(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/Box&#x27;</span>));<br><span class="hljs-comment">// 使用组件的时候要用suspense进行包裹</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;&gt;</span><br><span class="xml">    &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>/&gt;</span>&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h3 id="React-事件绑定原理"><a href="#React-事件绑定原理" class="headerlink" title="React 事件绑定原理"></a>React 事件绑定原理</h3><p>React并不是将click事件绑在该div的真实DOM上，而是<code>在document处监听所有支持的事件</code>，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。<br>另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 <code>event.preventDefault</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/2089718f74b342869de15f01588f033f_tplv-k3u1fbpfcp-watermark.jpg" alt="react事件绑定原理"></p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="webpack-做过哪些优化，开发效率方面、打包策略方面等等"><a href="#webpack-做过哪些优化，开发效率方面、打包策略方面等等" class="headerlink" title="webpack 做过哪些优化，开发效率方面、打包策略方面等等"></a>webpack 做过哪些优化，开发效率方面、打包策略方面等等</h3><p><strong>1）优化 Webpack 的构建速度</strong></p><ul><li>  使用高版本的 Webpack （使用webpack4）</li><li>  多线程/多实例构建：HappyPack(不维护了)、thread-loader</li><li>缩小打包作用域：<ul><li>  exclude/include (确定 loader 规则范围)</li><li>  resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)</li><li>  resolve.extensions 尽可能减少后缀尝试的可能性</li><li>  noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)</li><li>  IgnorePlugin (完全排除模块)</li><li>  合理使用alias</li></ul></li><li>充分利用缓存提升二次构建速度：<ul><li>  babel-loader 开启缓存</li><li>  terser-webpack-plugin 开启缓存</li><li>使用 cache-loader 或者 hard-source-webpack-plugin<br>  注意：thread-loader 和 cache-loader 兩個要一起使用的話，請先放 cache-loader 接著是 thread-loader 最後才是 heavy-loader</li></ul></li><li>DLL：<ul><li>  使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。</li></ul></li></ul><p>2）使用webpack4-优化原因</p><ul><li>  (a)V8带来的优化（for of替代forEach、Map和Set替代Object、includes替代indexOf）</li><li>  (b)默认使用更快的md4 hash算法</li><li>  (c)webpacks AST可以直接从loader传递给AST，减少解析时间</li><li>  (d)使用字符串方法替代正则表达式</li></ul><p>①noParse</p><ul><li>  不去解析某个库内部的依赖关系</li><li>  比如jquery 这个库是独立的， 则不去解析这个库内部依赖的其他的东西</li><li>  在独立库的时候可以使用</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts">module.exports = &#123;<br><span class="hljs-symbol">  module:</span> &#123;<br><span class="hljs-symbol">    noParse:</span> <span class="hljs-meta-keyword">/jquery/</span>,<br><span class="hljs-symbol">    rules:</span>[]<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>②IgnorePlugin</p><ul><li>  忽略掉某些内容 不去解析依赖库内部引用的某些内容</li><li>  从moment中引用 ./locol 则忽略掉</li><li>  如果要用local的话 则必须在项目中必须手动引入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;moment/locale/zh-cn&#x27;</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> Webpack.IgnorePlugin(<span class="hljs-regexp">/./</span>local/, <span class="hljs-regexp">/moment/</span>),<br>    ]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>③dillPlugin</p><ul><li>  不会多次打包， 优化打包时间</li><li>  先把依赖的不变的库打包</li><li>  生成 manifest.json文件</li><li>  然后在webpack.config中引入</li><li>  webpack.DllPlugin Webpack.DllReferencePlugin</li></ul><p>④happypack -&gt; thread-loader</p><ul><li>  大项目的时候开启多线程打包</li><li>  影响前端发布速度的有两个方面，一个是构建，一个就是压缩，把这两个东西优化起来，可以减少很多发布的时间。</li></ul><p>⑤thread-loader<br>thread-loader 会将您的 loader 放置在一个 worker 池里面运行，以达到多线程构建。<br>把这个 loader 放置在其他 loader 之前（如下图 example 的位置）， 放置在这个 loader 之后的 loader 就会在一个单独的 worker 池(worker pool)中运行。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// webpack.config.js</span><br>module.exports = &#123;<br><span class="hljs-symbol">  module:</span> &#123;<br><span class="hljs-symbol">    rules:</span> [<br>      &#123;<br><span class="hljs-symbol">        test:</span> /.js$/,<br><span class="hljs-symbol">        include:</span> path.resolve(<span class="hljs-string">&quot;src&quot;</span>),<br><span class="hljs-symbol">        use:</span> [<br>          <span class="hljs-string">&quot;thread-loader&quot;</span>,<br>          <span class="hljs-comment">// 你的高开销的loader放置在此 (e.g babel-loader)</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>每个 worker 都是一个单独的有 600ms 限制的 node.js 进程。同时跨进程的数据交换也会被限制。请在高开销的loader中使用，否则效果不佳</p><p>⑥压缩加速——开启多线程压缩</p><ul><li>不推荐使用 webpack-paralle-uglify-plugin，项目基本处于没人维护的阶段，issue 没人处理，pr没人合并。<br>  Webpack 4.0以前：uglifyjs-webpack-plugin，parallel参数</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = &#123;<br>  optimization: &#123;<br>    minimizer: [<br>      <span class="hljs-keyword">new</span> UglifyJsPlugin(&#123;<br>        parallel: <span class="hljs-literal">true</span>,<br>      &#125;),<br>    ],<br>  &#125;,&#125;;<br><br></code></pre></td></tr></table></figure><ul><li>  推荐使用 terser-webpack-plugin</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>  optimization: &#123;<br>    minimizer: [<span class="hljs-keyword">new</span> TerserPlugin(<br>      parallel: <span class="hljs-keyword">true</span>   <span class="hljs-comment">// 多线程</span><br>    )],<br>  &#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure><p><strong>2）优化 Webpack 的打包体积</strong></p><ul><li>  压缩代码</li><li>  提取页面公共资源：</li><li>  Tree shaking</li><li>  Scope hoisting</li><li>  图片压缩</li><li>  动态Polyfill</li></ul><p><strong>3）speed-measure-webpack-plugin</strong><br>简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。 <strong>开发阶段</strong></p><p>开启多核压缩 插件：** terser-webpack-plugin **</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> TerserPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;terser-webpack-plugin&#x27;</span>)<br><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = &#123;<br>    optimization: &#123;<br>        minimizer: [<br>            <span class="hljs-keyword">new</span> TerserPlugin(&#123;<br>                parallel: <span class="hljs-literal">true</span>,<br>                terserOptions: &#123;<br>                    ecma: <span class="hljs-number">6</span>,<br>                &#125;,<br>            &#125;),<br>        ]<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><h3 id="简单描述一下-Babel-的编译过程"><a href="#简单描述一下-Babel-的编译过程" class="headerlink" title="简单描述一下 Babel 的编译过程"></a>简单描述一下 Babel 的编译过程</h3><p>Babel 是一个 JavaScript 编译器，是一个工具链，主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><p><code>Babel</code> 本质上就是在操作 <code>AST</code> 来完成代码的转译。AST是抽象语法树（Abstract Syntax Tree, AST）</p><p><code>Babel</code> 的功能很纯粹，它只是一个编译器。大多数编译器的工作过程可以分为三部分：</p><ol><li> <strong>解析（Parse）</strong> ：将源代码转换成更加抽象的表示方法（例如抽象语法树）。包括词法分析和语法分析。词法分析主要把字符流源代码（Char Stream）转换成令牌流（ Token Stream），语法分析主要是将令牌流转换成抽象语法树（Abstract Syntax Tree，AST）。</li><li> <strong>转换（Transform）</strong> ：通过 Babel 的插件能力，对（抽象语法树）做一些特殊处理，将高版本语法的 AST 转换成支持低版本语法的 AST。让它符合编译器的期望，当然在此过程中也可以对 AST 的 Node 节点进行优化操作，比如添加、更新以及移除节点等。</li><li> <strong>生成（Generate）</strong> ：将 AST 转换成字符串形式的低版本代码，同时也能创建 Source Map 映射。</li></ol><p>经过这三个阶段，代码就被 <code>Babel</code> 转译成功了。</p><hr><h3 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h3><p>查看分支：git branch<br>创建分支：git branch<br>切换分支：git checkout<br>创建+切换分支：git checkout -b<br>合并某分支到当前分支：git merge<br>删除分支：git branch -d</p><h3 id="如何使用Git管理项目"><a href="#如何使用Git管理项目" class="headerlink" title="如何使用Git管理项目"></a>如何使用Git管理项目</h3><p><img src="https://cdn.jsdelivr.net/gh/icattuchuang001/tcA@main/2022/02/04/magicut_1643986028662.png" alt="image.png"></p><p>实际开发中，一个仓库（一般只放一个项目）主要存在两条主分支：master与develop分支。这个两个分支的生命周期是整个项目周期。</p><p>我们可能使用的不同类型的分支对项目进行管理是：</p><ul><li>功能分支 功能分支（或有时称为主题分支）用于为即将发布或遥远的未来版本开发新功能。在开始开发某个功能时，将包含该功能的目标版本在那时很可能是未知的。功能分支的本质在于，只要该功能处于开发阶段，它就存在，但最终会被合并回<code>develop</code>（明确将新功能添加到即将发布的版本中）或丢弃。功能分支通常只存在于开发者仓库中，而不存在于<code>origin</code>。</li><li>发布分支 发布分支支持准备新的生产版本。它们允许在最后一刻打点 i 和交叉 t。此外，它们允许修复小错误并为发布准备元数据（版本号、构建日期等）。通过在发布分支上完成所有这些工作，该<code>develop</code> 分支被清除以接收下一个大版本的功能。<ul><li>  从<code>develop</code>分支拉取，且必须合并回 <code>develop</code> 和 <code>master</code></li><li>  分支命名约定：<code>release-*</code></li></ul></li><li>修补程序分支  Hotfix 分支与发布分支非常相似，因为它们也旨在为新的生产版本做准备，尽管是计划外的。它们产生于需要立即对现场制作版本的不良状态采取行动。当必须立即解决生产版本中的关键错误时，可以从标记生产版本的主分支上的相应标记中分支出一个修补程序分支。</li></ul><p><strong>master</strong>：这个分支最为稳定，这个分支表明项目处于可发布的状态。<br><strong>develop</strong>：做为开发的分支，平行于master分支。<br><strong>Feature branches</strong>：这种分支和咱们程序员平常开发最为密切，称做功能分支。必须从develop分支建立，完成后合并回develop分支。<br><strong>Release branches</strong>：这个分支用来分布新版本。从develop分支建立，完成后合并回develop与master分支。这个分支上能够作一些很是小的bug修复，固然，你也能够禁止在这个分支作任何bug的修复工做，而只作版本发布的相关操做，例如设置版本号等操做，那样的话那些发现的小bug就必须放到下一个版本修复了。若是在这个分支上发现了大bug，那么也绝对不能在这个分支上改，须要Featrue分支上改，走正常的流程。<br><strong>Hotfix branches</strong>：这个分支主要为修复线上特别紧急的bug准备的。必须从master分支建立，完成后合并回develop与master分支。这个分支主要是解决线上版本的紧急bug修复的，例如忽然版本V0.1上有一个致命bug，必须修复。那么咱们就能够从master 分支上发布这个版本那个时间点 例如 tag v0.1（通常代码发布后会及时在master上打tag），来建立一个 hotfix-v0.1.1的分支，而后在这个分支上改bug，而后发布新的版本。最后将代码合并回develop与master分支。</p><h3 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h3><p><code>移除生产环境的控制台打印</code>。方案很多，esling+pre-commit、使用插件自动去除，插件包括babel-plugin-transform-remove-console、uglifyjs-webpack-plugin、terser-webpack-plugin。最后选择了terser-webpack-plugin，脚手架vue-cli用这个插件来开启缓存和多线程打包，无需安装额外的插件，仅需在configureWebpack中设置terser插件的drop_console为true即可。最好还是养成良好的代码习惯，在开发基本完成后去掉无用的console，vscode中的turbo console就蛮好的。</p><p><code>第三方库的按需加载</code>。echarts，官方文档里是使用配置文件指定使用的模块，另一种使用babel-plugin-equire实现按需加载。element-ui使用babel-plugin-component实现按需引入。</p><p>前后端数据交换方面，推动项目组使用蓝湖、接口文档，与后端同学协商，规范后台数据返回。</p><p>雅虎军规提到的，<code>避免css表达式、滤镜，较少DOM操作，优化图片、精灵图，避免图片空链接等</code>。</p><p><code>性能问题：页面加载性能、动画性能、操作性能</code>。Performance API，记录性能数据。</p><p>winter重学前端 优化技术方案：</p><p>缓存：<code>客户端控制的强缓存策略</code>。</p><p><code>降低请求成本</code>：DNS 由客户端控制，隔一段时间主动请求获取域名IP，不走系统DNS（完全看不懂）。TCP/TLS连接复用，服务器升级到HTTP2，尽量合并域名。</p><p><code>减少请求数</code>：JS、CSS打包到HTML。JS控制图片异步加载、懒加载。小型图片使用data-uri。</p><p><code>较少传输体积</code>：尽量使用SVG\gradient代替图片。根据机型和网络状况控制图片清晰度。对低清晰度图片使用锐化来提升体验。设计上避免大型背景图。</p><p><code>使用CDN加速</code>，内容分发网络，是建立再承载网基础上的虚拟分布式网络，能够将源站内容缓存到全国或全球的节点服务器上。用户就近获取内容，提高了资源的访问速度，分担源站压力。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回望2021年国产单机游戏</title>
    <link href="/2021/12/21/%E5%9B%9E%E6%9C%9B2021%E5%B9%B4%E5%9B%BD%E4%BA%A7%E5%8D%95%E6%9C%BA%E6%B8%B8%E6%88%8F/"/>
    <url>/2021/12/21/%E5%9B%9E%E6%9C%9B2021%E5%B9%B4%E5%9B%BD%E4%BA%A7%E5%8D%95%E6%9C%BA%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>2021年11月28日，知名技术评测媒体Digital Foundry发布了一条长达20分钟的《仙剑奇侠传七》技术解析视频。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/ec33-fe43c033cf0833dc6cee6448175d6db0.jpg"></p><p>Digital Foundry人称“数毛社”，内容以深入分析图形技术与游戏画质为主。在这个标题为《Sword and Fairy 7 Tech Review: The High-End PC Exclusive Nobody’s Talking About》的视频中，数毛社照例分析了仙剑七在RTX模式下的诸多画面表现，如光线追踪、DLSS以及在不同特效水平下的帧数性能。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/6e28-86751ddaee733db327a4c3c6f80920b6.jpg"></p><p>数毛社编辑还用英文版的95版仙剑初代给国外观众科普了一下，并震惊于自己之前竟然没听说过这个销量数百万的RPG系列</p><p>视频发布后，软星的人找到英伟达，问，这是不是你们投放的广告？</p><p>英伟达的人也问软星，这是不是你们投放的广告？</p><p>结果都不是。</p><p>这确实就是数毛社自发制作的视频，在节目中，数毛社编辑将仙剑七形容为“一款不为人知的高画质PC游戏”。这只是该频道几百个视频中很普通的一个，但传到大洋彼岸后，却引起了震动。</p><p>视频下方的最高赞评论说，</p><p>“哇，从来没想过我能看到这一天，我参与测试和翻译的游戏能出现在这个频道中。”</p><p>“从来没想过”也是很多中国玩家看到这个视频的感受。此前，数毛社往往与最前沿的国外大作捆绑在一起，他们几乎不会对中国的游戏进行详细的技术解析，原因大家都心知肚明：过去国内游戏的技术开发经验不足，采用的游戏开发技术往往落后国外一个时代，几年前甚至还有国产游戏把“粒子特效”当成技术卖点，实在没什么可分析的。</p><p>但到了2021年，DF先是年中连续出了两期《原神》的视频，年底又制作了《仙剑奇侠传七》的视频。11月2日，在发布仙剑七视频后不到一周，数毛社又发布了《暗影火炬城》的技术解析视频。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/8f04-48fe731ad9883f1d0a4f028eec94fb70.png"></p><p>回望2021年的国产单机市场，这是一个很具有历史意义的特写。这一年国产单机走出了国产情怀的圈子，与国际接轨程度更高，玩家不再因为“是国产的所以支持”，而是因为“做得好所以支持”。</p><p>1</p><p>2021年的单机游戏市场，是以两个“王炸”为开局的，《戴森球计划》和《鬼谷八荒》这两个完全不同的品类和题材，同时出圈大火，甚至给了人一种变天的错觉——好像百万销量也挺稀松平常的。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/7909-87f6f96b9065d71e2881b93d5c77cd51.jpg"></p><p>特别是《戴森球计划》，这款游戏是极为少见的水桶级国产单机游戏，在技术、题材、玩法和交互体验上都十分成熟。戴森球在Steam上的玩家有相当的比例来自于海外，也能说明游戏的国际化程度比较高——这里的国际化，并不是说中国人去做老外审美的游戏，而是游戏可以凭借本身的质量，来吸引到不同文化圈层的人群。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/8187-148d6651bddd369ac0f8ae9572d0821c.jpg"></p><p>年初两个爆款游戏，一款非常本土化，一款非常国际化，让人们看到了国产单机元化的未来</p><p>不过这种梦幻开局也仅限于年初，后面就平淡不少。但和全年都缺乏话题之作的2020年比起来，2021年的单机游戏已经明显“好起来了”，全年下来，能有十几款游戏能和大家混个脸熟。这背后固然有资本的推动（如心动、B站、腾讯等），但最终还是得依赖游戏自身的质量。</p><p>过去，人们在评价一款国产单机游戏的时候，会有一种很高的评价叫“不像国产游戏”，当时国产游戏相对国外有着非常大的技术和经验差距，以至于有一些作品的基础体验稍微成熟一点，就会让人觉得不像国产游戏了。这其中最直观的差距，是观感上的进步。</p><p>观感来源于两个层面，一是技术表现，二是美术风格。</p><p>前面提到数毛社评测过的国产游戏，像《暗影火炬城》《仙剑奇侠传七》，都是在国产单机中技术表现比较突出的。加上去年在英伟达和微软E3发布会上大放异彩的《光明记忆：无限》。它们还有个共同特征，就在最新的RTX特效方面，都与国际完全接轨，全部支持光线追踪和DLSS技术。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/88b2-e191bbb348dc52b1d2e88582ced02cb1.png"></p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/1413-4d4e33613cbbc3677480ac335e6d80ae.jpg"></p><p>我们此前介绍过，国外有中小开发商表示光追得以让他们以更低的成本实现复杂的光影效果，而在过去，只有3A大作才有足够的资源去做大量的光影烘焙和优化工作。这个道理放国内也行得通，加持RTX之后，此前受限于经验和成本所带来的的差距，便会缩小一些。</p><p>如果把买断制联网游戏也算上的话，去年《永劫无间》是个很有代表性的产品。</p><p>虽然是用Unity开发的，《永劫无间》最终呈现的画面质感已能追平国外同类游戏。但作为一款快节奏的竞技游戏，画质往往要让位于帧数。在过去，由于对高画质优化缺乏经验，摆在国内开发团队唯一的解，几乎就是大幅缩水画质。好在2021年已经有成熟的DLSS技术可用了，《永劫无间》应用DLSS后，便在画质和帧数间取得了更好的平衡——这是典型的由技术环境的发展带来的国产游戏质变。在游戏引擎层面其实也能看到这种现象，后文我们会讲到。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/793f-22d73dce4f283eeedb68a793b36c81e6.jpg"></p><p>严格来说《戴森球计划》也是技术表现很好的产品，游戏团队只有5人，从立项一开始就将优化放在很高的位置，这才能保证游戏在后期面临海量的运算时不至于卡爆，对于这类模拟经营游戏来说，流程后期的优化历来是技术难点，戴森球的5人团队能做到这个地步，可以说是奇迹了。</p><p>美术风格方面，2020年有《风来之国》《笼中窥梦》《烟火》《廖添丁：绝代凶贼之末日》等，这些产品的美术风格高度成熟，有着非常强的辨识度。过去，这种风格化产品普遍有个弊端，就是好看不好玩。远看阳春白雪，近看清汤寡水。但2021年这几款游戏的可贵之处在于游戏性也不错，起码达到了商业游戏的主流水准。其中《笼中窥梦》和《风来之国》在美术风格和可玩性之间取得的平衡尤为值得鼓励。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/ff3d-9f37e46a1b29983c37b3ba25ed8661d8.jpg"></p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/7a09-62532717add2d01a1aec34b09146af40.jpg"></p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/c764-d011b454848aa2f04c37ca4c24e1196a.jpg"></p><p>我刚毕业的时候是在杂志社工作，当时国内游戏杂志有个难言之隐，就是遇到国产游戏没法正常给出评价，总要呃呃呜呜说一些“虽然……但是……可对于国产游戏来说，能做到这样已经不容易了”，当时国产游戏也确实不争气。现在大家已经没有这个枷锁了，好就大大方方给好评，不好就给差评，而这种宽松的心态，又是多么可贵。</p><p>2</p><p>2021年有不少国产单机得到了比较多的曝光，要么是发行商宣传，要么是自来水安利，这意味着你大概率听说过它们。除了上文提到的一些 ，还有《天命奇御2》《小白兔电商》等既较好又叫座的产品。它们在Steam上的评测数都超过了5000，并保持着90%以上的好评率，自身的游戏质量也是相当扎实。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/7ae5-a8b2e0530e17177d78233c05a26d5fec.jpg"></p><p>同时也有一些国产单机的知名度要低不少，有的悄无声息地上线了，曝光量很少，玩家也没怎么听说过。但这些产品中，也不乏各具特色、玩起来可圈可点的游戏，值得关注一下。</p><p>比如《苏醒之路》，这是一款母亲和孩子一起在僵尸末世中求生的游戏。带有生存和rogue元素，画风很温馨，玩起来还是挺别开生面的。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/ae1e-a46010ddd89a7af06ee85e6de44eb1d6.jpg"></p><p>再如《天下为棋》，是暗黑奇幻风格的回合制战棋策略游戏，画风很抢眼，中式暗黑武侠的风格很少见，有当年《雨血前传：蜃楼》的风采。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/0501-55c0eb0200e161922f027ffb4c7ba1f3.jpg"></p><p>还有《异星前哨》，防守策略游戏，相当于科幻版的《亿万僵尸》，简化了资源和科技，重点在大规模防守战。这个游戏有点奇怪，在Steam上甚至没提供简体中文，要不是WeGame上有中文信息，都很难看出是国产的，可能要走出口转内销的路线。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/e0dd-670d0166a2c300dc18708b294ce2f72e.jpg"></p><p>上述游戏有个共同特点是在Steam上以好评为主，但评测数只有几百，目前完成度不高，都处在抢先体验阶段。如果有充足的打磨和完善，后续也有可能在市场上获取一席之地。</p><p>说到完成度，2021年还有一款完成度也很低，却收获了一万条评测95%好评率的游戏，名叫《死寂》。他是一个UP主花了十几天时间用“虚幻4”开发的，只是一个Demo，在游戏介绍里，开发者也说得明明白白：</p><p>这是一款无聊又没有剧情的第三人称丧尸游戏。</p><p>请不要对游戏有过高的期待，这只是我为了教程而制作的游戏，没有游戏玩法，纯属娱乐。</p><p>正是这份坦诚，加上游戏免费，加上主播自带流量，加上单人开发的话题性，再加上虚幻4引擎本身的高易用性（很低成本就能实现观感不错的画面和场景），让这个游戏着实火了一把。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/929e-9090bd2e7b59c1f9d50dec0de25a57fc.jpg"></p><p>从《死寂》《光明记忆》这些“单人开发”的高画质游戏，也能看出现代的成熟开发工具对游戏工业带来的变革。这些游戏的画面水平，是六七年前国产单机开发者不敢想的。但现在对于有一定基础的开发者，用虚幻商城里现成的美术、模型和音乐素材来搭建一个可玩的游戏，已经是一个比较便利的事情。真正耗费成本的是内容量的填充，所以这类游戏的流程普遍很短。</p><p>去年还有个类似的游戏是《猴王模拟器之花果山篇》，也是一个人用虚幻4开发的。3D动作游戏，场景和战斗都有鼻子有眼，黑神话低配青春版，只卖8块钱。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/c82d-81368ac0d4fc7d2f5fe8d8f0a27478dd.jpg"></p><p>当然，因为肉眼可见的糙和低完成度，实际上这款游戏也没什么销量，Steam评测数为61。好评率是95%，因为游戏战斗部分做的还是挺用心的，8块钱怎么也不亏。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/d44d-a03bdda8f194e8fe8c3bbe4fe4db43a9.png"></p><p>3</p><p>总的来说，2021年的国产单机比前一年有明显提升，进步的原因有很多：</p><p>从人的角度来说，这几年国内开发者的经验积累很快。虽然很多主机PC玩家看不上手游，但确实很多单机游戏是靠着开发者在手游项目上的积累，才最终开枝散叶落地结果。</p><p>从工具的角度来说，现在的游戏引擎已十分易用，大大降低了开发游戏的门槛——注意只是门槛，而不是成本。</p><p>从用户的角度来说，Steam等数字发行平台的普及，正版观念的培养，让中国单机有了足够的用户土壤。</p><p>最后，从内容制作与消费意识的角度来看，开发者的格局终于打开，不再把眼界局限于狭窄的游戏类型上——同质化的武侠RPG和一窝蜂的Roguelike现象逐渐成为过去。现在国产单机的玩法和故事线更加多样，而尝尽百草的玩家在游戏口味上也发生了很大变化，对国产游戏多样性批评有之，更多则是鼓励和期许，开发者和玩家形成良性关系像伯牙子期相辅相成。</p><p>这几个原因缺一不可，中国单机游戏熬了很多年，才终于等到这种时间窗口。</p><p>而除了这些大环境的因素，国产单机的发展背后，其实还有一些容易被忽视的第三方力量在推动，这种力量在去年尤为明显。</p><p>在去年4月英伟达举行的GPU技术大会（GTC）上，英伟达照例用前沿的游戏技术来展示他们的显卡特性，发布会上出现了《微软模拟飞行》《死亡搁浅》等国外大作，同时也有《黑神话：悟空》《光明记忆》《永劫无间》《边境》四款国产游戏。</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/4402-a80a3242f200b1850344fcc45e721fd2.png"></p><p>这里出现了一个史无前例的信号，国产游戏在GTC上的内容占比首次超过了50%。是的，这是一个面向世界的游戏图形技术大会，用来展示的游戏大部分来自中国。</p><p>如果你有关注游戏新闻，应该会注意到英伟达频频在为国产游戏背书，这种背书不只限于国内，在全球各种大大小小的展会上，包括英伟达的官方财报中，都会看到英伟达把国产游戏当成重要的合作案例推向全世界。这些不同以往的现象，包含着很多个“第一次”。</p><p>前段时间，我与英伟达的张楚先生聊了聊。张楚负责英伟达的中国区开发者关系与游戏内容管理，与国内开发者沟通密切。从他那里，我了解到了更多有意思的事情。</p><p>张楚先生告诉我，英伟达的美国总部对中国游戏格外欢迎，热衷于全球宣传。他们能明显感觉到“中国游戏在影响全球，玩法和画面水平在迅速提升，中国游戏开发者不仅能做中国文化游戏，而且还能做老外喜闻乐见的游戏。”</p><p>张楚先生用最近大火国内外的《昭和米国物语》举了个例子，“这只是一个开始，以后会有越来越多中国游戏走向世界。”</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/5ad9-2299319d6faca8a9a5e80fe1bc0f8790.jpg"></p><p>作为最大的图形芯片厂商，英伟达与国内开发商的合作在十几年前便已开始。但受限于国产游戏技术的发展，在很长一段时间内，双方的合作重心主要在于“保证稳定的运行效率”，而非“呈现惊人的画面效果”——前已言之，当时国内游戏画面落后国外不止一个时代。但从RTX时代开始，情况开始发生变化，最早支持光线追踪的产品中就有国产游戏《逆水寒》身影。到了2021年，由于疫情导致国外大作产能不足，普遍延期，全球技术的技术展现窗口让位于国产游戏，最终促成了“GTC展示国产游戏占比首次超过50%”的局面。</p><p>关于那次GTC，张楚先生还分享了一个让他印象深刻的事情。当时《光明记忆》出现了一些技术问题，为了确保演示能顺利展现，他们邀请开发者“飞燕群岛”到英伟达的上海办公室，配合了一组包括测试、TA（技术美术）在内的技术人员，花了一周时间协助优化，才在GTC上达成了最佳的演示效果。</p><p>虽然不是游戏公司，但英伟达其实也有“制作人”岗位，制作人的职责是减少游戏的硬件兼容问题，提高运行效率。我特意问了当年仙剑六的“泰坦陨落”事件，张楚先生说，当时他们和软星还没建立足够的合作。但也正是因为这场优化灾难过于有名，到了仙剑七，英伟达开始深度参与到游戏的开发和优化中，要“不惜代价把仙剑七优化到最好”。</p><p>“我们配备了最资深的TA，整天围绕游戏优化。游戏发售前3个月，我们的制作人曾表态，游戏只要没优化完全，他就一天不剪胡子。” 张楚先生跟我半开玩笑地说，“他真的这样做了，最后像个野人一样。”</p><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/5a15-9191b0f5a9db67fba216219150e068cf.jpg"></p><p>现在仙剑七上市已经3个月，人们对这款游戏的是非功过各有结论。不可否认的是，在技术层面，它已经是一款成熟的RTX游戏。7年前那个悲喜交加的“泰坦陨落6”梗，如今看起来已恍若隔世。</p><p>结语</p><p>站在大作蓄势待发的2022年，回望过去，会看到2021年国产单机的繁荣，某种程度上也是疫情给中国游戏的一个发展窗口。今年的单机市场竞争分外激烈，如果不集体跳票的话，完全可以用“神仙打架”来形容，那么国产游戏将何去何从呢?</p><p>我希望到了今年年底，国产单机游戏依然可以有一些值得铭记的作品。毕竟，能从如此激烈的市场历练中走出来，才是真正具有国际竞争力的产品。</p>]]></content>
    
    
    <categories>
      
      <category>每日一文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>朱德庸：在一个时代里缓慢行走</title>
    <link href="/2021/12/21/%E6%9C%B1%E5%BE%B7%E5%BA%B8%EF%BC%9A%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%97%B6%E4%BB%A3%E9%87%8C%E7%BC%93%E6%85%A2%E8%A1%8C%E8%B5%B0/"/>
    <url>/2021/12/21/%E6%9C%B1%E5%BE%B7%E5%BA%B8%EF%BC%9A%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%97%B6%E4%BB%A3%E9%87%8C%E7%BC%93%E6%85%A2%E8%A1%8C%E8%B5%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/xbtc82feeeeea8681d7369f327d8c3ef03fc.jpg"></p><p>我喜欢走路。</p><p>我的工作室在十二楼，刚好面对台北很漂亮的那条敦化南路，笔直宽阔的绿荫道绵延了几公里。人车寂静的平常夜晚或周六周日，我常常和妻子沿着林荫道慢慢散步到路的尽头，再坐下来喝杯咖啡，谈谈世界又发生了哪些特别的事。</p><p>这样的散步习惯有十几年了，陪伴我们一年四季不断走着的是一直在长大的儿子，还有那些树。</p><p>一开始是整段路的台湾栾树，春夏树顶开着苔绿小花，初秋树梢转成赭红，等冬末就会突然落叶满地、只剩无数黑色枝桠指向天空。接下来是高大美丽的樟树群，整年浓绿。再经过几排叶片棕黄、像挂满一串串闪烁的心的菩提树，后面就是紧挨着几幢玻璃帷幕大楼的垂须榕树了。</p><p>这么多年了，亚热带的阳光总是透过我们熟悉的这些树的叶片轻轻洒在我们身上，我也总是讶异地看到，这几个不同的树种在同样一种气候下，会展现出截然相反的季节面貌：有些树反复开花、结子、抽芽、凋萎，有些树春夏秋冬，常绿不改。不同的植物生长在同一种气候里，都会顺着天性有这么多自然发展；那么，不同的人们生长在同一个时代里，不是更应该顺着个性有更多自我面貌？</p><p>我看到的这个世界却不是如此。</p><p>我们这个时代的人，情绪变得很多，感觉变得很少：心思变得很复杂，行为变得很单一；脑的容量变得越来越大，使用区域变得越来越小。更严重的是，我们这个世界所有的城市面貌变得越来越相似，所有人的生活方式也变得越来越雷同了。</p><p>就像不同的植物为了适应同一种气候，强迫自己长成同一个样子那么荒谬；我们为了适应同一种时代氛围，强迫自己失去了自己。</p><p>如果，大家都有问题，问题出在哪里呢？</p><p>我想从我自己说起。</p><p>小时候我觉得，每个人都没问题，只有我有问题。长大后我发现，其实每个人都有问题。当然，我的问题依然存在，只是随着年龄增加又有了新的问题。小时候的自闭给了我不愉快的童年，在团体中我总是那个被排挤孤立的人；长大后，自闭反而让我和别人保持距离，成为一个漫画家和一个人性的旁观者，能更清楚地看到别人的问题和自己的问题。“问题”那么多，似乎有点儿令人沮丧。但我必须承认，我就是在小时候和长大后的问题中度过目前为止的人生。而且世界就是如此，每个人都会在各种问题中度过他的一生，直到离开这个世界，问题才真正没问题。</p><p>小时候的问题，往往随着你的天赋而来。然而，上天对你关了一扇门，一定会为你开另一扇窗；我认为这正是自然界长久以来的生存法则。就像《侏罗纪公园》里的一句经典台词：“生命会找到他自己的出路。”童年的自闭让我只能待在图像世界里，用画笔和外界单向沟通，却也让我能坚持走出一条自己的路。</p><p>长大后的问题，对人才真正严重。因为那是后天造成的，它原本就不是你体内的一部分，不会为你开启任何一扇窗或一道门。而我觉得，现代人最需要学会处理的，就是长大后的各种心理和情绪问题。</p><p>我们碰上的，刚好是一个物质最丰硕而精神最贫瘠的时代，每个人长大以后，肩膀上都背负着庞大的未来，都在为一种不可预见的“幸福”拼斗着。但所谓的幸福，却早已被商业稀释而单一化了。市场的不断扩张、商品的不停量产，其实都是违反人性的原有节奏和简单需求的，激发的不是我们更美好的未来，而是更贪婪的欲望。长期的违反人性，大家就会生病。当我们“进步”太快的时候，只是让少数人得到财富，让多数人得到心理疾病罢了。</p><p>是的，这是一个只有人教导我们如何成功，却没有人教导我们如何保有自我的世界。我们这个时代，对我们大家开了一场巨大的心灵玩笑：我们周围所有的东西都在增值，只有我们的人生悄悄贬值。世界一直往前奔跑，而我们大家紧追在后。可不可以停下来喘口气，选择“自己”，而不是选择“大家”？也许这样才能不再为了追求速度，却丧失了我们的生活，还有生长的本质。</p><p>前年底，我得了一个“新世纪10年阅读最受读者关注十大作家”的奖项，请友人代领时念了一段得奖感言：“这是一个每个人都在跑的时代，但是我坚持用自己的步调慢慢走，因为我觉得大家其实都太快了——就是因为我还在慢慢走，所以今天来不及到这里领奖。”这本《大家都有病》从2000年开始慢慢构思，到2005年开始慢慢动笔，前后经过了十年。这十年里，我看到亚洲国家的人们，先被贫穷毁坏一次，然后再被富裕毁坏另一次。我把这本书献给我的读者，并且邀请你和我一起，用你自己的方式，在这个时代里慢慢向前走。</p>]]></content>
    
    
    <categories>
      
      <category>每日一文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我们需要怎样的 Service</title>
    <link href="/2021/12/21/%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%20Service/"/>
    <url>/2021/12/21/%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%20Service/</url>
    
    <content type="html"><![CDATA[<p>14 世纪，英格兰的逻辑学家奥卡姆在他的《箴言书注》中说「不要浪费过多的东西，去做那些用较少的东西同样可以做好的事情」。后来这句话被简化为「奥卡姆剃刀原理」，即：如无必要，勿增实体。奥卡姆剃刀在各个领域都有他的运用，他不是一个公理，没有严谨的推导过程，但他却是一个在实践中被证明非常有效的解决问题的手段。</p><p>在编程世界里，有太多我们习以为常的东西，我相信存在即合理，同时我也相信存在都有前提，而前提会随着时间变化甚至消失。下面我想跟大家探讨下，我们前端项目中那些应该被剃刀剃掉的东西。</p><h2 id="前端项目里的-service-层"><a href="#前端项目里的-service-层" class="headerlink" title="前端项目里的 service 层"></a>前端项目里的 service 层</h2><p>在一个前端项目中，一般包含以下文件目录：</p><ul><li>  containers：页面</li><li>  components：组件</li><li>  utils：工具方法</li><li>  routes：路由</li><li>  services：数据服务</li><li>  index.js 入口文件</li></ul><p>我们的业务代码基本都在 containers components 里，utils 和 routes 也是必不可少的，但仔细思考我们就会发现，这里有个 services 文件夹，他被称为数据服务层，是我们跟后端打交道的。这一层真的需要吗？<br>我们来看看大家是怎么使用 service 的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// services  文件夹下的 accoutService.js</span><br><br><span class="hljs-keyword">import</span> &#123; post &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span>;<br><br><span class="hljs-comment">// 获取账号列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getAccountsList = <span class="hljs-function"><span class="hljs-params">params</span> =&gt;</span> post(<span class="hljs-string">&#x27;/api/accounts.json&#x27;</span>, params);<br><span class="hljs-comment">// 新增账号</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> insertAccount = <span class="hljs-function"><span class="hljs-params">params</span> =&gt;</span> post(<span class="hljs-string">&#x27;/api/insertAccount.json&#x27;</span>, params);<br><span class="hljs-comment">// 更新状态</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> updateAccount = <span class="hljs-function"><span class="hljs-params">params</span> =&gt;</span> post(<span class="hljs-string">&#x27;/api/updateAccount.json&#x27;</span>, params);<br><span class="hljs-comment">// 校验账号查询</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> checkAccount = <span class="hljs-function"><span class="hljs-params">params</span> =&gt;</span> post(<span class="hljs-string">&#x27;/api/checkAccount.json&#x27;</span>, params);<br><br>-------- 使用 ---------<br><br><span class="hljs-keyword">import</span> &#123; getAccountsList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/accountService&#x27;</span><br><br><span class="hljs-keyword">const</span> App = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = useState(<span class="hljs-string">&#x27;&#x27;</span>);<br>    useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>      getAccountsList().then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>       setName(res.name);<br>    &#125;);<br>  &#125;, [])<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>从上面的代码我们可以看出，services 文件下基本是一些模板代码，偶尔有少见的一些数据转换。这些内容对于我们的业务代码来说，都是非业务相关的，写这些模板性的控制代码真的有必要吗？</p><h2 id="service-里包含什么？"><a href="#service-里包含什么？" class="headerlink" title="service 里包含什么？"></a>service 里包含什么？</h2><ul><li>  数据转换逻辑 converHandler</li><li>  数据请求工具 request</li><li>  请求地址定义 url</li><li>  全局拦截器 interceptor</li><li>  附加功能 openApi</li></ul><p>数据转换逻辑 converHandler：并不通用，有的一个请求在不同的页面需要走不同的转换逻辑，这些转换逻辑一般会写在调用位置的代码里，我也建议这么做，因为数据转换也是这块某个 container 的功能，而且为了方便测试，建议添加 handler.js 将转换逻辑抽离出来。</p><p>数据请求工具 request：主要是封装各种请求，这部分需要统一。非业务相关，可以提出来。</p><p>请求地址定义 url：这部分是强业务相关的，不应该放到 service 里，而是作为 service 的一个配置，由外部输入。</p><p>全局拦截器 interceptor：处理一些通用的业务状态码，比如编辑成功 10001，这部分也是强业务相关的，而且相对比较复杂，但是可以通过配置 schame 来描述，后面再讲。</p><p>附加功能 openAPI：如果你系统的接口想让别的系统复用，比如 MTEE 基础平台的接口需要复用给运营平台，那么前端需要提供领域物料，领域物料里会发请求，发请求要解决跨域、登陆、授权的问题，openAPI 应运而生。</p><p>综上可以看出，service 层只需要一些统一的逻辑处理和配置文件就能描述清楚，甚至我们可以把 Service 层简化为</p><p>$$service = request + config$$</p><h2 id="我的-service-包"><a href="#我的-service-包" class="headerlink" title="我的 service 包"></a>我的 service 包</h2><p>由此，我希望能设计这样一个 service 包，他需要包含下面的功能：</p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>支持常见的 get post jsonp 请求，以及对于这些请求的附加方法，比如 debounce、throttle、缓存、loading 等功能。也可以提供大家比较喜欢的 hooks API。</p><h3 id="接口配置"><a href="#接口配置" class="headerlink" title="接口配置"></a>接口配置</h3><p>一个接口包含域名 domain，地址路径 path，请求方法 method，参数 params，一些常见功能的开关，比如开启防抖 { debounce:true } 。参数的配置里，可以添加该参数的基本属性，比如是否必选 { require: true } ，这样包内可以对参数做必要的校验，这样可以保证非法数据传入后台。</p><h3 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h3><p>环境切换是一个非业务相关的功能，他不应该硬编码到代码里，带到线上。他应该只是一个配置，尽量与代码脱离，因此是用浏览器插件来切换，就是一个很好的方法。可以设计 service 包接收一个 domainMap，这个 domainMap 来自 window.GlobalConfig 下的某个变量，浏览器插件可以动态改变这个变量，就可以做到环境的切换了。<br><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2022-01-28/xbtc0486fb211004ed5be366701b81d2b408.jpg" alt="image.png"></p><h3 id="网关转发"><a href="#网关转发" class="headerlink" title="网关转发"></a>网关转发</h3><p>我们写代码追求复用，从代码块的复用到组件复用，再到业务能力的复用，而业务能力复用的一个载体就是领域物料。一个领域物料里很有多个接口请求，如果我们把原来在业务代码里的组件拆出来作为领域物料的话，就不得不把项目里的 service 层也要打包进去，这样才能发送请求和处理一些统一的异常。上面的我提到的把是service 层做成一个包，别人在使用的时候，只需要传配置进来，也是出于领域物料这个场景。<br>这之后，我们还要解决一个问题：领域物料在不同站点使用带来的接口跨域问题。我们现在的解决办法是，前端搭建一套基于 node 的网关，用于做接口转发和鉴权。service 包里会集成这个过程，外部使用者只需要配置开不开启网关就可以了。他完全不需要知道网关是如何转发的，就像在自己的站点下写组件一样。</p><h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><p>我们在接手别的项目的时候，总是不容易找到他的接口文档，因为文档和代码是割裂的，文档的维护也有滞后性，甚至慢慢文档的链接也找不到了。因此，代码和文档应该在一起，最好是代码即文档。大家可能觉得用注释就可以了，但程序员总是要求别人写注释，但自己却不爱写。写注释如果可以像写代码一样，或许能规范这部分的行为。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;获取账号&#x27;</span>,<br>    <span class="hljs-attr">domain</span>: DOMAIN.TAOBAO,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/getAccount.json&#x27;</span>,<br>    <span class="hljs-attr">method</span>: METHOD.GET,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">userId</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;策略包id&#x27;</span>,<br>        <span class="hljs-attr">type</span>: PARAM_TYPE.STRING,<br>        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">response</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;账户名字&#x27;</span><br>    &#125;,<br>  &#125;,<br></code></pre></td></tr></table></figure><p>这里用配置文件的方式规范了文档的形式，还可以与浏览器插件相结合，通过插件来查看当前用的接口文档。</p><h3 id="异常拦截"><a href="#异常拦截" class="headerlink" title="异常拦截"></a>异常拦截</h3><p>异常分为服务器异常和业务异常，服务器异常一般是用 http 状态码，400、500等；业务异常则需要是用 body 里的 code 来表示。在真实的业务实践中，我们发现对于服务器异常我们是很容易写出通用的拦截器做一些处理的，但是对于业务异常，就相对比较复杂了，这里面存在几个问题：</p><ul><li>  很多后端不习惯使用 code 返回相应的业务编码来表示不同的状态。</li><li>  前端直接使用后端返回的 message 展示给用户，这里有两个问题，① 后端的需要引入第三方库对 message 做国际化 ② 后端定义的 message 不是用户语言，用户一般是看不懂的。因此这里就需要一个第三方系统的参与，他提供业务 code 和前端动作的映射关系表，比如：后端返回 code:10000，前端应该弹窗并展示 message，定义的 json 如下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  code: <span class="hljs-number">10000</span>,<br>  message: &#x27;编辑失败&#x27;,<br>  debug: &#x27;后端数据库读写异常，堆栈信息：&#x27;,<br>  showType: &#x27;openDialog&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 message 是可以根据不同语言环境返回不同语言文字的，showType 表示了前端的动作类型，这个是可枚举的，其中肯定有一种动作是，不做动作，直接透传。这个第三方系统，就可以配置不同编码的动作，有利于精细化的管理异常，给用户更好的体验。</p><h2 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h2><p>实践是检验真理的唯一标准，基于上面的理想，我的 service 包也已经成型，使用他非常简单。只需要两步：<br>① 配置文件<br>② 引入包<br>③ 业务代码里调用</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 配置文件 account.js</span><br><br><span class="hljs-keyword">import</span> &#123; METHOD, PARAM_TYPE &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ali/hulu-service&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> DOMAIN = &#123;<br>   <span class="hljs-attr">TAOBAO</span>: <span class="hljs-string">&#x27;//taobao.com&#x27;</span>,<br>   <span class="hljs-attr">ALIPAY</span>: <span class="hljs-string">&#x27;//alipay.com&#x27;</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">getAccount</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;获取账号&#x27;</span>,<br>    <span class="hljs-attr">domain</span>: DOMAIN.TAOBAO,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/getAccount.json&#x27;</span>,<br>    <span class="hljs-attr">method</span>: METHOD.GET,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">userId</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;策略包id&#x27;</span>,<br>        <span class="hljs-attr">type</span>: PARAM_TYPE.STRING,<br>        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">response</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;账户名字&#x27;</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> HService <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ali/hulu-service&#x27;</span>;<br><span class="hljs-keyword">import</span> account <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./account&#x27;</span>;<br><br><span class="hljs-comment">// 初始化service</span><br><span class="hljs-keyword">const</span> service = HService.init(&#123;<br>  <span class="hljs-attr">urls</span>: [<br>      account,<br>  ]<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;<br></code></pre></td></tr></table></figure><h3 id="调用-API"><a href="#调用-API" class="headerlink" title="调用 API"></a>调用 API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Service <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./service&#x27;</span>;<br><br><span class="hljs-keyword">const</span> App = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = useState(<span class="hljs-string">&#x27;&#x27;</span>);<br>    useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>      Service.getAccount().then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>       setName(res.name);<br>    &#125;);<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>同时基于浏览器插件，可以快速的切换环境，查看接口文档等。</p><h2 id="想想边界"><a href="#想想边界" class="headerlink" title="想想边界"></a>想想边界</h2><p>开头，我们说到奥卡姆剃刀，如无必要，勿增实体，这个的前提是，有清晰独立的实体，如果我们的实体之间相互勾连耦合，那又如何剃掉不必要的实体呢。<br>其实，无论做任何软件构架，都要分清楚边界，也就是一个模块他的定位是什么，哪些功能是他该做的，哪些不是。这里面一个非常重要的依据就是是否易于变更。哪些是业务的、常变化的，哪些是非业务的、一般不变的。我们的代码常常，坏就坏在边界不清晰，或者是边界原则没有一以贯之。工程代码里耦合了业务，业务代码里掺杂着工程（比如环境判断）。代码的坏味道是一点一点积累而成的，而这个坏的开始，就是初始的架构设计边界不清晰，没有用代码定义规范。<br>抵抗代码的腐败，这是一个漫漫长路，没有银弹，但确实可以精进一个人的系统思维。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冯骥才:十年</title>
    <link href="/2021/12/20/%E5%86%AF%E9%AA%A5%E6%89%8D:%E5%8D%81%E5%B9%B4/"/>
    <url>/2021/12/20/%E5%86%AF%E9%AA%A5%E6%89%8D:%E5%8D%81%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<p>　　<img src="https://s2.loli.net/2022/01/27/ZuWz9p6Vi1ygsEJ.jpg"></p><p>　　一次在山东出差，有个人敲旅馆房间门找我，抽支烟，喝杯水，坐那儿聊。他说，你可能要失望，我是一个没有故事、没有情节的人，我什么都没有。我一听，觉得有意思。我也看得出，他有一种难以自抑的诉说的欲望。我问，你还没有什么？他说，我连性格也没有。</p><p>他学化学出身，家里三代都是农民，脸朝黄土背朝天总在那儿锄草。他的老师（1957年打成右派）告诉他，美国有一种锄草剂，撒到地里不长草只长农作物，他就想研制中国的锄草剂。但当时搞科研是“白专”，他就假借学英文版《毛选》学外语，然后帮着整理书以便进资料室看国外的资料。但即使这样也容易暴露，于是他决定让自己消失。其实1957年反右以后，他看到那么多人毁了，就悟到：在中国社会里想做成一件事，最好的办法就是消灭自己——消灭自己的个性、脾气、声音，不让别人看见你、注意你，在人群中好像不存在。我一听，汗毛眼儿都张开了。</p><p>整个十年，没有人找他麻烦。任何时候开会，他都在角落里坐着；别人欺负他，他也不发脾气；他从不大声说话，也从不直视别人的眼睛，因为只有你看别人，别人才会注意你。他做成了，中国当时六百多种杂草他说我都有办法。他来找我的时候已经是一位很受重视的专家，国内外会议都找他，也有姑娘争着要嫁给他。可他忽然觉得自己很可怕，没有性格没有历史。他说我不是一个人，异化了。</p>]]></content>
    
    
    <categories>
      
      <category>每日一文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给你的邮箱戴上面具：匿名邮箱</title>
    <link href="/2021/11/29/%E7%BB%99%E4%BD%A0%E7%9A%84%E9%82%AE%E7%AE%B1%E6%88%B4%E4%B8%8A%E9%9D%A2%E5%85%B7%EF%BC%9A%E5%8C%BF%E5%90%8D%E9%82%AE%E7%AE%B1/"/>
    <url>/2021/11/29/%E7%BB%99%E4%BD%A0%E7%9A%84%E9%82%AE%E7%AE%B1%E6%88%B4%E4%B8%8A%E9%9D%A2%E5%85%B7%EF%BC%9A%E5%8C%BF%E5%90%8D%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2021-12-07/IMG_20211207_130515.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue仿网易云音乐播放器界面</title>
    <link href="/2021/11/28/vue%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E7%95%8C%E9%9D%A2/"/>
    <url>/2021/11/28/vue%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E7%95%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>由于项目的需要，需要使用到歌曲播放，参考多方资料，写了一个仿网易云音乐播放界面，能完整的实现音乐播放功能。</p><p>前端简单的使用vue组件和audio标签实现了播放器界面，后端则是调用网易云的API获取对应的歌曲信息。</p><p>废话不多说上代码</p><p>歌曲播放界面（musicPlay.vue）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-page&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;songInfo.url&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;music&quot;</span> <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;autoplay&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;background-flitter&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;`background-image: url($&#123;songInfo.cover&#125;)`&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;play-mini&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleProgressClick&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;track&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-box&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; width: audioProgressPercent &#125;&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;songInfo&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;poster&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;songInfo.cover&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 歌名、歌手名 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: 600; color: #fff;&quot;</span>&gt;</span>&#123;&#123; songInfo.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 14px; color: #fff&quot;</span>&gt;</span>&#123;&#123; songInfo.artistsName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 上一首提示 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Tooltip</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;上一首&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">:delay</span>=<span class="hljs-string">&quot;1500&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Icon</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;md-skip-backward&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;skipBack&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;26&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">&quot;white&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Tooltip</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 播放暂停 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Tooltip</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;播放暂停&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">:delay</span>=<span class="hljs-string">&quot;1500&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;playMusic&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;status&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!playing&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/play_icon.png&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;status&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;playMusic&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;playing&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/play-02.png&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Tooltip</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 下一首提示 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Tooltip</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;下一首&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">:delay</span>=<span class="hljs-string">&quot;1500&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Icon</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;md-skip-forward&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;skipForward&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;26&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">&quot;white&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Tooltip</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-botton&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 音量 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Icon</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:type</span>=<span class="hljs-string">&quot;volumeType&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;26&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">&quot;white&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;volumeChange&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Slider</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 80px; z-index: 99999&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">on-input</span>=<span class="hljs-string">&quot;changeVolum&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;volume&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Slider</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 歌曲播放类型 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Tooltip</span> <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;showPlayType&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">:delay</span>=<span class="hljs-string">&quot;1500&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Icon</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:custom</span>=<span class="hljs-string">&quot;playStatus&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;playTypeChange&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;26&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">&quot;white&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Tooltip</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;playlist&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 播放列表 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Tooltip</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;列表&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">:delay</span>=<span class="hljs-string">&quot;1500&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Icon</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">custom</span>=<span class="hljs-string">&quot;iconfont icon-bofangqi-xuanji&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;drawer = true&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;36&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">&quot;white&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Tooltip</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;song-cover-lyric&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disc-continer&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;poster&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;rotate&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;songInfo.cover&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;song-name&quot;</span>&gt;</span>&#123;&#123; songInfo.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;song-artistsName&quot;</span>&gt;</span>&#123;&#123; songInfo.artistsName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lyric&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mscroll</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;lyric&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:color</span>=<span class="hljs-string">&quot;color&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:colorLight</span>=<span class="hljs-string">&quot;colorLight&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:lineHeight</span>=<span class="hljs-string">&quot;lineHeight&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:paddingTop</span>=<span class="hljs-string">&quot;paddingTop&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:fontSize</span>=<span class="hljs-string">&quot;fontSize&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:lyricIndex</span>=<span class="hljs-string">&quot;lyricIndex&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:lyricsList</span>=<span class="hljs-string">&quot;lyricInfo&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mscroll</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Drawer</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">title</span>=<span class="hljs-string">&quot;播放列表&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;left&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:closable</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;drawer&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-container&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;songInfo&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in songList&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">@<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;PlayListMusic(index)&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.cover&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;singer&quot;</span>&gt;</span>&#123;&#123; item.artistsName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Drawer</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; showMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../publicMethod/publicMethods&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> Mscroll <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./lyricScroll.vue&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> commonJs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../utils/timeConversion&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">volumeNum</span>: <span class="hljs-number">80</span>, <span class="hljs-comment">//暂存的音量</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">volumeStatus</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//音量图标的变化</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">volumeType</span>: <span class="hljs-string">&quot;md-volume-up&quot;</span>, <span class="hljs-comment">//音量图标</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">playStatus</span>: <span class="hljs-string">&quot;iconfont icon-xunhuanbofang&quot;</span>, <span class="hljs-comment">//播放类型图标</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">playing</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">drawer</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">playIndex</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">songInfo</span>: &#123;&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">songList</span>: [],</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">volume</span>: <span class="hljs-number">80</span>, <span class="hljs-comment">// 音量</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">lyricInfo</span>: [],</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">playType</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 播放类型：1-列表循环，2-随机播放，3-单曲循环</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">showPlayType</span>: <span class="hljs-string">&quot;列表循环&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">audioProgress</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">thumbTranslateX</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">lyricIndex</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#fff&quot;</span>, <span class="hljs-comment">//歌词默认颜色</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">colorLight</span>: <span class="hljs-string">&quot;#40ce8f&quot;</span>, <span class="hljs-comment">//歌词高亮色</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;16px&quot;</span>, <span class="hljs-comment">//歌词字体大小</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">lineHeight</span>: <span class="hljs-string">&quot;42&quot;</span>, <span class="hljs-comment">//每段行高</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">paddingTop</span>: <span class="hljs-string">&quot;300px&quot;</span>, <span class="hljs-comment">//高亮歌词部分居中</span></span><br><span class="javascript"></span><br><span class="javascript">&#125;;</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript"></span><br><span class="javascript">Mscroll,</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">audioProgressPercent</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.audioProgress * <span class="hljs-number">100</span>&#125;</span>%`</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> music = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;music&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.$route.query.play) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.ClickPlay();</span><br><span class="javascript"></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.GetSongList();</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.playing) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 播放中,点击则为暂停</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playing = <span class="hljs-literal">false</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.rotate.style.animationPlayState = <span class="hljs-string">&quot;paused&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">music.pause();</span><br><span class="javascript"></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 暂停中,点击则为播放</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playing = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.rotate.style.animationPlayState = <span class="hljs-string">&quot;running&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">music.play();</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//音量变化</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">volumeChange</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.volumeStatus) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volumeStatus = <span class="hljs-literal">false</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volumeNum = <span class="hljs-built_in">this</span>.volume;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volume = <span class="hljs-number">0</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volumeType = <span class="hljs-string">&quot;md-volume-off&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volumeStatus = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volume = <span class="hljs-built_in">this</span>.volumeNum;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volumeType = <span class="hljs-string">&quot;md-volume-up&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//歌曲播放类型变化</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">playTypeChange</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.playType == <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playType = <span class="hljs-number">2</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.showPlayType = <span class="hljs-string">&quot;随机播放&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playStatus = <span class="hljs-string">&quot;iconfont icon-suijibofang&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.playType == <span class="hljs-number">2</span>) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playType = <span class="hljs-number">3</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.showPlayType = <span class="hljs-string">&quot;单曲循环&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playStatus = <span class="hljs-string">&quot;iconfont icon-danquxunhuan&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.playType == <span class="hljs-number">3</span>) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playType = <span class="hljs-number">1</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.showPlayType = <span class="hljs-string">&quot;列表循环&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playStatus = <span class="hljs-string">&quot;iconfont icon-xunhuanbofang&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">ClickPlay</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.audioInit();</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.getMusicList(<span class="hljs-built_in">this</span>.songInfo.id);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.rotate.style.animationPlayState = <span class="hljs-string">&quot;running&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playing = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript">music.play();</span><br><span class="javascript"></span><br><span class="javascript">&#125;, <span class="hljs-number">100</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">GetSongList</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript">axios.get(<span class="hljs-string">&quot;/musicController/getMusicList&quot;</span>).then(<span class="hljs-built_in">this</span>.GetSongListInfo);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">GetSongListInfo</span>(<span class="hljs-params">res</span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> myList;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (res.code == <span class="hljs-string">&quot;0000&quot;</span>) &#123;</span><br><span class="javascript"></span><br><span class="javascript">myList = res.data;</span><br><span class="javascript"></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;没查到数据&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">myList = [</span><br><span class="javascript"></span><br><span class="javascript">&#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">artistsName</span>: <span class="hljs-string">&quot;房东的猫&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">cover</span>:</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-string">&quot;https://p3.music.126.net/KkrcSwKbRsd8GuaOHILlxA==/109951166077317301.jpg&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">id</span>: <span class="hljs-number">1857630559</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;New Boy&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://music.163.com/song/media/outer/url?id=1857630559.mp3&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-attr">lyric</span>:</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-string">&quot;\n[00:25.075]\n[00:25.189]是的我看见到处是阳光\n[00:29.156]快乐在城市上空飘扬\n[00:32.773]新世界来得像梦一样\n[00:36.689]让我暖洋洋\n[00:40.122]你的老怀表还在转吗\n[00:43.822]你的旧皮鞋还能穿吗\n[00:47.506]这儿有一支未来牌香烟\n[00:51.479]你不想尝尝吗\n[00:54.512]明天一早 我猜阳光会好\n[01:02.679]我要把自己打扫\n[01:05.896]把破旧的全部卖掉\n[01:09.212]哦这样多好 快来吧奔腾电脑\n[01:17.329]就让它们代替我来思考\n[01:27.229]穿新衣吧 剪新发型呀\n[01:31.347]轻松一下Windows98\n[01:35.048]打扮漂亮 18岁是天堂\n[01:39.064]我们的生活甜得像糖\n[01:42.431]穿新衣吧 剪新发型呀\n[01:46.098]轻松一下Windows98\n[01:49.914]以后的路不再会有痛苦\n[01:53.948]我们的未来该有多酷\n[02:12.481]是的我看见到处是阳光\n[02:16.164]快乐在城市上空飘扬\n[02:19.847]新世界来的像梦一样\n[02:23.748]让我暖洋洋\n[02:27.164]你的老怀表还在转吗\n[02:30.815]你的旧皮鞋还能穿吗\n[02:34.614]这儿有一支未来牌香烟\n[02:38.448]你不想尝尝吗\n[02:41.548]明天一早我猜阳光会好\n[02:49.898]我要把自己打扫\n[02:53.564]把破旧的全部卖掉\n[02:56.198]哦这样多好 快来吧奔腾电脑\n[03:04.598]就让它们代替我来思考\n[03:11.081]\n[03:11.414]穿新衣吧剪新发型呀\n[03:14.698]轻松一下Windows98\n[03:18.264]打扮漂亮18岁是天堂\n[03:22.481]我们的生活甜得像糖\n[03:25.964]穿新衣吧剪新发型呀\n[03:29.515]轻松一下Windows98\n[03:33.264]以后的路不再会有痛苦\n[03:37.681]我们的未来该有多酷&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript">];</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.songList = myList;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.songInfo = <span class="hljs-built_in">this</span>.songList[<span class="hljs-number">0</span>];</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.getMusicList(<span class="hljs-built_in">this</span>.songInfo.id); <span class="hljs-comment">//通过正在播放的歌曲id获取歌曲播放的URL歌词信息</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.audioInit();</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">audioInit</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> that = <span class="hljs-built_in">this</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> progressL = <span class="hljs-built_in">this</span>.$refs.track.offsetWidth; <span class="hljs-comment">// 进度条总长</span></span><br><span class="javascript"></span><br><span class="javascript">music.addEventListener(<span class="hljs-string">&quot;timeupdate&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 当前播放时间</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> compareTime = music.currentTime;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; that.lyricInfo.length; i++) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (compareTime &gt; <span class="hljs-built_in">parseInt</span>(that.lyricInfo[i].time)) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> index = that.lyricInfo[i].index;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (i === <span class="hljs-built_in">parseInt</span>(index)) &#123;</span><br><span class="javascript"></span><br><span class="javascript">that.lyricIndex = i;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">that.currentTime = commonJs.TimeToString(music.currentTime);</span><br><span class="javascript"></span><br><span class="javascript">that.audioProgress = music.currentTime / music.duration;</span><br><span class="javascript"></span><br><span class="javascript">that.thumbTranslateX = (that.audioProgress * progressL).toFixed(<span class="hljs-number">3</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript">music.addEventListener(<span class="hljs-string">&quot;ended&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">switch</span> (<span class="hljs-built_in">parseInt</span>(that.playType)) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// 列表循环</span></span><br><span class="javascript"></span><br><span class="javascript">that.playIndex =</span><br><span class="javascript"></span><br><span class="javascript">that.playIndex + <span class="hljs-number">1</span> &gt;= that.songList.length</span><br><span class="javascript"></span><br><span class="javascript">? <span class="hljs-number">0</span></span><br><span class="javascript"></span><br><span class="javascript">: that.playIndex + <span class="hljs-number">1</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// 随机播放</span></span><br><span class="javascript"></span><br><span class="javascript">that.playIndex = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * that.songList.length);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-comment">// 单曲循环</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">that.songInfo = that.songList[that.playIndex];</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.getMusicList(that.songInfo.id);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.rotate.style.animationPlayState = <span class="hljs-string">&quot;running&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">music.play();</span><br><span class="javascript"></span><br><span class="javascript">&#125;, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//播放与暂停</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">playMusic</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.playing) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 播放中,点击则为暂停</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playing = <span class="hljs-literal">false</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.rotate.style.animationPlayState = <span class="hljs-string">&quot;paused&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">music.pause();</span><br><span class="javascript"></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 暂停中,点击则为播放</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playing = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.rotate.style.animationPlayState = <span class="hljs-string">&quot;running&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">music.play();</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">PlayListMusic</span>(<span class="hljs-params">index</span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playIndex = index;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.songInfo = <span class="hljs-built_in">this</span>.songList[<span class="hljs-built_in">this</span>.playIndex];</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.getMusicList(<span class="hljs-built_in">this</span>.songInfo.id);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playing = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.drawer = <span class="hljs-literal">false</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.rotate.style.animationPlayState = <span class="hljs-string">&quot;running&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">music.play();</span><br><span class="javascript"></span><br><span class="javascript">&#125;, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//点击进度条</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handleProgressClick</span>(<span class="hljs-params">event</span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> progressL = <span class="hljs-built_in">this</span>.$refs.track.offsetWidth; <span class="hljs-comment">// 进度条总长</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> clickX = event.offsetX;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> time = (clickX / progressL).toFixed(<span class="hljs-number">2</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.setProgress(time);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">setProgress</span>(<span class="hljs-params">x</span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript">music.currentTime = music.duration * x;</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 上一首</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">skipBack</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.skipFn(<span class="hljs-string">&quot;skipBack&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 下一首</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">skipForward</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.skipFn(<span class="hljs-string">&quot;skipForward&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//上下首封装</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">skipFn</span>(<span class="hljs-params">type</span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">switch</span> (<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">this</span>.playType)) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// 随机播放</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playIndex = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-built_in">this</span>.songList.length);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">default</span>:</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;skipBack&quot;</span>) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playIndex - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> ? <span class="hljs-built_in">this</span>.playIndex-- : <span class="hljs-number">0</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playIndex =</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playIndex + <span class="hljs-number">1</span> &gt;= <span class="hljs-built_in">this</span>.songList.length</span><br><span class="javascript"></span><br><span class="javascript">? <span class="hljs-built_in">this</span>.songList.length - <span class="hljs-number">1</span></span><br><span class="javascript"></span><br><span class="javascript">: <span class="hljs-built_in">this</span>.playIndex + <span class="hljs-number">1</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.songInfo = <span class="hljs-built_in">this</span>.songList[<span class="hljs-built_in">this</span>.playIndex];</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.getMusicList(<span class="hljs-built_in">this</span>.songInfo.id);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.playing = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.rotate.style.animationPlayState = <span class="hljs-string">&quot;running&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">music.play();</span><br><span class="javascript"></span><br><span class="javascript">&#125;, <span class="hljs-number">200</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//调节音量</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">changeVolum</span>(<span class="hljs-params">c</span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript">music.volume = c / <span class="hljs-number">100</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (music.volume == <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volumeType = <span class="hljs-string">&quot;md-volume-off&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.volumeType = <span class="hljs-string">&quot;md-volume-up&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//获取歌曲播放的URL信息</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">getMusicList</span>(<span class="hljs-params">id</span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> that = <span class="hljs-built_in">this</span>;</span><br><span class="javascript"></span><br><span class="javascript">axios.get(<span class="hljs-string">&quot;/musicController/getMusicURLInfo/&quot;</span> + id).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">switch</span> (res.code) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0000&quot;</span>:</span><br><span class="javascript"></span><br><span class="javascript">that.songInfo.url = res.data.url;</span><br><span class="javascript"></span><br><span class="javascript">that.GetLyricList(res.data.lyric);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1111&quot;</span>:</span><br><span class="javascript"></span><br><span class="javascript">showMessage(<span class="hljs-string">&quot;warning&quot;</span>, res.message);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">GetLyricList</span>(<span class="hljs-params">lrc</span>)</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> lyricsObjArr = [];</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> regNewLine = <span class="hljs-regexp">/\n/</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> lineArr = lrc.split(regNewLine); <span class="hljs-comment">// 每行歌词的数组</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> regTime = <span class="hljs-regexp">/\[\d&#123;2&#125;:\d&#123;2&#125;.\d&#123;2,3&#125;\]/</span>;</span><br><span class="javascript"></span><br><span class="javascript">lineArr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (item === <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">return</span>;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> time = item.match(regTime);</span><br><span class="javascript"></span><br><span class="javascript">obj.lyric =</span><br><span class="javascript"></span><br><span class="javascript">item.split(<span class="hljs-string">&quot;]&quot;</span>)[<span class="hljs-number">1</span>].trim() === <span class="hljs-string">&quot;&quot;</span> ? <span class="hljs-string">&quot;&quot;</span> : item.split(<span class="hljs-string">&quot;]&quot;</span>)[<span class="hljs-number">1</span>].trim();</span><br><span class="javascript"></span><br><span class="javascript">obj.time = time</span><br><span class="javascript"></span><br><span class="javascript">? commonJs.TimeToSeconds(time[<span class="hljs-number">0</span>].slice(<span class="hljs-number">1</span>, time[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>))</span><br><span class="javascript"></span><br><span class="javascript">: <span class="hljs-number">0</span>;</span><br><span class="javascript"></span><br><span class="javascript">obj.uid = <span class="hljs-built_in">Math</span>.random().toString().slice(-<span class="hljs-number">6</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (obj.lyric === <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;这一行没有歌词&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript">lyricsObjArr.push(obj);</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">this</span>.lyricInfo = lyricsObjArr.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript">item.index = index;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript"></span><br><span class="javascript">...item,</span><br><span class="javascript"></span><br><span class="javascript">&#125;;</span><br><span class="javascript"></span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript">&#125;;</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.main-page</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0.4</span>);</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.background-flitter</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">z-index</span>: <span class="hljs-number">0</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">background-size</span>: cover;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">8px</span>);</span><br><span class="css"></span><br><span class="css">// <span class="hljs-attribute">margin</span>: -<span class="hljs-number">20px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.7</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.play-mini</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">72px</span>;</span><br><span class="css"></span><br><span class="css">// <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">display</span>: flex;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">align-items</span>: center;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">z-index</span>: <span class="hljs-number">10</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.songInfo</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">min-width</span>: <span class="hljs-number">360px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">max-width</span>: <span class="hljs-number">480px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">18px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">display</span>: flex;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.poster</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">52px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">52px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">4px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.info</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">min-width</span>: <span class="hljs-number">280px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.controls</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">280px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">display</span>: flex;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">align-items</span>: center;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.status</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">36px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">36px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.progress-bar</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">z-index</span>: <span class="hljs-number">10</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">top</span>: -<span class="hljs-number">5px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>);</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.progress-box</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#40ce8f</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.right-botton</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">420px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">display</span>: flex;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">align-items</span>: center;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.text-div</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.playlist</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.song-cover-lyric</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">72px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">display</span>: flex;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.disc-continer</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.poster</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">280px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">280px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.3</span>);</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">140px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.4</span>);</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">animation</span>: animations1 <span class="hljs-number">12s</span> linear infinite forwards;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">animation-play-state</span>: paused;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">160px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.song-name</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">32px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.song-artistsName</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">24px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-keyword">@keyframes</span> animations1 &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">from</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">to</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.lyric</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="css"></span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.ivu-drawer-body</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.list-container</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">overflow</span>: auto;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.songInfo</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">display</span>: flex;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">align-items</span>: center;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">12px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">36px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">36px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">12px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.info</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">36px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.name</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">18px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">text-overflow</span>: ellipsis;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">white-space</span>: nowrap;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.singer</span> &#123;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">18px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">text-overflow</span>: ellipsis;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">white-space</span>: nowrap;</span><br><span class="css"></span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>歌词部分（lyricScroll.vue）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><code class="hljs auto"><br>&lt;template&gt;<br><br>&lt;!--歌词--&gt;<br><br>&lt;div<br><br>ref=&quot;musicLyric&quot;<br><br>class=&quot;music-lyric&quot;<br><br>:style=&quot;&#123; &#x27;padding-top&#x27;: paddingTop &#125;&quot;<br><br>&gt;<br><br>&lt;div class=&quot;music-lyric-items&quot; :style=&quot;lyricTop&quot;&gt;<br><br>&lt;template v-if=&quot;lyricsList.length &gt; 0&quot;&gt;<br><br>&lt;p<br><br>v-for=&quot;(item, index) in lyricsList&quot;<br><br>:key=&quot;index&quot;<br><br>:data-index=&quot;index&quot;<br><br>ref=&quot;lyric&quot;<br><br>:style=&quot;&#123;<br><br>color: lyricIndex === index ? colorLight : color,<br><br>&#x27;font-size&#x27;: fontSize,<br><br>&#125;&quot;<br><br>&gt;<br><br>&#123;&#123; item.lyric &#125;&#125;<br><br>&lt;/p&gt;<br><br>&lt;/template&gt;<br><br>&lt;p style=&quot;color: #fff&quot; v-else&gt;歌词拼命加载中。。。。。&lt;/p&gt;<br><br>&lt;/div&gt;<br><br>&lt;/div&gt;<br><br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br>const COMPONENT_NAME = &quot;scroll&quot;;<br><br>export default &#123;<br><br>name: COMPONENT_NAME,<br><br>props: &#123;<br><br>// 歌词列表<br><br>lyricsList: &#123;<br><br>type: Array,<br><br>default: () =&gt; [],<br><br>&#125;,<br><br>// 当前歌词下标索引<br><br>lyricIndex: &#123;<br><br>type: Number,<br><br>default: 0,<br><br>&#125;,<br><br>// 歌词默认色<br><br>color: &#123;<br><br>type: String,<br><br>default: &quot;#fff&quot;,<br><br>&#125;,<br><br>// 歌词高亮色<br><br>colorLight: &#123;<br><br>type: String,<br><br>default: &quot;#40ce8f&quot;,<br><br>&#125;,<br><br>fontSize: &#123;<br><br>type: String,<br><br>default: &quot;16px&quot;,<br><br>&#125;,<br><br>lineHeight: &#123;<br><br>type: String,<br><br>default: &quot;42&quot;,<br><br>&#125;,<br><br>paddingTop: &#123;<br><br>type: String,<br><br>default: &quot;300px&quot;,<br><br>&#125;,<br><br>&#125;,<br><br>data() &#123;<br><br>return &#123;<br><br>top: 0, // 歌词居中<br><br>//歌词list示例<br><br>lyricListDemo: [<br><br>&#123;<br><br>index: 0,<br><br>lyric: &quot;作曲 : CMJ&quot;,<br><br>time: 0,<br><br>&#125;,<br><br>&#123;<br><br>index: 1,<br><br>lyric: &quot;作词 : 桃玖&quot;,<br><br>time: 0.29,<br><br>&#125;,<br><br>&#123;<br><br>index: 2,<br><br>lyric: &quot;你听啊秋末的落叶&quot;,<br><br>time: 0.89,<br><br>&#125;,<br><br>&#123;<br><br>index: 3,<br><br>lyric: &quot;你听它叹息着离别&quot;,<br><br>time: 5.14,<br><br>&#125;,<br><br>&#123;<br><br>index: 4,<br><br>lyric: &quot;只剩我独自领略&quot;,<br><br>time: 9.39,<br><br>&#125;,<br><br>&#123;<br><br>index: 5,<br><br>lyric: &quot;海与山 风和月&quot;,<br><br>time: 13.14,<br><br>&#125;,<br><br>],<br><br>&#125;;<br><br>&#125;,<br><br>mounted() &#123;&#125;,<br><br>watch: &#123;<br><br>lyricIndex(newVal, oldVal) &#123;&#125;,<br><br>&#125;,<br><br>computed: &#123;<br><br>lyricTop() &#123;<br><br>return `transform :translate3d(0, $&#123;(0 - this.lineHeight) *<br><br>(this.lyricIndex - this.top)&#125;px, 0);color: $&#123;this.color&#125;;line-height: $&#123;<br><br>this.lineHeight<br><br>&#125;px`;<br><br>&#125;,<br><br>&#125;,<br><br>methods: &#123;&#125;,<br><br>&#125;;<br><br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br><br>/*歌词部分*/<br><br>.music-lyric &#123;<br><br>padding-top: 300px;<br><br>box-sizing: border-box;<br><br>overflow: hidden;<br><br>text-align: center;<br><br>mask-image: linear-gradient(<br><br>to bottom,<br><br>rgba(255, 255, 255, 0) 0,<br><br>rgba(255, 255, 255, 0.6) 5%,<br><br>rgba(255, 255, 255, 1) 15%,<br><br>rgba(255, 255, 255, 1) 85%,<br><br>rgba(255, 255, 255, 0.6) 95%,<br><br>rgba(255, 255, 255, 0) 100%<br><br>);<br><br>.music-lyric-items &#123;<br><br>text-align: center;<br><br>font-size: 16px;<br><br>color: #fff;<br><br>transform: translate3d(0, 0, 0);<br><br>transition: transform 0.6s ease-out;<br><br>text-overflow: ellipsis;<br><br>overflow: hidden;<br><br>white-space: nowrap;<br><br>.on &#123;<br><br>color: #40ce8f;<br><br>&#125;<br><br>&#125;<br><br>&#125;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>时间转换的JS（timeConversion.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@author <span class="hljs-variable">lyq</span></span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@time </span>2021年11月21日21:08:48</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* 秒值转时分秒</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@name <span class="hljs-variable">TimeToString</span></span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@example </span>秒值转时分秒</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>seconds 秒</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> TimeToString = <span class="hljs-function">(<span class="hljs-params">seconds</span>) =&gt;</span> &#123;<br><br><span class="hljs-keyword">let</span> param = <span class="hljs-built_in">parseInt</span>(seconds);<br><br><span class="hljs-keyword">let</span> hh = <span class="hljs-string">&quot;&quot;</span>,<br><br>mm = <span class="hljs-string">&quot;&quot;</span>,<br><br>ss = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">if</span> (param &gt;= <span class="hljs-number">0</span> &amp;&amp; param &lt; <span class="hljs-number">60</span>) &#123;<br><br>param &lt; <span class="hljs-number">10</span> ? (ss = <span class="hljs-string">&quot;0&quot;</span> + param) : (ss = param);<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;00:&quot;</span> + ss;<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (param &gt;= <span class="hljs-number">60</span> &amp;&amp; param &lt; <span class="hljs-number">3600</span>) &#123;<br><br>mm = <span class="hljs-built_in">parseInt</span>(param / <span class="hljs-number">60</span>);<br><br>mm &lt; <span class="hljs-number">10</span> ? (mm = <span class="hljs-string">&quot;0&quot;</span> + mm) : mm;<br><br>param - <span class="hljs-built_in">parseInt</span>(mm * <span class="hljs-number">60</span>) &lt; <span class="hljs-number">10</span> ?<br><br>(ss = <span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-built_in">String</span>(param - <span class="hljs-built_in">parseInt</span>(mm * <span class="hljs-number">60</span>))) :<br><br>(ss = param - <span class="hljs-built_in">parseInt</span>(mm * <span class="hljs-number">60</span>));<br><br><span class="hljs-keyword">return</span> mm + <span class="hljs-string">&quot;:&quot;</span> + ss;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>基本前端代码都在这儿了，下面为后端的接口逻辑层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> : [LiuYanQiang]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@version</span> : [v1.0]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@className</span> : MusicServiceImpl</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@description</span> : [描述说明该类的功能]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@createTime</span> : [2021/11/16 14:28]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@updateUser</span> : [LiuYanQiang]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@updateTime</span> : [2021/11/16 14:28]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@updateRemark</span> : [描述说明本次修改内容]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@Service</span><br><br><span class="hljs-meta">@Slf4j</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MusicServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MusicService</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><br><span class="hljs-keyword">private</span> Environment environment;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @version V1.0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* Title: getMusicList</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @author LiuYanQiang</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @description 获取热歌榜随机二十首音乐信息</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @createTime  2021/11/16 14:32</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @param []</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @return java.util.Map*/</span><br><br><span class="hljs-meta">@Override</span><br><br><span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getMusicList() &#123;<br><br>JSONArray resultObject = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">//拼接URL发送对应的请求</span><br><br>StringBuffer url = <span class="hljs-keyword">new</span> StringBuffer();<br><br>url.append(<span class="hljs-string">&quot;https://api.vvhan.com/api/rand.music?type=all&amp;sort=热歌榜&quot;</span>);<br><br><span class="hljs-comment">//获取接口的返回值</span><br><br>String body = HttpUtils.sendGet(url.toString());<br><br>resultObject = JSONObject.parseArray(body);<br><br>List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; resultObject.size(); i++) &#123;<br><br>HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br><br>JSONObject jsonObject = resultObject.getJSONObject(i);<br><br>map.put(<span class="hljs-string">&quot;cover&quot;</span>, JSONObject.parseObject(jsonObject.get(<span class="hljs-string">&quot;album&quot;</span>).toString()).getString(<span class="hljs-string">&quot;picUrl&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;artistsName&quot;</span>, JSONObject.parseArray(jsonObject.get(<span class="hljs-string">&quot;artists&quot;</span>).toString()).getJSONObject(<span class="hljs-number">0</span>).getString(<span class="hljs-string">&quot;name&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;name&quot;</span>, jsonObject.getString(<span class="hljs-string">&quot;name&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;id&quot;</span>, jsonObject.getString(<span class="hljs-string">&quot;id&quot;</span>));<br><br>list.add(map);<br><br>&#125;<br><br>Random random = <span class="hljs-keyword">new</span> Random();<br><br><span class="hljs-keyword">int</span> num = random.nextInt(<span class="hljs-number">179</span>) % (<span class="hljs-number">179</span> - <span class="hljs-number">0</span> + <span class="hljs-number">1</span>) + <span class="hljs-number">0</span>;<br><br>list = list.subList(num, num + <span class="hljs-number">20</span>);<br><br><span class="hljs-keyword">return</span> list;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @version V1.0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* Title: getMusicURLInfo</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @author LiuYanQiang</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @description 获取音乐播放的URL信息</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @createTime  2021/11/19 9:22</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @param [Id——音乐Id]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @return java.util.List&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;*/</span><br><br><span class="hljs-meta">@Override</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getMusicURLInfo</span><span class="hljs-params">(String Id)</span> </span>&#123;<br><br>JSONObject resultObject = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">//拼接URL发送对应的请求</span><br><br>StringBuffer url = <span class="hljs-keyword">new</span> StringBuffer();<br><br>url.append(<span class="hljs-string">&quot;https://api.vvhan.com/api/music?id=&quot;</span> + Id + <span class="hljs-string">&quot;&amp;type=song&amp;media=netease&quot;</span>);<br><br><span class="hljs-comment">//获取接口的返回值</span><br><br>String body = HttpUtils.sendGet(url.toString());<br><br>resultObject = JSONObject.parseObject(body);<br><br>HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br><br><span class="hljs-comment">//判断第三方给的音乐URL是否有效，无效则替换官方的URL</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.isValid(resultObject.get(<span class="hljs-string">&quot;mp3url&quot;</span>).toString()))&#123;<br><br>map.put(<span class="hljs-string">&quot;id&quot;</span>, resultObject.get(<span class="hljs-string">&quot;song_id&quot;</span>).toString());<br><br>map.put(<span class="hljs-string">&quot;name&quot;</span>, resultObject.get(<span class="hljs-string">&quot;name&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;artistsName&quot;</span>, resultObject.get(<span class="hljs-string">&quot;author&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;cover&quot;</span>, resultObject.get(<span class="hljs-string">&quot;cover&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;url&quot;</span>, resultObject.get(<span class="hljs-string">&quot;mp3url&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;lyric&quot;</span>, <span class="hljs-keyword">this</span>.getMusicLyricById(Id) != <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">this</span>.getMusicLyricById(Id) : <span class="hljs-keyword">null</span>);<br><br>&#125;<br><br><span class="hljs-keyword">else</span>&#123;<br><br>map.put(<span class="hljs-string">&quot;id&quot;</span>, Id);<br><br>map.put(<span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;https://music.163.com/song/media/outer/url?id=&quot;</span>+Id+<span class="hljs-string">&quot;.mp3&quot;</span>);<br><br>map.put(<span class="hljs-string">&quot;lyric&quot;</span>, <span class="hljs-keyword">this</span>.getMusicLyricById(Id) != <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">this</span>.getMusicLyricById(Id) : <span class="hljs-keyword">null</span>);<br><br>&#125;<br><br><span class="hljs-keyword">return</span> map;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @version V1.0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* Title: isValid</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @author LiuYanQiang</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @description 判断链接是否有效</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @createTime  2021/11/20 10:23</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @param [strLink——输入链接]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @return boolean</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String strLink)</span> </span>&#123;<br><br>URL url;<br><br><span class="hljs-keyword">try</span> &#123;<br><br>url = <span class="hljs-keyword">new</span> URL(strLink);<br><br>HttpURLConnection connt = (HttpURLConnection) url.openConnection();<br><br>connt.setRequestMethod(<span class="hljs-string">&quot;HEAD&quot;</span>);<br><br>String strMessage = connt.getResponseMessage();<br><br><span class="hljs-keyword">if</span> (strMessage.compareTo(<span class="hljs-string">&quot;Not Found&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>&#125;<br><br>connt.disconnect();<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @version V1.0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* Title: getRandomFiveMusic</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @author LiuYanQiang</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @description 随机5首音乐，不能频繁调用，不然网易云接口回调异常</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @createTime  2021/11/19 9:08</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @param []</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @return java.util.List&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;*/</span><br><br><span class="hljs-meta">@Override</span><br><br><span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getRandomFiveMusic() &#123;<br><br>List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br>JSONObject resultObject = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">//拼接URL发送对应的请求</span><br><br>StringBuffer url = <span class="hljs-keyword">new</span> StringBuffer();<br><br>url.append(<span class="hljs-string">&quot;https://api.vvhan.com/api/rand.music?type=json&amp;sort=热歌榜&quot;</span>);<br><br><span class="hljs-comment">//获取接口的返回值</span><br><br>String body = HttpUtils.sendGet(url.toString());<br><br>resultObject = JSONObject.parseObject(body);<br><br>JSONObject info = JSONObject.parseObject(resultObject.get(<span class="hljs-string">&quot;info&quot;</span>).toString());<br><br>HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br><br>map.put(<span class="hljs-string">&quot;id&quot;</span>, info.get(<span class="hljs-string">&quot;id&quot;</span>).toString());<br><br>map.put(<span class="hljs-string">&quot;name&quot;</span>, info.get(<span class="hljs-string">&quot;name&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;artistsName&quot;</span>, info.get(<span class="hljs-string">&quot;auther&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;cover&quot;</span>, info.get(<span class="hljs-string">&quot;picUrl&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;url&quot;</span>, info.get(<span class="hljs-string">&quot;mp3url&quot;</span>));<br><br>map.put(<span class="hljs-string">&quot;lyric&quot;</span>, <span class="hljs-keyword">this</span>.getMusicLyricById(info.get(<span class="hljs-string">&quot;id&quot;</span>).toString()) != <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">this</span>.getMusicLyricById(info.get(<span class="hljs-string">&quot;id&quot;</span>).toString()) : <span class="hljs-keyword">null</span>);<br><br>list.add(map);<br><br>log.info(<span class="hljs-string">&quot;调用成功&quot;</span> + i + <span class="hljs-string">&quot;次&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">return</span> list;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @version V1.0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* Title: getMusicLyricById</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @author LiuYanQiang</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @description 获取歌词信息</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @createTime  2021/11/16 19:23</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @param [Id——音乐Id]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* @return java.lang.String*/</span><br><br><span class="hljs-meta">@Override</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMusicLyricById</span><span class="hljs-params">(String Id)</span> </span>&#123;<br><br><span class="hljs-keyword">try</span> &#123;<br><br>JSONObject resultObject = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">//拼接URL发送对应的请求</span><br><br>StringBuffer url = <span class="hljs-keyword">new</span> StringBuffer();<br><br>url.append(<span class="hljs-string">&quot;https://music.163.com/api/song/media?id=&quot;</span> + Id);<br><br><span class="hljs-comment">//获取接口的返回值</span><br><br>String body = HttpUtils.sendGet(url.toString());<br><br>resultObject = JSONObject.parseObject(body);<br><br><span class="hljs-keyword">if</span> (resultObject.get(<span class="hljs-string">&quot;lyric&quot;</span>).toString() != <span class="hljs-keyword">null</span>) &#123;<br><br><span class="hljs-keyword">return</span> resultObject.get(<span class="hljs-string">&quot;lyric&quot;</span>).toString();<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>&#125;<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>e.printStackTrace();<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冯骥才:夕照透入书房</title>
    <link href="/2021/11/26/%E5%86%AF%E9%AA%A5%E6%89%8D:%E5%A4%95%E7%85%A7%E9%80%8F%E5%85%A5%E4%B9%A6%E6%88%BF/"/>
    <url>/2021/11/26/%E5%86%AF%E9%AA%A5%E6%89%8D:%E5%A4%95%E7%85%A7%E9%80%8F%E5%85%A5%E4%B9%A6%E6%88%BF/</url>
    
    <content type="html"><![CDATA[<p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2021-11-28/weread_image_612245648099285.jpeg" alt="2021 11 26"><br>我常常在黄昏时分，坐在书房里，享受夕照穿窗而入带来的那一种异样的神奇。</p><p>此刻，书房已经暗下来。到处堆放的书籍文稿以及艺术品重重叠叠地隐没在阴影里。</p><p>暮时的阳光，已经失去了白日里的咄咄逼人；它变得很温和，很红，好像一种橘色的灯光，不管什么东西给它一照，全都分外的美丽。首先是窗台上那盆已经衰败的藤草，此刻像镀了金一样，蓬勃发光；跟着是书桌上的玻璃灯罩，亮闪闪的，仿佛打开了灯；然后，这一大片橙色的夕照带着窗棂和外边的树影，斑斑驳驳投射在东墙那边一排大书架上。阴影的地方书皆晦暗，光照的地方连书脊上的文字也看得异常分明。《傅雷文集》的书名是烫金的，金灿灿放着光芒，好像在骄傲地说：“我可以永存。”</p><p>怎样的事物才能真正地永存？阿房宫和华清池都已片瓦不留，李杜的名句和老庄的格言却一字不误地镌刻在每个华人的心里。世上延绵最久的还是非物质的——思想与精神。能够准确地记忆思想的只有文字。所以说，文字是我们的生命。</p><p>当夕阳移到我的桌面上，每件案头物品都变得妙不可言。一尊苏格拉底的小雕像隐在暗中，一束细细的光芒从一丛笔杆的缝隙中穿过，停在他的嘴唇之间，似乎想撬开他的嘴巴，听一听这位古希腊的哲人对如今这个混沌而荒谬的商品世界的醒世之言。但他口含夕阳，紧闭着嘴巴，一声不吭。</p><p>昨天的哲人只能解释昨天，今天的答案还得来自今人。这样说来，一声不吭的原来是我们自己。</p><p>陈放在桌上的一块四方的镇尺最是离奇。这个镇尺是朋友赠送给我的。它是一块纯净的无色玻璃，一条弯着尾巴的小银鱼被铸在玻璃中央。当阳光彻入，玻璃非但没有反光，反而由于纯度过高而消失了，只有那银光闪闪的小鱼悬在空中，无所依傍。它瞪圆眼睛，似乎也感到了一种匪夷所思。</p><p>一只蚂蚁从阴影里爬出来，它走到桌面一块阳光前，迟疑不前，几次刚把脑袋伸进夕阳里，又赶紧缩回来。它究竟畏惧这奇异的光明，还是习惯了黑暗？黑暗总是给人一半恐惧，一半安全。人在黑暗外边感到恐惧，在黑暗里边反倒觉得安全。</p><p>夕阳的生命是有限的。它在天边一点点沉落下去，它的光却在我的书房里渐渐升高。短暂的夕照大概知道自己大限在即，它最后抛给人间的光芒最依恋也最夺目。此时，连我的书房的空气也是金红的。定睛细看，空气里浮动的尘埃竟然被它照亮。这些小得肉眼刚刚能看见的颗粒竟被夕阳照得极亮极美，它们在半空中自由、无声和缓缓地游弋着，好像徜徉在宇宙里的星辰。这是唯夕阳才能创造的景象——它能使最平凡的事物变得无比神奇。</p><p>在日落前的一瞬，夕阳残照已经挪到我书架最上边的一格。满室皆暗，只有书架上边无限明媚。那里摆着一只河北省白沟的泥公鸡。雪白的身子，彩色翅膀，特大的黑眼睛，威武又神气。这个北方著名的泥玩具之乡，至少有千年的历史，但如今这里已经变为日用小商品的集散地，昔日那些浑朴又迷人的泥狗泥鸡泥人全都了无踪影。可是此刻，这个幸存下来的泥公鸡，不知何故，对着行将熄灭的夕阳张嘴大叫。我的心已经听到它凄厉的哀鸣。这叫声似乎也感动了夕阳。一瞬间，高高站在书架上端的泥公鸡竟被这最后的阳光照耀得夺目和通红，好似燃烧了起来。</p>]]></content>
    
    
    <categories>
      
      <category>每日一文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>驻马店伤心的故事：没娘孩子流浪记</title>
    <link href="/2021/11/19/%E9%A9%BB%E9%A9%AC%E5%BA%97%E4%BC%A4%E5%BF%83%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%9A%E6%B2%A1%E5%A8%98%E5%AD%A9%E5%AD%90%E6%B5%81%E6%B5%AA%E8%AE%B0/"/>
    <url>/2021/11/19/%E9%A9%BB%E9%A9%AC%E5%BA%97%E4%BC%A4%E5%BF%83%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%9A%E6%B2%A1%E5%A8%98%E5%AD%A9%E5%AD%90%E6%B5%81%E6%B5%AA%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们总是在很多场合被要求做自我介绍，可是好像不管做多少次，我们还是会害怕这件事，常常被这样短短几分钟几句话的事搞得不知所措。<br>或许是因为我们的身份、标签、经历总是在更新，或许是因为要认识自己远比我们想象中复杂。<br>但慢慢地，好像总有一些标签会沉淀下来，成为人生的注脚。比如今天的讲述人郑在欢。他拥有很多身份：作家，90 后，出生在河南驻马店乡村的留守儿童……但给他留下最深烙印的标签，是没娘的孩子。<br>把他养大的奶奶介绍他的第一句话总是「这是个没娘的孩子，这孩子命苦。」<br>他在这个身份的笼罩下长大，经历了常人难以想象的残酷青春。直到 23 岁，他用小说的形式写起自己、介绍自己时，写下的标题也是「没娘的孩子」。<br>四年前 故事FM 就找过郑在欢，大概因为他那本书写得太过真实了，所以他不愿再公开讲述自己的真实故事。四年后，他又出了新书——《今夜通宵杀敌》和《团圆总在离散前》。他觉得，是时候了。<br>一个没娘的孩子，到底是如何长大，如何成为作家的呢？</p></blockquote><p><strong>-1-</strong></p><p><strong>暴力初印象</strong></p><p>我母亲去世的时候，我才 7 个月大，我奶奶就把我给带大，等于说我从小认识的第一个人是我奶奶。</p><p>11 岁之前，我爸基本上没给过钱。我印象最深的是 9 岁还是 10 岁的时候交学费，一直交不起。我爸不给钱，我爷爷和奶奶没钱。我交不了学费，就不去学校，在家生气，在家哭。</p><p>但是我小时候上第一年的学费是我爸给的，因为我上学已经够晚了，虚岁 9 岁，周岁 8 岁。那时候比我小的都上学了，我老问我奶奶啥时候上学，我奶奶就问我爸说你还让不让孩子上学，然后我爸就给拿了学费。</p><p>第二学期再交学费，他就不给了。其实就是不操心这孩子，觉得这孩子我奶奶带着，他能不管就不管。</p><p>但是我不讨厌他。我看到的他是一个好人，一个和颜悦色的人，而且他这个人又有魅力，他讲那些书里的故事讲得都特别好。我是崇拜他的。我只是委屈而已，我委屈的是他没有多关心我。</p><p>那时候我父亲一直在广州讨生活，我母亲没死两年，他就娶了我继母。我继母肯定是不愿意管我的，所以他们两个就在广州。他们回来有时候见了我给我几块钱或者给我一块糖，平常也不会联系我，他们回来也不会接我回家跟他们住。</p><p>基本上我 11 岁回家之前，我对他们的印象就没有几段记忆。</p><p>我继母从她嫁过来，她就经常摔东西、打架，知道情况的人都知道她脾气又暴躁又打小孩。我奶奶也老告诉我，我后妈这个人不太好，提前给我打预防针，提前说以后你回家了一定要听话，一定不能跟她拧。</p><p>很小的时候，我大概有个七八岁，我弟四五岁，她从外边回来，抱着我弟，在我奶奶家门口玩。小孩可能就在她怀里闹或者怎么着，她就把孩子给扔墙上了，然后孩子从墙上掉下来，这脸就蹭掉一块皮。我当时看就觉得有点恐怖。</p><p>还有一次我是见她把他扔到粪池里了，扔进去又捞上来。</p><p>但是我想那是他咎由自取，可能是我弟不太听话。我说我那么听话，我是一个很好的孩子，我肯定不会被这么对待吧。</p><p><strong>-2-</strong></p><p><strong>蚂蚁都比我快乐</strong></p><p>我是回到家之后跟我弟一起生活了，我才能感受到差距。我们俩一起上学之后，我弟每天零花钱是一块钱或者两块钱，我从来都没有过。我发现我跟我弟完全不一样，他是特权阶层，我像个帮佣。</p><p>我 11 岁为什么回去呢？因为我继母生了我妹妹，她想让我回去带我这妹妹。她觉得我 11 岁能干活了，她又不想干。</p><p>所以她对我的要求就是干活。那我就是把活给干好呗。各种活我都能很快地学会，比如说洗衣服、刷鞋、扫地、烧火做饭，包括庄稼地里的活，带孩子。 </p><p>14 岁的秋天，正是收玉米的时候，因为我每天放学回家要在田里拔草，那天我拔到晚上 7 点多天擦黑了，回家路上没有一个人，不知道为啥，我心情特别开心，走在路上还在唱：</p><p>「蓝天大道白云在飞，共和国女兵军中姐妹……」</p><p>我唱了一路，特别开心，还迈着正步往家走。刚回家我就发现她很不对付地站在门口看着我，一回去就让我跪那了，就开始打我。打完我才说，我为什么尿到喂鸡的碗里。因为我弟去我屋的时候不小心踩翻那个碗，她一闻是有尿味的。</p><p>她就因为这个事把我打得不行。她说你是不是故意气我，是不是觉得我让你干活，你心里不忿。</p><p>那天就是用竹竿打，而且是在院子里打。在院子打活动范围大，但是会更残酷，竹竿最后都打没了。我的邻居在我们隔壁求情，说不至于不至于。我的感觉是更丢脸了。</p><p>第二天去上学，在楼道的时候同学突然来搂我，我一下弹开了，因为身上太疼了。他们就说你咋了。我说没事。然后我就一个人走到没人的角落去了。</p><p>我站在一个花池上，看花池上的蚂蚁，我吐了一口痰把蚂蚁给淹死了。突然难受得不行，觉得蚂蚁都他妈的比我快乐多了。</p><p>放学的时候我没回家，背着书包走到没人的地方待着。</p><p>到晚上我找我奶奶。我奶奶见我永远都是一个步骤，先给我摊煎饼，打两个荷包蛋，让我吃。我基本上都是哭着吃的。吃完之后我奶奶就说还是回家吧，你再忍几年，等你长大就行了。但是我再也听不进她这一套。我说我打死都不回去。</p><p>我就在我奶奶家待了两三天。正好因为要收庄稼了，我爸就回来了，我爸就拽着我回家。因为那一次真的是下狠心了，我就拽一切我可拽的东西，抱着一个小树，不愿意回去。</p><p>我肯定拧不过他，就被他拽回家了。</p><p>我爸给我一包牛奶，说上学去吧，在路上喝。我就去上学。但是我走在路上短暂地想了一下，把牛奶扔了，又跑到树林里去了，就在树林里过了两天。等有小孩来烤红薯，我就跟他们烤好红薯，吃点红薯。没小孩的时候，我就自己坐河边生火，坐林子里待着。</p><p>待了两天，我想再挖俩红薯，备着晚上饿了吃。去挖的时候，我发现了一包，我们那叫砂子药，就是紫色的颗粒状的味很冲的驱虫用的药。</p><p>我看到那个，灵机一动决定自杀。</p><p>到晚上天都黑了的时候，我就拿着这个药回我们家，准备喝药死在我们家门口，就是感觉要报复他们一样。当然我把砂子药冲开的时候，我手是抖的。</p><p>走到门口，我坐在门口靠着门要喝的时候，那时候应该 8 点多了，我听到他们在屋里，我的弟弟妹妹、继母他们笑成一团，可能我爸说了什么逗事。那时候我说，我要是死了，我也是个傻逼，肯定不能死。因为他们根本不在乎我。我把碗摔在墙上就跑了。</p><p><strong>-3-</strong></p><p><strong>野生蛤蟆</strong></p><p>后来，我跑到我姥爷家，他要把我送回去，我就又跑了。</p><p>没想到的是我走了一天，七绕八绕，又绕回去了，又走到我姥爷家。我就想那算了，还是这地儿熟点儿，我就在这地儿待。</p><p>我每天在我姥爷村子后边那口池塘那坐着，饿了就跑到我姥爷的镇上，一块钱买俩饼，再走回来池塘这儿吃。</p><p>有一次中午我去买的时候，我就发现我舅了。我看到他特亲切，到晚上我就下意识地往我三舅家的方向走，然后就在隔着三舅家一条水沟的一个麦垛那里睡。那时候已经是秋天了，晚上有点冷，我就把麦垛挖一坑，自己睡里边，再把麦秸盖到身上。</p><p>我记得晚上的时候，月亮特别大，特别亮，有个蛤蟆在那蹦，我觉得我跟这蛤蟆差不多。蛤蟆是野生的，我也可以是野生的。</p><p>我在麦垛里睡了两个晚上，我舅发现我了，然后他把我送到我姥爷那了。</p><p>后来我姥爷就下定决心了，说你就在我这待着，我去跟你爸说。我爸也没有过多地反抗，就同意了。</p><p>秋天正好入学，我到姥爷家上了五年级的上半学期。到寒假，我姥爷那边就让我回来了。我奶奶他们猜测可能是我的舅妈或者说是我舅舅他们对他管我有意见了。因为我姥姥本来就要照顾好几个孩子。</p><p>我姥爷就说欢欢，我现在管不了你了，你回去吧。我当场就不行了，直接就跑出去了。他说你干嘛？我说我撒尿，然后我跑到厕所就哭得不行了，哭够了，他给我送到公交车上，我回家。</p><p>当时是我继母在家，我看到她，我就跪下了。她拿着棍子打了我一下，她说现在知道谁才能真的管你了吧。那时候我想，我再也不跑了。</p><p><strong>-4-</strong>  </p><p><strong><strong>我觉得她不配活着</strong></strong></p><p>我 11 岁回家那年，刚回家，我继母就把襁褓中的妹妹交给我，让我抱着。我把妹妹从一岁带到三岁。那时候就是走哪带到哪，相当于我是她的保姆。</p><p>我刚把她带大呢，第三个弟弟，大排行的话，从我开始排，到我弟到我妹，再到那个，他排行老四，第 4 个弟弟出生了，我又开始带那弟弟。</p><p>那弟弟跟我很亲，因为他还很小嘛，他又可爱，特别可爱。他又叫双喜，我们都叫他喜子，我叫欢子，感觉我俩是一对。感情挺深的，我很喜欢他。</p><p>结果那一年，我上中学 16 岁的时候，他掉水里淹死了。因为他跟我继母在一起的时候，他捡到一个癞蛤蟆，我继母就说你给它扔了，给它扔水里，给它扔水里。他那时候大概 3 岁，他拿着那个蛤蟆扔到水里，结果自己也掉进去。</p><p>因为这个，我们当时都特别恨她，特别恨我继母。但是我爸回来也没有太发火，反而是她要死要活的。但是就因为这个，我心里其实觉得她不配活着。</p><p>大概过了一个多月吧，她其实已经恢复正常了，她也不太伤心。她让我中午回家吃饭，说你不要在学校吃了，要花钱。</p><p>我中午回家吃饭，她没有做，碗还在盆里。我就很生气地洗碗，因为中午回来吃饭时间本来就不够。洗碗的时候我可能就重了一点，把那个碗摔的，也不是摔，可能就落在盆里，它发出响声来了。她过来就打了我一巴掌。她说你生什么气啊，你较什么劲啊？</p><p>那个时候我就突然掩饰不住地愤怒，跟她大吵大骂，骂得歇斯底里，从屋里骂到外边。所有邻居都来看。我爸要出来控制我，但是我就不让他控制。我边骂边跑边骂边跑。最后，我爸追我嘛，我就跑了。</p><p>跑了之后，我就住在我同学家，住了大概一个礼拜。我爸和我继母又要去广州了，他们就让人带话给我，说你要再不回来的话，我们就把你的桌子搬回来，不让你上学了。但是过两天他们就走了。</p><p>他们走了之后，因为那时候也不用交学费了，我又上了一学期。到过年的时候，需要交 60 块钱不知道什么费用，打电话，他不给。</p><p>这时候辍学的人已经成风了。从最早我刚入学的时候，一年级10个班，到我们过年的时候辍学，最后一年级也就剩三四个班了，辍了一半还多。大家都走了，就是都到十五六，都可以走了。</p><p>因为我个子太矮，去不了广州、东莞那种大厂，我就只能选择跟我堂姐去河北这个地方。</p><p><strong>-5-</strong>  </p><p><strong>逃离狼窝，又进火坑</strong></p><p>他们是做箱包，雇的大多数都是童工，或者说是有残疾的。我们那有哑巴，有瘸子，有瞎了一只眼的，要么就是年纪特别小的。能在那干的人也是只能在那干的人。</p><p>我当时形容自己是逃离了狼窝，又掉进了火坑。就是逃离了一个糟的地方，落到了一个更糟的地方。因为我在家再干活也没有一天干十个小时，但是我在这干活是不间断，一天至少十几个小时。</p><p>但是当时基本上大环境都是这样，那个镇应该没有低于 12 个小时的工作时间。那个是整个生态决定的。</p><p>最严重的一次是我们连续加了一个礼拜的班。你的感官都失灵了，你的精神都紊乱了。加到第几天的时候，加到凌晨四五点、三四点的时候，老板的亲妹妹在踩缝纫机，就哭出来了。大家困得纷纷点头。</p><p>老板来到我做质检的屋子，那时候我也在睡。老板拍拍我。我当时就要骂人，那是生理反应，就是看到他的那种面目可憎，或者说自己的委屈到达顶点了。但是看到他的脸你也骂不出来，当时我也是接受这种生活。我突然说了一句：我想回家。老板就说你去睡吧。</p><p>我当时怎么会说我想回家呢？我根本不可能回家。相比回家我肯定是更愿意待在这儿，但是那一刻你又不能表达愤怒，又不能表达委屈，你最后的后盾，最后的一句话居然是我想回家。</p><p><strong>-6-</strong></p><p><strong>和少年说再见</strong></p><p>06、07 ，两年在河北。每天早上我们是 6 点、6:30 起床，7 点上班，晚上是 11:30 下班，洗漱一下就 12 点了。12 点大家基本上都在看武侠小说或者听录音机。</p><p>前半年我肯定是在看书和听广播的。后来我决定写东西，放弃了听广播和看书。</p><p>我买了 10 本算术本，很便宜，一两毛钱一本那种，纸特薄。一晚上大概能写三四页吧，用那个本子。10 多本都写完了。</p><p>主要是你必须得有除了干活之外的生活，不然的话你就跟机器一样了。你不能干活、睡觉、吃饭，没有别的事。不管是看书也好，还是听广播也好，还是写作也好，都是你除干活之外的一个生活。</p><p>我 11:30 或者 12 点躺在床上写到 1 点多 2 点，写一个多小时或者一个小时，也是写东西能让我得到这种生活的质感的享受的东西。</p><p>还有就是表达的快乐，就是我遭遇过这些、我经历过这些，我想让大家知道。我想鸣不平，我想展示，我想揭露，我想让大家知道这种苦难。</p><p>还有一种待实现的抱负在后面追着你的这种紧迫和畅快，你会想，这个写完得多震惊啊，就是世界得为之震动。</p><p>09 年我刚来到北京的时候，看到有一个网站的征文比赛，这个征文比赛的首奖是 30 万，一看我就心动了。我觉得我有能力搞这 30 万，我相信我写的东西好。而且你获奖还能出书，等于说这是我的一个机会，我必须得抓住它。</p><p>大概是写了三个月之后，我获了三等奖，奖金 8000 。我买了一台电脑，辞职在家写作，觉得自己要当作家横空出世了。</p><p>当时我从 10 年写到 13 年，我写了三年，也没发过什么东西，也没交过什么朋友，也不怎么出门，每天就是和我当时的女朋友在一起，只有她觉得我写得好。我就开始怀疑这事的意义了。</p><p>这时候我写了一篇《驻马店伤心故事集》里的一篇叫《红星》，当时投了一个发非虚构的新媒体，他们给我发了 500 还是几百的稿费。</p><p>我说那我这种故事可太多了，要不然多写点，一篇挣个 500，挣个 800，也挺好的，就没怎么间断把第一部分《病人列传》给写完了。下半年的时候，我又写了一下我奶奶，然后就把我的家人也都顺着写了一遍。</p><p>我写的时候是非常开心的，又回到了 16 岁写作时的那种感觉。我让自己忘掉那三年拼命看书看来的小说知识，我说去他妈的文学，我就写我的回忆就完了。</p><p>真正让我不敢写，或者说顾虑的确实就是写我自己。但是我真的进入这一篇，把标题打下来：《没娘的孩子》，大概写完第一段之后，我就完全回到了小时候：</p><blockquote><p>「这是个没娘的孩子。」</p><p>小时候，我奶奶总这样介绍我，人们配合地投来同情的目光，让我觉得这是一件不太光彩的事。</p></blockquote><p>那一篇大概 2 万多字，两万五六千字。我一天就写完了。写完之后，已经累得走不动道了。</p><p>但这个东西比较美妙的是，那个故事都是现成的，你只是把它说出来而已。所以你说得不亦乐乎，你的手指都不用停下来。然后写完之后，其实是一种长长地出了一口十几年的气的那种感觉。</p><p>写完之后，没想到在这里面集中地解决了我小时候的困惑，我成长的困惑，我小时候对人和事的困惑。我用这一组几篇东西跟以前的少年说再见，说了再见我才能往前走，不然的话我一直是负重前行，太难受了。</p><p>说完再见之后，可以明确地说，从 23 岁之后我再也不恨我继母了，再也不恨我爸了，而且我再也不恨任何人了。</p><p>就是我理解了他们，我理解了这些伤害为什么会降临到我的头上，然后我发现他们比我更可怜。我发现我能读书，我能意识到这种烂泥般的生活。我能脱离，我能抖落一身的泥，可能是从衣服上抖落，也可能是从翅膀上抖落，我能飞起来。他们不行，他们还在烂泥里边。</p><p>你比他们强，你为什么还要恨那么弱小的人呢？</p><p><strong>-7-</strong></p><p><strong>平行的河流</strong></p><p>那天回去，我兄弟的媳妇跟我讲，他说咱爸看到你的书哭得不行，我说「啊。」</p><p>从我十六岁出来到我二十一二吧，大概有几年没有跟他说过话，我是故意地不跟他说话。从我 16 岁出来，我决定要跟他断绝关系，他每次在路上看到我，都叫我，我都是扭头就走，不理他的。</p><p>但是有时候呢，他又会给我打电话。后来有一次我就接了，就像跟一个邻居说话一样，他说你要照顾好自己，我说你也是，他说你要好好的，我说行。就这么多，包括现在我们还是这样的情况。</p><p>我要坚决地表态：他小时候没有管过我，他老了我也不管。我要让你们知道血缘绑架不了人。</p><p>当然我现在不恨你了，一点都不恨了。我现在甚至还关心你，我也希望你长命百岁，但是我告诉你，你没付出的东西，你得不到。</p><p>我还是希望我们像两条平行的河一样流着就完了。他流他的，我流我的。</p><p>－－－－－－－－－－－－－－－－<br>本文转载自网络</p>]]></content>
    
    
    <categories>
      
      <category>每日故事</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>做一个永不暴露真实IP的网站</title>
    <link href="/2021/11/17/%E5%81%9A%E4%B8%80%E4%B8%AA%E6%B0%B8%E4%B8%8D%E6%9A%B4%E9%9C%B2%E7%9C%9F%E5%AE%9EIP%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2021/11/17/%E5%81%9A%E4%B8%80%E4%B8%AA%E6%B0%B8%E4%B8%8D%E6%9A%B4%E9%9C%B2%E7%9C%9F%E5%AE%9EIP%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<blockquote><p>防范DDOS攻击最主要的手段是加钱上高防，同时隐藏网站真实IP，本文简单介绍几种网站隐藏真实ip的方法和优缺点，让你能真正做一个永不暴露真实IP的网站。</p></blockquote><h2 id="隐藏IP的几种办法"><a href="#隐藏IP的几种办法" class="headerlink" title="隐藏IP的几种办法"></a>隐藏IP的几种办法</h2><p>既然不想暴露网站的真实IP，那么真实服务器前面至少套一层代理。一般来说，位于最前线的反向代理主要有如下几种：</p><ul><li>  <strong>CDN</strong>：内容分发网络，就近为用户提供服务，加速访问；</li><li>  <strong>高防IP</strong>：高防IP一般位于大带宽的骨干网节点上，用于清洗DDoS流量；</li><li>  <strong>SLB</strong>：负载均衡器，用在大流量、繁忙的网站上，常见的SLB有LVS、F5等。</li></ul><p>这三种反向代理主要作用不一样，配置好的情况下都能隐藏服务器真实IP。对于普通的网站，使用CDN或者高防IP就足够，业务量大的情况下才会用到SLB。</p><h2 id="如何绕过CDN等代理服务查到源站IP"><a href="#如何绕过CDN等代理服务查到源站IP" class="headerlink" title="如何绕过CDN等代理服务查到源站IP"></a>如何绕过CDN等代理服务查到源站IP</h2><p>正所谓知己知彼百战百胜，在介绍如何隐藏IP之前，我们需要了解攻击者通常是怎么绕过这些代理服务找到源站IP的。</p><p>正常情况下，通过cmd命令（或者站长工具等）可以快速找到域名对应IP，最常见的命令如ping、nslookup。如果挂了代理服务很明显这个就行不通，在ping的时候会发现有多个IP，绕过代理服务器查源站IP通常有以下几种方法：</p><ul><li>  <strong>DNS历史解析记录</strong>：查询域名的历史解析记录，可能会找到网站使用CDN前的解析记录，从而获取真实ip；</li><li>  <strong>查找子域名</strong>：很多时候，一些重要的站点会做CDN，而一些子域名站点并没有加入CDN，而且跟主站在同一个C段内，这时候，就可以通过查找子域名来查找网站的真实IP；</li><li>  <strong>网站邮件头信息</strong>：比如说，邮箱注册，邮箱找回密码、RSS邮件订阅等功能场景，通过网站给自己发送邮件，从而让目标主动暴露他们的真实的IP，查看邮件头信息，获取到网站的真实IP。</li><li>  <strong>网络空间安全引擎搜索</strong>：通过关键字或网站域名，就可以找出被收录的IP，很多时候获取到的就是网站的真实IP</li><li>  <strong>利用SSL证书寻找真实IP</strong>：证书颁发机构(CA)必须将他们发布的每个SSL/TLS证书发布到公共日志中，SSL/TLS证书通常包含域名、子域名和电子邮件地址。包括很多站长喜欢使用宝塔面板一键生成ssl，其实这也会被证书记录源站IP，因此SSL/TLS证书成为了攻击者的切入点。</li><li>  <strong>国外主机解析域名</strong>：大部分 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的DNS查询，很可能获取到真实IP。</li><li>  <strong>扫描全网</strong>：通过Zmap、masscan等工具对整个互联网发起扫描，有的工具甚至可以达到五分钟就能扫描完全网，攻击者会针对扫描结果进行关键字查找，从而获取网站真实IP。</li><li>  <strong>配置不当导致绕过</strong>：在配置CDN的时候，需要指定域名、端口等信息，有时候小小的配置细节就容易导致CDN防护被绕过。</li><li>  <strong>F5 LTM 负载均衡解码获取真实内网ip</strong>：如果网站先在内网出口使用F5做ISP的链路负载均衡，然后再用CDN加速。这样的话，客户端还是可以看到F5埋的那个cookie。而且经过CDN，埋的cookie不会被修改或者删除，所以客户端还是可以看到。通过解码就可以得到目标服务器真实内网ip</li><li>  <strong>利用网站漏洞</strong>：如果目标站点存在漏洞，这就没办法避免了。例如phpinfo敏感信息泄露、Apache status和Jboss status敏感信息泄露、网页源代码泄露、svn信息泄露信、github信息泄露等。<br>若存在web漏洞，服务器主动与我们发起请求连接，我们也能获取目标站点真实ip。例如xss、ssrf、命令执行反弹shell等。</li></ul><p>这些是我所知道的方法，如果后续还发现有其他的我会进行补充，下面对上面几种方法进行详细的介绍：</p><h3 id="一、DNS历史解析记录"><a href="#一、DNS历史解析记录" class="headerlink" title="一、DNS历史解析记录"></a>一、DNS历史解析记录</h3><p>查询DNS记录的网站有：<br>iphistory：<a href="https://viewdns.info/iphistory/">https://viewdns.info/iphistory/</a><br>DNS查询：（<a href="https://dnsdb.io/zh-cn/%EF%BC%89">https://dnsdb.io/zh-cn/）</a><br>微步在线：（<a href="https://x.threatbook.cn/%EF%BC%89">https://x.threatbook.cn/）</a><br>域名查询：（<a href="https://site.ip138.com/%EF%BC%89">https://site.ip138.com/）</a><br>DNS历史查询：（<a href="https://securitytrails.com/%EF%BC%89">https://securitytrails.com/）</a><br>Netcraft：<a href="https://sitereport.netcraft/">https://sitereport.netcraft</a>.</p><h3 id="二、查找子域名"><a href="#二、查找子域名" class="headerlink" title="二、查找子域名"></a>二、查找子域名</h3><p>常用的子域名查找方法和工具：</p><p>1、搜索引擎查询：如Google、baidu、Bing等传统搜索引擎，site:baidu.com inurl:baidu.com，搜target.com|公司名字。</p><p>2、一些在线查询工具，如：<br><a href="http://tool.chinaz.com/subdomain/">http://tool.chinaz.com/subdomain/</a><br><a href="http://i.links.cn/subdomain/">http://i.links.cn/subdomain/</a><br><a href="http://subdomain.chaxun.la/">http://subdomain.chaxun.la/</a><br><a href="http://searchdns.netcraft.com/">http://searchdns.netcraft.com/</a><br><a href="https://www.virustotal.com/">https://www.virustotal.com/</a></p><p>3、 子域名爆破工具：<br>Layer子域名挖掘机<br>wydomain：<a href="https://github.com/ring04h/wydomain">https://github.com/ring04h/wydomain</a><br>subDomainsBrute:<a href="https://github.com/lijiejie/">https://github.com/lijiejie/</a><br>Sublist3r:<br><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></p><h3 id="三、网络空间安全引擎搜索"><a href="#三、网络空间安全引擎搜索" class="headerlink" title="三、网络空间安全引擎搜索"></a>三、网络空间安全引擎搜索</h3><p>钟馗之眼：<a href="https://www.zoomeye.org/">https://www.zoomeye.org</a><br>Shodan：<a href="https://www.shodan.io/">https://www.shodan.io</a><br>Fofa：<a href="https://fofa.so/">https://fofa.so</a></p><h3 id="四、利用SSL证书寻找真实IP"><a href="#四、利用SSL证书寻找真实IP" class="headerlink" title="四、利用SSL证书寻找真实IP"></a>四、利用SSL证书寻找真实IP</h3><p>SSL证书搜索引擎：<br><a href="https://censys.io/ipv4?q=github.comCensys">https://censys.io/ipv4?q=github.comCensys</a> </p><h3 id="五、国外主机解析域名"><a href="#五、国外主机解析域名" class="headerlink" title="五、国外主机解析域名"></a>五、国外主机解析域名</h3><p>国外多PING测试工具：<br><a href="https://asm.ca.com/zh_cn/ping.php">https://asm.ca.com/zh_cn/ping.php</a><br><a href="http://host-tracker.com/">http://host-tracker.com/</a><br><a href="http://www.webpagetest.org/">http://www.webpagetest.org/</a><br><a href="https://dnscheck.pingdom.com/">https://dnscheck.pingdom.com/</a></p><h3 id="六、扫描全网"><a href="#六、扫描全网" class="headerlink" title="六、扫描全网"></a>六、扫描全网</h3><p>1、ZMap号称是最快的互联网扫描工具，能够在45分钟扫遍全网。</p><p><a href="https://github.com/zmap/zmap">https://github.com/zmap/zmap</a></p><p>2，zgrab 是基于zmap无状态扫描的应用层扫描器,可以自定义数据包，以及ip、domain之间的关联。可用于快速指纹识别爆破等场景。</p><p><a href="https://github.com/zmap/zgrab/">https://github.com/zmap/zgrab/</a></p><p>3、Masscan号称是最快的互联网端口扫描器，最快可以在六分钟内扫遍互联网。</p><p><a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p><h3 id="七、配置不当导致绕过"><a href="#七、配置不当导致绕过" class="headerlink" title="七、配置不当导致绕过"></a>七、配置不当导致绕过</h3><p>案例1：为了方便用户访问，我们常常将<a href="http://www.test.com/">www.test.com</a> 和 test.com 解析到同一个站点，而CDN只配置了<a href="http://www.test.com,通过访问test.com,就可以绕过/">www.test.com，通过访问test.com，就可以绕过</a> CDN 了。</p><p>案例2：站点同时支持http和https访问，CDN只配置 https协议，那么这时访问http就可以轻易绕过。</p><p>看到这里相比也差不多弄清楚了大部分攻击者是怎么绕过代理服务的，那下面就介绍如何更好的隐藏网站真实IP，当然这也是基于使用了代理服务的前提下：</p><h3 id="一，防火墙"><a href="#一，防火墙" class="headerlink" title="一，防火墙"></a>一，防火墙</h3><p>使用防火墙是最简单的也是最粗暴的做法，即：将反向代理的回源IP加入白名单，屏蔽其他IP的任何请求。</p><p>例如使用CloudFlare的免费CDN服务，其回源IP可从 <a href="https://www.cloudflare.com/zh-cn/ips/">https://www.cloudflare.com/zh-cn/ips/</a> 获取，然后将其加入白名单，同时屏蔽其他IP，教程如下：</p><p>① 在root文件夹下新建一个cf_ips.txt文件，将上面获取的CF节点IP地址放在 cf_ips.txt里即可，特别提醒最好把自己家IP也输入进去，以免登不上ssh</p><p>②将CF加入白名单，在SSH输入以下指令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">while</span> <span class="hljs-keyword">read</span> -r <span class="hljs-built_in">line</span><br><span class="hljs-keyword">do</span><br>firewall-cmd --zone=trusted --<span class="hljs-built_in">add</span>-<span class="hljs-keyword">source</span>=$linedone &lt; <span class="hljs-keyword">cf</span>\_ips.txt<br></code></pre></td></tr></table></figure><p>③移除其他ip对http和https服务的访问</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--remove-service</span>=http<br>firewall-cmd <span class="hljs-attribute">--remove-service</span>=https<br></code></pre></td></tr></table></figure><p>还有另外一种处理方法，教程如下：</p><p>①把自己IP放入白名单</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">auto</span><br><br>iptables -<span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">INPUT</span> -s 自己的IP -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">22</span> -j ACCEPT    <br></code></pre></td></tr></table></figure><p>②全端口TCP关闭</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">auto</span><br>iptables -<span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">1</span>:<span class="hljs-number">65535</span> -j DROP  <br></code></pre></td></tr></table></figure><p>③只允许CDN的IP访问，这里以CF做示范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">auto</span><br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">173.245</span>.<span class="hljs-number">48.0</span>/<span class="hljs-number">20</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">103.21</span>.<span class="hljs-number">244.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">103.22</span>.<span class="hljs-number">200.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">103.31</span>.<span class="hljs-number">4.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">141.101</span>.<span class="hljs-number">64.0</span>/<span class="hljs-number">18</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">108.162</span>.<span class="hljs-number">192.0</span>/<span class="hljs-number">18</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">190.93</span>.<span class="hljs-number">240.0</span>/<span class="hljs-number">20</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">188.114</span>.<span class="hljs-number">96.0</span>/<span class="hljs-number">20</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">197.234</span>.<span class="hljs-number">240.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">198.41</span>.<span class="hljs-number">128.0</span>/<span class="hljs-number">17</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">162.158</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">15</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">104.16</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">12</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">172.64</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">13</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -s <span class="hljs-number">131.0</span>.<span class="hljs-number">72.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">173.245</span>.<span class="hljs-number">48.0</span>/<span class="hljs-number">20</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">103.21</span>.<span class="hljs-number">244.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">103.22</span>.<span class="hljs-number">200.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">103.31</span>.<span class="hljs-number">4.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">141.101</span>.<span class="hljs-number">64.0</span>/<span class="hljs-number">18</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">108.162</span>.<span class="hljs-number">192.0</span>/<span class="hljs-number">18</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">190.93</span>.<span class="hljs-number">240.0</span>/<span class="hljs-number">20</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">188.114</span>.<span class="hljs-number">96.0</span>/<span class="hljs-number">20</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">197.234</span>.<span class="hljs-number">240.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">198.41</span>.<span class="hljs-number">128.0</span>/<span class="hljs-number">17</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">162.158</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">15</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">104.16</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">12</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">172.64</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">13</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -s <span class="hljs-number">131.0</span>.<span class="hljs-number">72.0</span>/<span class="hljs-number">22</span> -j ACCEPT;<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">80</span> -j DROP<br>iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">443</span> -j DROP<br></code></pre></td></tr></table></figure><p>④在你测试这段代码没有问题能正常工作之后，可以永久保存此规则</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">auto</span><br>service iptables save<br></code></pre></td></tr></table></figure><p>执行这个命令的时候有时候可能会报错：The service command supports only basic LSB actions (start, stop, restart, try-restart, reload, force-reload, status). For other actions, please try to use systemctl.</p><p>这是因为没有安装iptables服务，直接使用yum安装iptables服务即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">yum install iptables-services<br></code></pre></td></tr></table></figure><p>安装完成后，重新执行 service iptables save 命令即可保存成功。</p><p>⑤防火墙firewall设置指令：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nix">auto<br>firewall-cmd --permanent <span class="hljs-attr">--add-rich-rule=&quot;rule</span> <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=103.21.244.0/22</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=103.22.200.0/22</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=103.31.4.0/22</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=104.16.0.0/12</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=108.162.192.0/18</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=131.0.72.0/22</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=162.158.0.0/15</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=172.64.0.0/13</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=173.245.48.0/20</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=188.114.96.0/20</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=190.93.240.0/20</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=197.234.240.0/22</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=198.41.128.0/17</span> port <span class="hljs-attr">port=80</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=103.21.244.0/22</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=103.22.200.0/22</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=103.31.4.0/22</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=104.16.0.0/12</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=108.162.192.0/18</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=131.0.72.0/22</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=162.158.0.0/15</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=172.64.0.0/13</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=173.245.48.0/20</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=188.114.96.0/20</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=190.93.240.0/20</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=197.234.240.0/22</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br><span class="hljs-string">firewall-cmd --permanent --add-rich-rule=&quot;</span>rule <span class="hljs-attr">family=ipv4</span> source <span class="hljs-attr">address=198.41.128.0/17</span> port <span class="hljs-attr">port=443</span>  <span class="hljs-attr">protocol=tcp</span>  accept<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>⑥使规则生效</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure><h3 id="二，IPv6"><a href="#二，IPv6" class="headerlink" title="二，IPv6"></a>二，IPv6</h3><p>对于防火墙和网络不熟悉的网友，可以考虑使用IPv6来隐藏网站的真实IP。具体操作为：</p><p>①找一台有IPv6地址的服务器，只有IPv6的<br>② 设置网站只监听IPv6端口。以为例，网站配置文件形如：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">server</span> &#123;<br>    listen \[::\]:<span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">server</span>\_name 主机名; <span class="hljs-meta"># 请改成自己的主机名</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">301</span> https:<span class="hljs-comment">//主机名$request\_uri;</span><br>&#125;<br><span class="hljs-keyword">server</span> &#123;<br>    listen      \[::\]:<span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-keyword">server</span>\_name  主机名;<br>    ssl\_certificate 证书路径;<br>    ssl\_certificate\_key ssl密钥路径;<br>    <span class="hljs-meta"># 其他设置</span><br>&#125;<br></code></pre></td></tr></table></figure><p>③ 找一家支持只有IPv6的CDN，例如 <a href="https://tlanyan.pp.ua/tag/cloudflare/">Cloudflare</a>，设置IPv6解析</p><p>如果不放心，可以同样加上防火墙，就万无一失了：</p><p>首先将cf的ip加入白名单</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">while</span> <span class="hljs-keyword">read</span> -r <span class="hljs-built_in">line</span><br><span class="hljs-keyword">do</span><br>  firewall-cmd --zone=trusted --<span class="hljs-built_in">add</span>-<span class="hljs-keyword">source</span>=$<span class="hljs-built_in">line</span><br>done &lt; <span class="hljs-keyword">cf</span>\_ips.txt<br></code></pre></td></tr></table></figure><p>然后屏蔽其他地址对ipv6的访问权限</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">firewall-cmd</span> <span class="hljs-built_in">--add-rich-rule=&quot;rule</span> <span class="hljs-string">family</span>=<span class="hljs-string">&#x27;ipv6&#x27;</span> <span class="hljs-string">source</span> <span class="hljs-string">address</span>=<span class="hljs-string">&#x27;::0/0&#x27;</span> <span class="hljs-string">drop</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>该方法同样设置简单，以奇招胜出，单台服务器能托管多个网站，并且其他网站可直接暴露不受影响。</p><h3 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h3><p>另一种常见隐藏真实IP方式是使用CNAME，同样无需设置防火墙。其操作如下：</p><p>① CDN回源时使用CNAME方式回源到另一个主机名上。例如<a href="http://www.baidu.com回源的www.abcdexfd.com.需要注意的是,前端域名和源站域名最好不是同一个,防止通过爆破二级域名泄漏真实ip;/">www.baidu.com回源的www.abcdexfd.com。需要注意的是，前端域名和源站域名最好不是同一个，防止通过爆破二级域名泄漏真实IP；</a></p><p>②在源站服务器上设置默认站点，防止通过host方式爆破。由于默认站点只是为了防止SNI方式泄漏真实IP，因此使用自签证书即可</p><p>③ 生成密钥</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">openssl genrsa -out <span class="hljs-built_in">example</span>.<span class="hljs-built_in">key</span> <span class="hljs-number">2048</span><br></code></pre></td></tr></table></figure><p>④生成证书，期间需要填一些信息</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">openssl req -<span class="hljs-built_in">new</span> -x509 -days <span class="hljs-number">3650</span> -<span class="hljs-built_in">key</span> <span class="hljs-built_in">example</span>.<span class="hljs-built_in">key</span> -out <span class="hljs-built_in">example</span>.pem<br></code></pre></td></tr></table></figure><p>接着以Nginx为例，设置默认站点：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sqf">server &#123;<br>  listen <span class="hljs-number">80</span> <span class="hljs-keyword">default</span>\<span class="hljs-variable">_server</span>;<br>  server\<span class="hljs-variable">_name</span> example.com;<br>  return <span class="hljs-number">301</span> https:<span class="hljs-comment">//example.com$request\_uri;</span><br>&#125;<br><br>server &#123;<br>  listen <span class="hljs-number">443</span> ssl http2;<br>  server\<span class="hljs-variable">_name</span> example.com <span class="hljs-keyword">default</span>\<span class="hljs-variable">_server</span>;<br>  ssl\<span class="hljs-variable">_certificate</span> example.pem;<br>  ssl\<span class="hljs-variable">_certificate</span>\<span class="hljs-variable">_key</span> example.key;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后重启Nginx即可。</p><p>该方法无需设置防火墙，设置较为简单，但是需要额外一个域名。</p><p>如果域名之前从未用过，刚开通就用上面提到的方法，基本上可以保证不会泄漏网站的真实IP。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大案巧破，小案大破</title>
    <link href="/2021/11/14/%E5%A4%A7%E6%A1%88%E5%B7%A7%E7%A0%B4%EF%BC%8C%E5%B0%8F%E6%A1%88%E5%A4%A7%E7%A0%B4/"/>
    <url>/2021/11/14/%E5%A4%A7%E6%A1%88%E5%B7%A7%E7%A0%B4%EF%BC%8C%E5%B0%8F%E6%A1%88%E5%A4%A7%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<p>　　我这边儿接了一电话，有个男的报案，说家里被入室抢劫了，父母在家中惨死。<br>　　<br>　　啥别说了，带上俩徒弟，走吧。<br>　　<br>　　到了案发现场，技术人员已经封锁了现场，开始勘查，门外堵了不少围观群众，怎么赶也赶不走。我嘱咐俩徒弟：“都把鞋套穿上。”<br>　　<br>　　进入屋，视觉冲击力非常强。现场异常惨烈，老爷子死在要出卧室没出卧室的地方，后背全是刀伤，屋里的血流得哪儿哪儿都是。老太太死在床上，脖子上有一根领带勒着，前胸、脑袋上都有刀伤。老爷子身上有十几刀，我数了数十六七刀不止，老太太少，扎了有七八刀。<br>　　<br>　　“这是男死者的领带吧？”李昱刚问。<br>　　<br>　　“看样子应该是。”<br>　　<br>　　我瞧着老太太一侧，床边的扶手椅上，还有衬衫西裤等，唯独缺了领带。<br>　　<br>　　这是个两室一厅的房子，老夫妇住一间，儿子住一间。老夫妇的卧室是一副人间炼狱，儿子的卧室却是一尘不染，十分整洁，被子叠得跟豆腐块似的。<br>　　<br>　　我们仨仔细走了一圈，为了不打扰技术组工作，就从案发现场出来了。<br>　　<br>　　“儿子叫陈晨，他报的警。说是入室抢劫，他回家来发现的。”李昱刚点上一支烟，把烟盒递给了我。<br>　　<br>　　“‘入室抢劫’。”我点烟，重复道。<br>　　<br>　　“真够凶残的，俩人那么一把年纪了，这狠手下的。”夏新亮不抽烟，也发自内心地烦我俩抽烟这毛病。<br>　　<br>　　“说是仇杀也没问题。以这个现场来说没问题。”我又补充了一句。<br>　　<br>　　李昱刚点头，“嗯，也没问题。案发现场就在老夫妇的卧室，儿子那屋儿我看不像有人进去过。您是怀疑并非入室抢劫？”<br>　　<br>　　“那领带我隐隐觉得不舒服。”我说，“带刀来抢劫，有备而来，拿死者领带干吗呢？”<br>　　<br>　　“情急之下？”<br>　　<br>　　我想了想，整个杀人过程会是什么情况呢？<br>　　<br>　　两个被害人，几个凶手？<br>　　<br>　　如果是入室抢劫，要提前踩点的吧？一家三口，老夫妇外加一个儿子。两男一女，一个人肯定干不来。要说不踩点儿随机吧，那可跟中奖差不多了。<br>　　<br>　　目前已知情况太少，啥也推测不出来。<br>　　<br>　　抽完一支烟，我说：“走吧，去见见这家儿子，看看他能给咱提供点儿啥情报。”<br>　　<br>　　报案人陈晨给我的第一印象是斯文，白白净净，瘦高个儿。他在证券公司上班，研究生毕业，入职两年，前途可观，这都已经不是白领了，叫金领。给我们介绍情况也十分有条不紊，说他上周出差，一直没回家，结果案发当天中午回到家，一进门，发现父母遇害，马上报警了。特别冷静，这个孩子十分冷静，面对父母被杀，一般人做不到这么冷静。不知道高才生是不是都这么有水平。<br>　　<br>　　我说讲讲你爸妈吧，给我们也介绍介绍情况。他说父母都是大学老师，爷爷奶奶也是读书人，是传统的书香门第。我说你呢，你是不是就是那种“别人家的孩子”，从小到大三好学生那种。他有点儿害羞地笑了。<br>　　<br>　　由于现在并不能判断他父母遇害的真正原因，我问的就有点儿多，问了他父母有什么爱好吗，跳广场舞吗，他说不跳。我一想也对，人家都是高级知识分子，这种人不出来跳广场舞。又问了问他父母平时的社交，都跟什么人来往、走动，他说据他所知也就是一些同事，老同学。这些人有人跟你父母有矛盾吗？没有。平时我父母都特别和善。还没退休啊？快了，但是大学要返聘。诸如此类，种种问题他都对答如流。感觉他平时跟父母关系应该很好，所以这些情况他才能了如指掌。<br>　　<br>　　应技术部要求，我跟他核实了他今天穿的衣服、鞋子，鞋子也采集了脚印，因为他进过现场，这些都得拿来对比筛除，比如掉落的纤维啊，现场留下的足迹啊。包括指纹也要采集，这些都要用以排除。<br>　　<br>　　一系列过程他都很配合，我问他答，李昱刚和夏新亮在一旁记录。<br>　　<br>　　差不多我就送他出去了，跟他说日后想起什么情况就来找我们，我们有什么疑问也会再去打扰他，他都说没问题。<br>　　<br>　　询问完陈晨，我们还得去外围调查。死者的邻居、同事都需要走一走，摸一摸。<br>　　<br>　　大学的同事这边，确实像陈晨跟我们说的差不多，他父母的同事跟他们关系都很好，很了解他们家，没利益矛盾。综合整理一下大家的说法——受害人是大学老师，从业多年，家庭条件很好，一家人是很传统的书香门第。<br>　　<br>　　儿子陈晨自幼由爷爷奶奶抚养长大，其抚养方式称得上是标准溺爱，这是第一个。第二个，后来他上学了，搬回去和父母一起住。孩子成绩特别好，一路都是重点学校，毕业后在证券公司上班，一个月挣两三万，工作能力卓越，是一个非常乖的孩子，恨不得出门穿什么衣服都由他父母来决定，特别规整听话的孩子。一家人关系非常紧密。<br>　　<br>　　到了邻居这边儿，得到的信息也差不多，陈晨就是那种典型的“别人家的孩子”，让他父母引以为豪。但引起我注意的是，提供这些情报的人，是被害人两夫妇的队友。太极队。原来老头儿老太太好打太极，每天清晨五六点，准在楼下的街心花园打太极。<br>　　<br>　　而案发这天，俩人都没出现。这是我们万万没预料到的，因为儿子陈晨根本没跟我们提及。我跟李昱刚我俩一清早上小区来，无非是老年人起得早，你要想找他们问情况，早上去人最齐，这才知道。<br>　　<br>　　在肯德基坐着，李昱刚点了餐，我们仨坐在靠窗的位置，透过硕大的落地窗我往外看，街上行人不多，跟餐厅里一样，几乎没有上班族的踪影。低头看看表，指针指向了10。<br>　　<br>　　“刘哥，咱一会儿吃完上哪儿去？大学去过了，小区也走过了。”<br>　　<br>　　“上陈晨单位看看吧。”<br>　　<br>　　“他在单位吗？”李昱刚看向我，“父母刚遭遇不测，没心情上班吧？用不用提前先跟他联系一下？别扑空。”<br>　　<br>　　“就是要扑空。”我说。<br>　　<br>　　“啊？”夏新亮一脸狐疑。<br>　　<br>　　上陈晨单位走了一趟，小伙子果然请了假，我跟他们主管聊了聊，告诉了他陈晨家里出事儿的情况。姓金的主管十分震惊，说陈晨请假，并非这两天的事儿，这反倒让我们吃了一惊。<br>　　<br>　　这是怎么档子事儿呢？<br>　　<br>　　原来，陈晨来这家证券公司工作后不久，跟同部门的女上司搞起了婚外恋。<br>　　<br>　　他喜欢上的这个女孩儿，应该说是女人，比他大八岁，这个女人有家室有孩子，然而俩人还是恋上了。陈晨跟这个女人好了，但是他的父母极其反对，儿子不能找一个二婚的呀，也不能破坏人家家庭啊，他们根本就不同意，就把他经济命脉给掐了，第一个，你不能再给这女的花钱了；第二个，你开了工资都得给家里。<br>　　<br>　　金主管怎么知道这事儿的？就是陈晨的父亲找到的他，跟他说的陈晨的情况，说领导你得配合我们，工资不能直接发给他了。弄得金主管都疯了，没见过这情况啊！<br>　　<br>　　年轻人来上班，都是独立个体，工作中遇到问题也好，生活里出了难事也罢，这归根结底都是自己的事儿，哪能说你这个年纪都进社会了，你有事还要你父母插手的啊！而且这手插得都叫他不知所措，我把工资不开给员工开给员工家属？真是活久见了！<br>　　<br>　　金主管当然不同意，他说有问题可以解决，他可以找他们谈话，也可以整顿办公室风气，但万万不能截留工资啊。这位老父亲一听，也是绝了，讲话，那我不能叫我儿子再来你们这里上班了，工资你也不要开了，他辞职了。他来单位老能见着这女的，前途都毁了，这个班儿不上也罢。<br>　　<br>　　后来陈晨来了，金主管也跟他谈话了，陈晨说你别理我爸，他教书育人职业病好不了了，我上班，好好儿上班，绝对不再搞办公室恋情了。然而话虽然这么说，但自此之后陈晨上班就开始零零散散的了。<br>　　<br>　　目前陈晨是我的头号怀疑对象。这一点我还没跟徒弟们说。有很多不对劲，但这些不对劲儿只是种感觉，目前还没有真凭实据。<br>　　<br>　　金主管把他知道的都告诉了我们，我们提出得见见这个女的，金主管说没问题，她就在公司呢，说着拿起了电话，拨通了内线。<br>　　<br>　　由于涉及隐私，金主管给我们安排了间会议室。这个叫罗美华的女人来得挺快。她一脚踏进会议室，我就在观察她。个子不矮，不胖不瘦，长得落落大方，脸上挂着职业式的微笑，讲话也很干练：“听老金说你们有事找我？您二位是？”<br>　　<br>　　我们没让金主管告诉她我们是警察，就是想捕捉她的真实反应。因为目前并不知道她在这起案件中承担怎样的角色。<br>　　<br>　　“罗小姐您好。”我站了起来，“我们是警察，找您了解点儿情况。”<br>　　<br>　　罗美华一脸茫然，“警察？找我了解情况？”<br>　　<br>　　这不像是装出来的，她的不解与迷茫，出自本能反应。<br>　　<br>　　我们把陈晨父母被害的事前前后后一说，罗美华一边听一边面色凝重起来，最后她声音打颤地问：“你们来找我，是怕我有危险吗？那我女儿有没有事？天哪，我赶紧给幼儿园打个电话。”<br>　　<br>　　我摁住了她的手腕，“罗小姐，你先不要慌，目前还不知道他父母的死与他有没有联系。”<br>　　<br>　　“可是，可是……”<br>　　<br>　　“您放心，我们会对您提供保护，包括您的家人，但在此之前，您得跟我们说说你俩之间的具体情况。”<br>　　<br>　　罗美华把她跟陈晨恋爱的经过原原本本都告诉了我们。罗美华的女儿刚上幼儿园，她在生完女儿之后休了很长时间的假，老公忙于工作对她们母女疏于照料，她也是丧偶式育儿大军里的一员。后来孩子上了幼儿园她重新出来工作，在工作中认识了陈晨，小伙子既老实又上进，工作中是她的好帮手，生活上也对她关照有加、无微不至，不仅对她特别好，对她女儿也好。<br>　　<br>　　渐渐的，罗美华的心就产生了偏移。女人一旦变心，就很难回头了。罗美华也是一心一意对陈晨。她说，陈晨对她说——我上学时候只顾着学习了，没有过爱情，也不知道怎么跟人谈恋爱，遇到你，你工作中对我特别耐心，又是帮我又是提拔我，我一下儿就温暖了，我就忽然懂了什么是爱了。我爱上你了，就是你了，从来没人对我这么好过，从来没人这么懂我。<br>　　<br>　　这倒是很说明问题，也是特别突出的社会问题。现在的年轻人似乎进了个怪圈。读书时候父母学校一起抓，不许早恋不许搞男女关系，然后一毕业，爸妈就变了，就开始催了，你怎么还不找女朋友，你怎么还不找男朋友，那谁家的闺女都怀孕了，你怎么连个异性朋友都没有？<br>　　<br>　　废话，可能有吗？他该恋爱的时候全把时间用在读书上了，读了书该搞事业了，你又质疑他怎么这么笨连个恋爱对象都没有。陈晨显然也是这样，读书时候用力过猛，突然到了社会上，有一个大姐照顾他，大姐带着小弟，有吃有喝有玩的，能不开心吗？能不一下子沉迷吗？<br>　　<br>　　这小子发完工资所有的钱都给罗美华，我喜欢你，什么全给你，你拿去用，你给咱闺女多买点儿好吃的好玩儿的，赶上假期俩人就带孩子旅游去，不知道的都以为这就是其乐融融的一家人呢。日子久了，陈晨决定两人一起生活，说不行咱俩就私奔，你们娘俩的生活我全管了，从前你没人依靠，现在你有我。<br>　　<br>　　罗美华特别感动，她也特别喜欢他，可是她有家有孩子，这么跟人跑了终究不是事儿，离婚吧，又不是儿戏，而且还有闺女的抚养权问题。迫于种种压力，罗美华<br>　　<br>　　了，说咱俩有爱就行了，就这么在一起就行了，真私奔了我的家怎么办，这怎么办，那怎么办。陈晨说不行，我就得和你在一起，我爱你和妹妹，我能当个好爸爸，咱俩不再要孩子都行，你带着妹妹跟我走。<br>　　<br>　　在这个过程当中，陈晨爸妈知道了陈晨跟有夫之妇谈恋爱的事儿，炸了，车也给收回来了，工资也没收了，班儿也不叫上了，恨不能把他锁起来天天看着。陈晨挣扎过，闹过，但终究拗不过他父母。罗美华这时候也有点儿清醒了，就跟陈晨说，不行咱俩就算了，没路可走了，咱们没路可走了。<br>　　<br>　　我问罗美华最后见陈晨是什么时候，她说是上礼拜，礼拜三，她记得特别清楚，那天她去跑客户，陈晨找去了，说让她等着，定不辜负她跟妹妹，说一定会给她个说法，还说你啥都不用管，我一定会说服我父母，这是第一步。<br>　　<br>　　我算了一下，时间上来说，是陈晨父母被杀前三天，如此看来，陈晨是把父母的反对解决了，但不是用谈的，很可能是用极端暴力模式解决的。<br>　　<br>　　杀父弑母，什么样的仇恨能叫一个人兽性至此？<br>　　<br>　　重回案发现场，我反复不停地在思考这个问题。<br>　　<br>　　法医的鉴定结果是，受害人夫妇死于凌晨三点至早九点间。这就是个区间范围，具体不下来。由于尸体是24小时就僵硬，出现尸斑尸块，前后如果差五六个小时的话，是谁也验不出来的。这中间肯定有误差，因为那九点钟杀的人跟凌晨三点杀的人，中间差五六个小时，不会有特别大的区别。我们什么证据都没有，只能听取报案人也就是陈晨的口供，他说他一直出差，中午才回来，我就不能说他凌晨三点杀了人。<br>　　<br>　　然而，据我推测，人应该就死在凌晨。我这么推测不是没道理的。老头儿老太太有早起打太极的习惯，五六点钟要准时去的，他们不可能睡到九点在睡梦中被杀害，更不可能六点钟他们儿子走了还在熟睡。这是不符合二老的活动规律的。尤其，老年人觉少，即便不去打太极，也不可能继续躺着睡，睡不着的。<br>　　<br>　　另外，在案发现场还有一个很大的疑点，那就是发现了两个空的啤酒瓶子，就随手扔在陈晨房间。这就有点奇怪了，陈晨说他出差了一星期，那么他屋子里的啤酒瓶子就应该是一周前的……也就是说，这一星期的时间，陈晨的父母都没有把那两个瓶子收拾扔掉？<br>　　<br>　　通过俩老人死亡的位置和衣着状态，我很确定他们是在熟睡中被杀死的。这错不了。我来还原现场，就是再来确定这一点。<br>　　<br>　　我怀疑陈晨，所以假定凶手就是他一人。下手时间参考法医意见就设置在凌晨三点。那么，会发生什么？发生什么会反映出我面前的被害现场？<br>　　<br>　　我盯着衔接客厅与主卧室的走廊，在头脑中还原当时那惨绝人寰的暴力现场。<br>　　<br>　　凌晨三点钟，凶手陈晨抄着一把刀就进他爸妈卧室里去了，进去之后，先干他爹，得先干男的，男的劲儿大反抗概率大呀！先干脑袋，开始扎。扎完脑袋，开始扎胸。差不多了，人动不了了。<br>　　<br>　　在扎老爷子的过程中，老太太醒了，不可能不醒。但醒了恐怕达不到足够清醒，她也许会问：儿子你干吗呢？<br>　　<br>　　对于凶手来说，此刻他就得采取行动了，调过头来又扎他妈，扎他妈的同时，他爸起来了，想呼救，往床下跑。得呼救啊，往下跑。<br>　　<br>　　凶手肯定急眼了，顺手把旁边他爸放在扶手椅上的领带给抄了起来。拿领带一打扣，勒着脖子之后，蹬着脑袋脚一踹，把他妈给勒死了。这一点法医可以佐证，女死者死于机械性窒息。男死者呢，死于内部大出血。<br>　　<br>　　他一勒他妈，他爸那会儿迷迷瞪瞪想回来救他媳妇儿。一回来，啪！摔倒在地下了，这个时候他身上已经有六七刀了，但还没死呢。凶手等着他妈没气了，又过来补了他爸两刀，全都杀死了。<br>　　<br>　　走到两个受害人死亡的位置，回想他们死亡时的状态，我觉得，我的推理应该是没错的。符合现场痕迹、符合法医推论、符合行为模式。当时陈晨报案的时候很冷静，这是一个非常冷静的孩子。爸妈死了也没惊慌，从头到尾是非常冷静的。<br>　　<br>　　“刘哥，我把材料捋了一遍，陈晨的口供前后矛盾之处可有不少啊。”<br>　　<br>　　我看向李昱刚，瞧他戴着“防毒面具”那德行，绷不住想踹他屁股一脚。我也是惯着孩子，真是惯着孩子，我姐说我一点儿没错儿。李昱刚对味道敏感，受不了犯罪现场的血腥、腐败气息，我就跟他说你偷着戴口罩不要紧，有我呢。但是你也不能这么嚣张吧？你说他像个什么样子，口罩就口罩吧，他戴了个豪华版自带空气流通版本的巨型口罩！搁谁谁不想揍他啊！<br>　　<br>　　“走，出去说。”我扶额。<br>　　<br>　　“ ！就等您这句呢！”<br>　　<br>　　他戴口罩我看不见他的表情，但那双弯弯的眼睛出卖了他憨笑的神情。<br>　　<br>　　“李昱刚我跟你说，你这个口罩，我不想在犯罪现场看见第二回！”<br>　　<br>　　上了车，我点上烟，直视着李昱刚的眼睛。<br>　　<br>　　“我……我还特意置办的，买了仨呢……真挺贵的……”<br>　　<br>　　“你这不像话！极其不像话！咱们出来办案，环境是差，但咱们有规定，你说规定是死的，可以灵活，但不是这么个灵活法儿。”<br>　　<br>　　“这不是就咱们仨嘛……”李昱刚的声音很小。<br>　　<br>　　夏新亮没戴口罩，他狠狠瞪了李昱刚一眼。<br>　　<br>　　“但你知不知道什么叫隔墙有耳？知不知道这种信息化时代每个人的手机都是手雷？亏你还是互联网达人，你说但凡谁把你啪一拍，媒体再一宣传，警局不要脸面的？全体公安干警都跟着你不要脸面的？”<br>　　<br>　　李昱刚头垂得低低的，“刘哥我错了……”<br>　　<br>　　“甭装可怜了，说正事儿。材料都哪儿对不上。”<br>　　<br>　　“噌”，小脑袋抬起来了，脸上一扫阴霾，李昱刚开始滔滔不绝：“第一遍材料出来之后，这小子特别冷静，我就觉得不对，但是咱们没有时间对他进行工作，忙着围现场转呢。”<br>　　<br>　　“哦？”我看向他，原来他也觉得不对了。小同志很敏感嘛。不仅敏感，还能细致地再过一遍口供，这很可以。<br>　　<br>　　“咱们一共找过他两次，他都很冷静。他越冷静，我越觉得这冷静背后有让人不寒而栗的东西。我就开始比对这两回的口供，找细节，专找细节，譬如头一回他报案时候的穿戴，这咱们是看在眼里的。可第二回问他你那天穿的什么鞋，穿的什么袜子，穿的什么裤子。对不上。跟咱们观察的不一样。感觉他就是随便说说。虽然对答如流，但就是随便说说的感觉。”<br>　　<br>　　我们的工作，不仅仅需要推理能力，更要有笔头功夫，所有的东西你要录音、你要记录整理，因为大脑很多时候里面存的东西是不恒定的。很多事你以为归你以为，真相归真相。这个时候，记录就是一件特别有必要的事了。那一个材料整理出来，我们之后反过来细节要盯它。我们材料出来的时候是非常细的，通过整个细的过程发现不对，然后进行再扩大。<br>　　<br>　　“第二个，就是现场了。案发的卧室有大量被翻找的痕迹，符合陈晨说的抢劫杀人，但是，他的房间，他自己住那屋儿，是没有翻找痕迹的。很整齐，哪儿哪儿都特别整齐。陈晨说他屋内没有钱财，他知道可凶手会知道吗？不知道，不可能知道。人都杀了，要抢劫了，不可能说就可着一屋儿翻腾。”<br>　　<br>　　夏新亮补充道：“这就要说到咱们提取的痕迹这方面了。指纹没有外来的，脚印没有外来的，包括纤维，等等，这屋里，就没有外人进去过的迹象。一个再专业、再缜密的犯罪分子，即便准备得再充足，也往往百密一疏。没有丁点疏漏的概率微乎其微，那鉴证科啥都没发现，是不是可以说明，这个屋子里，从来没进来过外人？”<br>　　<br>　　我点点头，示意他俩继续说。<br>　　<br>　　“陈晨的嫌疑很大！”李昱刚说得斩钉截铁。<br>　　<br>　　夏新亮则平静许多，点头说：“咱们大量工作已经做出来了，比如他跟父母的矛盾这些事情，咱们通过走访已经知道了。包括监控我也查了。甚至他说他去找的那个朋友。就以前那个同事，他都不知道人家早已经离开北京了。妥妥又是瞎话。我觉得我再找他谈，又全是不合扣的东西。”<br>　　<br>　　我们正说着，我手机响了，一看，是罗美华的号码。 ，这很奇怪。她不是去上海出差了吗，说是没有必要就避免联系，她怕她老公知道她这点儿破事儿，也因此谢绝了我们的保护，态度很坚决。<br>　　<br>　　我看了眼俩徒弟，他们俩也看向我。<br>　　<br>　　电话一接通，我们没听见罗美华说话，倒是听见一个小女孩的稚嫩声音。<br>　　<br>　　“旭哥哥，旭哥哥，这个乐高我插不上呀。”<br>　　<br>　　咝啦咝啦，像是布料的摩擦声穿插其间。<br>　　<br>　　坐在副驾驶的李昱刚抄过了他的笔记本电脑。<br>　　<br>　　“陈晨，你到底带我和妹妹去哪儿呀？车都开这么久了，这都要出北京了吧？”<br>　　<br>　　“着什么急呀你，平时上班就忙忙叨叨，咱们一家三口出来度假你快放松会儿吧。都交给我，不用你操心。你快帮妹妹看看怎么插不上。”<br>　　<br>　　“你还知道我上班忙呀，手头还好几个活儿呢，你这……急急忙忙把我们接上，妹妹打电话给我的时候我都惊了！”<br>　　<br>　　“说到这儿我倒想问问了，你干吗不接我电话？妹妹给你打了好几个，最后还转去语音信箱了。”<br>　　<br>　　“我……我那会儿在开会呀。我怎么知道你上幼儿园把妹妹接出来了。你也太大胆了你。”<br>　　<br>　　“妈妈，妈妈，你帮我插呀——”<br>　　<br>　　“来来来，给妈妈，是这个小汽车的门对吧？妹妹，你看，国道110，认识上面的数字吗？110。跟妈妈读。”<br>　　<br>　　这时我看到李昱刚朝我比了一个OK的手势。<br>　　<br>　　咝咝啦啦中，我挂断了电话。不能浪费电，李昱刚已经定位上他们了。毫无疑问，这是一通求救电话，陈晨把罗美华母女二人劫持了。<br>　　<br>　　我给罗美华发了条短信，只有一个逗号。这是提示她电话我已收到。别的不敢发，我怕陈晨看到引起他情绪激动。<br>　　<br>　　“刘哥，他们确实在110国道的延庆路段。”<br>　　<br>　　“你联系交警大队，让他们给你权限调取天网摄像头，一定要第一时间掌握他们的动态！我发警报给延庆方面，这个涉及儿童绑架不能有半点闪失。”<br>　　<br>　　“没问题！”<br>　　<br>　　“你坐镇，我和夏新亮我们俩奔延庆。”<br>　　<br>　　“他带走母女俩想干吗呀？咱们没提审他啊，没刺激他啊。”<br>　　<br>　　李昱刚的问题，夏新亮给出了解释，“回避真相，也是一种自我保护。就像闸盒里的保险丝，烧断了，但电路不会遭到破坏。陈晨把他父母杀了，这种现实是会把人压垮的，那他怎么办？你说他自欺欺人也罢，你说他避而不谈也罢，这都是让他逃避良心拷问的手段。<br>　　<br>　　“这个时候，罗美华跟她女儿既是他逃避真相的避风港，也是他心灵的寄托与慰藉。这么说来这母女二人就安全吗？不，恰恰相反，她们刚好处于旋涡的中心。陈晨为什么杀他父母？原因可能有许多，譬如对他的限制啊，让他身心不自由活得没自我啊，但导火索正是这不被家庭接受的母女二人。他为了她们把自己爹妈都宰了，如果他得不到预期回报，后果不堪设想。”<br>　　<br>　　延庆警方十分给力，他们调动了当地交警资源，交警骑着摩托追上了陈晨的车，以超速为名检查驾驶证，拖住他的这几分钟，刑警们上了。陈晨想跑来着，结果被直接拿下了。<br>　　<br>　　我们快开到的时候，收到了这好消息，罗美华母女平安。<br>　　<br>　　把陈晨押解回队上，我一直忘不了给他戴上铐子带走时，罗美华的女儿哭得上气不接下气，反反复复地嚎叫，就一句话——你们干吗，放开旭哥哥。他被铐住的双手掩盖在衣服下，小姑娘是看不见的，但她有预感，她仿佛知道自此一别，即是永别了。罗美华也哭了，哭得默不作声。眼泪像断了线的珍珠，扑簌扑簌往下掉，掉在水泥地上，掷地有声。陈晨的眼圈也泛红了，他回头看着她们，挪不开步子。<br>　　<br>　　夏新亮跟李昱刚审着他，但一直没什么进展。陈晨就是不说话，问什么都不说，眼神空空，仿佛就不在这个国度里。夏新亮说得对，就是保险丝崩坏的情形。不运转了。这个人的思维停滞不前了。就像一个封闭的系统，不再接收外界讯息。<br>　　<br>　　对于他来说，这就是最坏的情形了。打破虚幻，直面现实。现实过于残酷，以至于大脑感官都关闭了。<br>　　<br>　　我把夏新亮跟李昱刚叫了出来，剩陈晨一人坐在审讯室里。<br>　　<br>　　让他静静吧。我说。他这会儿听不进去任何话。你们也都歇歇，成宿跟他熬着，你们又不是铁人，都先休息休息。<br>　　<br>　　俩孩子回宿舍了，我在院里抽抽烟。<br>　　<br>　　事情的转机出现在晚上8点多，我拿着档案进了审讯室，没跟陈晨说话，而是低头翻看手里的档案夹。这时我听见他说：“大哥，你给我买瓶啤酒行吗？”<br>　　<br>　　我一听，有戏了。要饭吃了，说明他的大脑机制开始运行了——会饿了。<br>　　<br>　　这种情况确实不能强逼，你得等他自我恢复。一个万念俱灰的人，只有他自己面对现实了，才可能跟你进行有效的沟通。<br>　　<br>　　夏新亮的判断没有错，但小同志还是有些心急了。欲速则不达。<br>　　<br>　　我出去到胡同口给他买了两瓶啤酒一碗面，串儿也来了几个。打开，陈晨就咚咚咚把酒喝了，接着开始吸溜吸溜吃面。我说吃完你告诉我，把事情原原本本说清楚，成吗？他说好，我跟你说。<br>　　<br>　　整个一过程怎么杀他的爹妈，跟我推测的八九不离十。案发当天，他在楼下喝着闷酒，因为父母不同意自己和罗美华在一起，所以心里特别郁闷。喝了六七瓶之后他就晃晃悠悠回家了，还拎了两瓶回去，结果心里越想越憋屈，最后决定把老两口全都杀了，这样就再也没人阻拦自己了。<br>　　<br>　　他先朝他爹动的手，反过来又扎他妈，扎的过程当中，他认为老头儿死了，可实际上不一会儿老头儿醒了，没死，冥冥当中起来了。起来往外跑、呼救，他那会儿急了，拿个领带先把老太太勒死了，勒完之后，拿过刀来又把老头给干躺下了，老头就扑到了地下，他又补了几刀，彻底死了。<br>　　<br>　　而这一切的起因，陈晨是这么说的：是因为他们阻碍他跟罗美华爱情的发展，只要把他们杀了，他就能跟罗美华私奔了。他思考了三天，最后下定决心，喝酒到半夜，上楼把他爹妈给干了。他说，他在他的家庭里从没得到过爱。所有的爱，都是明码标价的。譬如你得考第一名，譬如你得上名牌大学，譬如你得工作得特别风光，等等等等。<br>　　<br>　　他们不考虑他需要什么，只考虑自己怎样脸上有光。陈晨说，我遇到罗美华，遇到妹妹，只有那一刻，我看到了希望，我要组织我自己的家庭，我要当个好父亲，我没享受到的，我都要给妹妹。我只能杀了他们，不杀他们我逃不掉的，我就毁了。我毁了，妹妹怎么办？美华怎么办？<br>　　<br>　　多幼稚的想法。你都觉得不可置信。正常人遇到这种情况，一个大小伙子，能挣钱能立业，大不了跟原生家庭闹翻了，谁也不会想到杀人啊！更何况是杀父母。但夏新亮跟我说，刘哥，我前期跟他做问讯，我一问到有关他父母的事，他虽然不说话，但我能感觉到由他身体里发散出的恶意。<br>　　<br>　　孩子不是私人物品，他是有脾性、有思维的独立个体，长期被禁锢，就导致他心理出现了缺陷。孩子不是给吃给喝就可以满足的，也不是生活在笼中的金丝雀，更何况，金丝雀还向往天空呢。杀人是一个异常决绝的方式，但却是他眼中唯一的选择。<br>　　<br>　　至少在他看来，就是唯一的选择，他的应激反应出现偏差了。他是一只青蛙，始终蹲在一个叫作“家”的井里。这个井是他全部的世界。这个井，是一个强权的世界。你吃什么、你喝什么、你穿什么、你干吗都要按照父母的话来。可以说，陈晨时时刻刻处于一种紧张之中，而一旦这个紧张达到峰值，这个人就炸了。<br>　　<br>　　炸了。而导火索正是罗美华母女的出现。他进入她们的世界，他不再是那只井底之蛙，他不再处于强权之下，他感受到了可以主宰自己的感觉，这让他沉迷，继而无法自拔。这也符合他的交代——我没想怎么她们，我就想带她们去看看这个世界诸多的美好，我想负担她们母女二人的生活，我不想她们终日跟一个冷漠的父亲在一起，她们值得更好的。<br>　　<br>　　对，在他眼中，罗美华跟他一样不自由。<br>　　<br>　　溺爱的代价，这就是溺爱的代价。怎么叫溺爱呢？从小衣食无忧，爷爷奶奶惯着长大，父母给操持所有，最后这孩子反过来把爹妈给杀了，还如此冷静。这就是中国教育溺爱的代价，非常溺爱，一旦有反抗，就是血腥的。他没经过反叛期，非常乖的一个孩子，特别听父母的话。反倒把父母给杀了。<br>　　<br>　　你说这是谁的错？对父母来说，他们意识不到过度的保护是伤害；对孩子来说，他意识不到这种禁锢和不自由全部出于爱。这个爱，来自双方的爱都太廉价了，以至于撕毁它，竟没人感到心疼。<br>　　<br>　　如果仇恨这东西有恒定量，那亲人之间的仇，一定压倒性战胜与敌人之间的恨。未必人人有敌人，但人人都有父母。大家朝夕相处，摩擦只会多不会少。爱之深，责之切，继而陷入仇海。多少人，对父母是一边念恩一边记仇的？谁都知道应该选择原谅，可偏偏就是做不到。<br>　　<br>　　这是许多人一生都难以跟自己和解的愁与怨。年少时，你还幼稚，不知道自己可以跟父母讲道理；长大了，你成熟了，试图与他们沟通讲道理，但他们却充耳不闻，你们仍旧陷于统治与被统治的境况。夏新亮那话是对的，不是人人都适合当父母，当父母不仅仅是养育，更需要包容、耐心、平等地对待孩子。你做不到的，要求他做到；你受了气，拿他们出气；你的人生都没多成功，凭什么要求他们就一定飞黄腾达？说到底，你究竟在找补些什么呢？<br>　　<br>　　咱们的教育到底出现了什么问题？血淋淋的代价值得思考。虽然破了杀父弑母的这个案子，但我感觉整个人都不好了。我觉得我的脑海开了锅，里面翻腾的东西太多。<br>　　<br>　　自己把自己给逼死了。家，本来是避风的港湾，却活脱脱成了人间炼狱。<br>　　<br>　　到底是什么把人给毁成这样？你说陈晨真就是个坏孩子吗？不是，是个很乖的孩子。但他一旦朝你发起攻势，却是毁灭性的。<br>　　<br>　　我搞案子这么些年，正儿八经的杀人案，恶毒的也有，但是急性的案件，全是那种特别冷静的人、内向的人干的。这个陈晨，他的整个杀人过程是预谋好的，他不属于激情犯罪。他思想到了一个临界点的时候，假若突然有人给他叫醒，兴许这个事儿就醒了。可在这个临界点，他跟他父母，还在纠缠这些东西，他跟罗美华也还在纠缠这些东西。双方如果有一方退一步的话，这个事儿就不会发生了。<br>　　<br>　　这个案件涉及人性、爱情、亲情，这些东西，反反复复在我的脑海里纠缠。这些本应是世界上最美好的事物，怎么最后就孕育出了犯罪？</p>]]></content>
    
    
    <categories>
      
      <category>每日故事</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>记录搭建hexo博客</title>
    <link href="/2021/09/26/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/09/26/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="第一步安装Nodejs和git"><a href="#第一步安装Nodejs和git" class="headerlink" title="第一步安装Nodejs和git"></a>第一步安装Nodejs和git</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pkg <span class="hljs-keyword">install</span> nodejs　<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pkg <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></table></figure><h2 id="第二步安装hexo博客-并转移至-storage-emulated-0-blog-文件夹下（手机无root解决方法）"><a href="#第二步安装hexo博客-并转移至-storage-emulated-0-blog-文件夹下（手机无root解决方法）" class="headerlink" title="第二步安装hexo博客  并转移至/storage/emulated/0/blog 文件夹下（手机无root解决方法）"></a>第二步安装hexo博客  并转移至/storage/emulated/0/blog 文件夹下（手机无root解决方法）</h2><p><strong>①参考以下视频进行博客安装既转移至blog文件夹。</strong><br><video id="video" controls="" preload="none" poster="http://img.blog.fandong.me/2017-08-26-Markdown-Advance-Video.jpg"></p><source id="mp4" src="https://pan.bilnn.com/api/v3/file/sourcejump/P8XqrzHO/Y4Ey9ViIbaFlZ0vMmGObNCp9yUgr5nTxzs9lvE7Updg*"video/mp4"></video><p>②视频内使用的关键指令有（依次输入）：<br>1，安装hexo博客程序至根目录blog文件夹</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog<br></code></pre></td></tr></table></figure><p>2，进入blog文件夹，初始化并启动hexo博客程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>到这里会给你一个网址，本地访问如果网页打得开说明hexo博客安装成功。<br>3，查看当前博客安装的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>可以看到目前的路径在根目录，手机没有root是无法访问的。<br>4，进入想要安装博客的新位置，比如我这里是/storage/emulated/0/</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/0/</span><br></code></pre></td></tr></table></figure><p>5，转移博客储存路径，注意需要先给Termux程序储存权限（给予后重启软件，再次进入软件需要重复一次4步骤），并且保证在这个路径下没有同名文件夹。<br>创建文件夹</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir blog<br></code></pre></td></tr></table></figure><p>进入文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/0/</span>blog<br></code></pre></td></tr></table></figure><p>检测当前路径是否为/storage/emulated/0/blog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>再次安装hexo博客程序（等待片刻）</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>这时候会出现<strong>报错提示</strong>，咱们进入blog文件夹，<strong>删除node开头的那个文件夹</strong><br>接下来是<strong>关键重要指令</strong>：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">npm</span> <span class="hljs-comment">install</span> --<span class="hljs-comment">save</span> --<span class="hljs-comment">no</span><span class="hljs-literal">-</span><span class="hljs-comment">bin</span><span class="hljs-literal">-</span><span class="hljs-comment">links</span><br></code></pre></td></tr></table></figure><p>初始化hexo程序</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><p>运行hexo程序</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>这时候就会出现上面第一次安装一样的提示本地网址，进入网址如果能打开说明转移成功了！<br>pwd再次检测路径是否为：/storage/emulated/0/blog</p><h2 id="第三步将本地hexo博客程序部署于GitHub（其他静态代码托管平台同理）"><a href="#第三步将本地hexo博客程序部署于GitHub（其他静态代码托管平台同理）" class="headerlink" title="第三步将本地hexo博客程序部署于GitHub（其他静态代码托管平台同理）"></a>第三步将本地hexo博客程序部署于GitHub（其他静态代码托管平台同理）</h2><p>①安装部署插件（因为部署仓库需要插件）</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>②在GitHub上创建一个同用户名的仓库（用户名.github.io）</p><p>③更改_config.yml文件<br>打开_config.yml文件，将最后几行进行更改为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git仓库项目地址<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>git仓库项目地址，就是进入仓库首页有个ssh选项的地址，点击复制然后粘贴入repo后面即可。</p><p>④添加ssh秘钥<br>ssh钥匙的作用是给予终端上传文件的权限<br>1，生成ssh密匙</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email 你GitHub账号的邮箱</span><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name 你GitHub账号的名字</span><br></code></pre></td></tr></table></figure><p>生成密匙至根目录</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C 你的邮箱<br></code></pre></td></tr></table></figure><p>中间要按3次回车<br>第一个是保存地址<br>第二个就是你github的密码<br>第三个是确认密码</p><p>指令如果不报错的话，会给你一个密匙路径<br>如：/date/date开头，文件名是id_rsa.pub。<br>这个样子手机没root是无法访问的，所以输入下面这个<strong>关键指令：</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br></code></pre></td></tr></table></figure><p>终端会会输出刚才生成的ssh密匙<br>将其全部复制下来</p><p>2，将密匙添加到GitHub仓库上<br>打开GitHub，进入刚才创建的同用户名仓库，进入设置页面，打开SSH and GPG keys，点击New SSH key，输入SSH key的名字，随便取，再输入刚才复制的SSH key，点击Add SSH key就添加好了。</p><p>3，上传至GitHub<br>生成静态网页</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><p>上传至GitHub仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>然后记得把设置中的Github Page里的分支改成master就好了，如果已经是这样了那就不用改了。</p><p>最后访问 <code>你的用户名.github.io</code>，如果可以加载出来说明一个hexo博客已经搭建成功了！</p><p>看完之后是不是感觉很简单，确实我搭建成功之后就感觉很简单了，但是你绝对想不到我折腾这玩意儿折腾了一个晚上加一个上午，总算是折腾明白了，搭建成功之后就连忙写了这个文章以防自己忘记哈哈。</p><h2 id="简单使用hexo博客写作教程"><a href="#简单使用hexo博客写作教程" class="headerlink" title="简单使用hexo博客写作教程"></a>简单使用hexo博客写作教程</h2><p><img src="https://yonggangougoubupakunnan0.coding.net/p/tuchuang001/d/tc1/git/raw/master/2021-09-26/Screenshot_20210926_164047.jpg" alt="2021 09 17"></p><p>1，每次无论 <code>hexo g</code> （上传）或 <code>hexo s</code>（本地部署），都最好先使用 <code>hexo clean</code>（清除缓存）；<br>2，页面结果以本地 <code>hexo s</code> 为准，部署后的异常大部分是缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；<br>3，上传至Github顺序：source/_posts文件夹下创建一个 Markdown 文件&gt;<code>hexo s</code> 本地部署&gt;<code>hexo g</code> 上传<br>4，当创建博客时，就会以这种格式生成Markdown文件，如这篇博客的文件名就生成 xxx.md 这种形式。其中相关变量说明如下表：</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>：title</td><td>标题（小写， 空格将会被替换为短杠）</td></tr><tr><td>:year</td><td>创建的年份，如：2017</td></tr><tr><td>:month</td><td>创建的月份（有前导零），如：01</td></tr><tr><td>:i_month</td><td>创建的月份（无前导零），如：1</td></tr><tr><td>:day</td><td>创建的日期（有前导零），如：09</td></tr><tr><td>:i_day</td><td>创建的月份（无前导零），如：9</td></tr></tbody></table><p>5，经过上面上面一系列的准备工作，现在差不多就可以安心的写作了。打开 source/_posts 文件夹下刚创建的 Markdown 文件，你会发现有如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs auto">---<br>title: hexo-blog<br>date: 2017-01-13 16:07:32<br>tags: <br>---<br></code></pre></td></tr></table></figure><p>注意，这里的 title 是可以随便改的，当然了 date 也是可以改，不过没有改的必要；这里要说一下 tags 这个属性（标签），如果需要配置多个有两种方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">tags: [tag1, tag2, tag3]<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs auto">tags:<br>  - tag1<br>  - tag2<br>  - tag3<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>web前端入门</title>
    <link href="/2021/09/07/web%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/"/>
    <url>/2021/09/07/web%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识WEB"><a href="#一、认识WEB" class="headerlink" title="一、认识WEB"></a>一、认识WEB</h2><h2 id="1-1、-认识网页"><a href="#1-1、-认识网页" class="headerlink" title="1. 1、 认识网页"></a>1. 1、 认识网页</h2><p>网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。 <img src="https://img-blog.csdnimg.cn/img_convert/4b9ba080a22c62a1f7f2402a910e7911.png" alt="web"></p><h2 id="1-2、浏览器"><a href="#1-2、浏览器" class="headerlink" title="1.2、浏览器"></a>1.2、浏览器</h2><p>浏览器是网页显示、运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。 <img src="https://img-blog.csdnimg.cn/img_convert/a8fca6d1b19d0ef41134291e103887e3.png" alt="b"> 可能你最熟悉的是 IE浏览器，但是他的相应速度实在是太慢了。 <img src="https://img-blog.csdnimg.cn/img_convert/15de3d1461c1d8ebfa86b1ae1efb13cf.png" alt="liulan"> 我们可以通过百度的<a href="https://tongji.baidu.com/research/site?source=index">流量研究院</a>来查看目前浏览器的市场占比,2008年，大名鼎鼎的互联网巨头Google公司发布了它的首款浏览器Chrome浏览器。 跟王思聪一样，没办法，生下来人家就是富二代官二代啊，后台太强，而且确实先天能力得天独厚。 出自谷歌，唯我不败；一统江湖，千秋万代。 <img src="https://img-blog.csdnimg.cn/img_convert/6812743940ef9e366892d0319b2c6e2e.png" alt="image-20210705154913849"></p><h2 id="1-3、常见浏览器内核"><a href="#1-3、常见浏览器内核" class="headerlink" title="1.3、常见浏览器内核"></a>1.3、常见浏览器内核</h2><p>浏览器内核，英文叫做：Rendering Engine，中文翻译很多，排版引擎、解释引擎、渲染引擎，现在流行称为浏览器内核。他负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。目前浏览器多种多样， 但是现在主要流行的就是下面几个：</p><p>浏览器</p><p>内核</p><p>备注</p><p>IE</p><p>Trident</p><p>IE、猎豹安全、360极速浏览器、百度浏览器</p><p>firefox</p><p>Gecko</p><p>可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</p><p>Safari</p><p>webkit</p><p>现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了）。苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</p><p>chrome</p><p>Chromium/Blink</p><p>在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</p><p>Opera</p><p>blink</p><p>现在跟随chrome用blink内核。</p><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。他有两大阵营：</p><ol><li> Android手机而言，使用率最高的就是Webkit内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。</li><li> iOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是Safari或者IE内核Trident的。</li></ol><h2 id="1-4、Web标准"><a href="#1-4、Web标准" class="headerlink" title="1.4、Web标准"></a>1.4、Web标准</h2><p>Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。W3C 万维网联盟是国际最著名的标准化组织。1994年成立后，至今已发布近百项相关万维网的标准，对万维网发展做出了杰出的贡献。<strong>W3C就类似于现实世界中的联合国。</strong></p><h3 id="1-4-1、为什么要遵循WEB标准"><a href="#1-4-1、为什么要遵循WEB标准" class="headerlink" title="1.4.1、为什么要遵循WEB标准"></a>1.4.1、为什么要遵循WEB标准</h3><p>通过以上浏览器不同内核不同，我们知道他们显示页面或者排版就有些许差异，所以我们需要制定一个统一的标注来展示统一的内容 <img src="https://img-blog.csdnimg.cn/img_convert/7ccd6cfeb7992cca20e43b721a91b64f.png" alt="bz"></p><h3 id="1-4-2、Web-标准的好处"><a href="#1-4-2、Web-标准的好处" class="headerlink" title="1.4.2、Web 标准的好处"></a>1.4.2、Web 标准的好处</h3><p>遵循web标准可以让不同我们写的页面更标准更统一外，还有许多优点：</p><ol><li> 让Web的发展前景更广阔。</li><li> 内容能被更广泛的设备访问。</li><li> 更容易被搜寻引擎搜索。</li><li> 降低网站流量费用。</li><li> 使网站更易于维护。</li><li> 提高页面浏览速度。</li></ol><h3 id="1-4-3、Web-标准构成"><a href="#1-4-3、Web-标准构成" class="headerlink" title="1.4.3、Web 标准构成"></a>1.4.3、Web 标准构成</h3><p>web标注主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。通俗来说就是HTML、CSS、JS。</p><p>标准</p><p>说明</p><p>备注</p><p>结构</p><p>结构用于对<strong>网页元素</strong>进行整理和分类，咱们主要学的是HTML。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b4595171f6a909fc077ca03c223423d6.png" alt="htmll"></p><p>表现</p><p>表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，主要指的是CSS</p><p><img src="https://img-blog.csdnimg.cn/img_convert/98c5425544e1b271483168ac7c80633f.png" alt="css"></p><p>行为</p><p>行为是指网页模型的定义及<strong>交互</strong>的编写，咱们主要学的是 Javascript</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1edfdd9346abb7f7f6e2599b1861a9a4.gif" alt="search"></p><h3 id="1-4-4、总结"><a href="#1-4-4、总结" class="headerlink" title="1.4.4、总结"></a>1.4.4、总结</h3><ul><li>  web标准有三层结构，分别是结构（html）、表现（css）和行为（javascript）。</li><li>  结构类似人的身体， 表现类似人的着装， 行为类似人的行为动作。</li><li>  理想状态下，他们三层都是独立的， 放到不同的文件里面。</li></ul><h2 id="1-5、html5的发展之路"><a href="#1-5、html5的发展之路" class="headerlink" title="1.5、html5的发展之路"></a>1.5、html5的发展之路</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/31243b0805836cbca2ff0e0a1a255173.png" alt="html5"></p><h2 id="1-6、XHTML"><a href="#1-6、XHTML" class="headerlink" title="1.6、XHTML"></a>1.6、XHTML</h2><p>XHTML可扩展超文本标记语言（英语：eXtensible HyperText Markup Language，XHTML），是一种标记语言，表现方式与超文本标记语言（HTML）类似，不过语法上更加严格。从继承关系上讲，HTML是一种基于标准通用标记语言（SGML）的应用，是一种非常灵活的置标语言，而XHTML则基于可扩展标记语言（XML），XML是SGML的一个子集。XHTML 1.0在2000年1月26日成为W3C的推荐标准。</p><h2 id="二、HTML骨架"><a href="#二、HTML骨架" class="headerlink" title="二、HTML骨架"></a>二、HTML骨架</h2><h2 id="2-1、HTML定义"><a href="#2-1、HTML定义" class="headerlink" title="2.1、HTML定义"></a>2.1、HTML定义</h2><p>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)是用来描述网页的一种语言。HTML 不是一种编程语言，而是一种标记语言 (markup language)，标记语言是一套标记标签 (markup tag)。网页是由网页元素组成的 ， 这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户了。 <strong>所谓超文本，有2层含义：</strong></p><ol><li> 因为它可以加入图片、声音、动画、多媒体等内容（**超越文本限制 **）。</li><li> 不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（**超级链接文本 **）。</li></ol><h2 id="2-2、HTML骨架标签"><a href="#2-2、HTML骨架标签" class="headerlink" title="2.2、HTML骨架标签"></a>2.2、HTML骨架标签</h2><p>日常生活的书信，我们要遵循共同的约定。 不然会看起来很没有格式，一点都不易于阅读。 <img src="https://img-blog.csdnimg.cn/img_convert/93381d5a7135ab154088f264bdfe0526.png" alt="mess"> HTML 有自己的语言语法骨架格式，他是我们入门学习HTML的第一步。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签名</p><p>定义</p><p>说明</p><p>HTML标签</p><p>页面中最大的标签，我们成为 根标签</p><p>文档的头部</p><p>注意在head标签中我们必须要设置的标签是title</p><p>文档的标题</p><p>让页面拥有一个属于自己的网页标题</p><p>文档的主体</p><p>元素包含文档的所有内容，页面内容 基本都是放到body里面的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/351f6dcdb7918d33e72c2bede23be1dc.png" alt="01html骨架"> HTML标签名、类名、标签属性和大部分属性值统一用小写。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-3、标签"><a href="#2-3、标签" class="headerlink" title="2.3、标签"></a>2.3、标签</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">在<span class="hljs-selector-tag">HTML</span>页面中，带有“&lt; &gt;”符号的元素被称为<span class="hljs-selector-tag">HTML</span>标签，如上面提到的<br></code></pre></td></tr></table></figure><p>、、都是HTML骨架结构标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">HTML标签名、类名、标签属性和大部分属性值统一用小写。<br></code></pre></td></tr></table></figure><h2 id="2-4、元素分类"><a href="#2-4、元素分类" class="headerlink" title="2.4、元素分类"></a>2.4、元素分类</h2><h3 id="2-4-1、常规元素（双标签）"><a href="#2-4-1、常规元素（双标签）" class="headerlink" title="2.4.1、常规元素（双标签）"></a>2.4.1、常规元素（双标签）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签名&gt; 内容 &lt;/标签名&gt;<br><span class="hljs-comment">&lt;!--示范--&gt;</span><br>我是文字<br></code></pre></td></tr></table></figure><ul><li>  该语法中<code>&lt;标签名&gt;</code>表示该标签的作用开始，一般称为<code>开始标签（start tag）</code>，<code>&lt;/标签名&gt;</code>表示该标签的作用结束，一般称为<code>结束标签（end tag）</code>。</li><li>  和开始标签相比，结束标签只是在前面加了一个关闭符<code>/</code>。</li><li>  我们以后接触的基本都是双标签。</li></ul><h3 id="2-4-2、空元素（单标签）"><a href="#2-4-2、空元素（单标签）" class="headerlink" title="2.4.2、空元素（单标签）"></a>2.4.2、空元素（单标签）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签名 /&gt;<br><span class="hljs-comment">&lt;!--示范--&gt;</span><br><br></code></pre></td></tr></table></figure><p>空元素用单标签来表示， 简单点说，就是里面不需要包含内容， 只有一个开始标签不需要关闭。这种<strong>单身狗标签非常少</strong>，一共没多少，我们多记忆就好。</p><h2 id="2-5、HTML标签关系"><a href="#2-5、HTML标签关系" class="headerlink" title="2.5、HTML标签关系"></a>2.5、HTML标签关系</h2><p>主要针对于<strong>双标签</strong> 的相互关系分为两种：</p><ol><li> 嵌套关系</li><li> 并列关系</li></ol><h3 id="2-5-1、嵌套关系"><a href="#2-5-1、嵌套关系" class="headerlink" title="2.5.1、嵌套关系"></a>2.5.1、嵌套关系</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">类似于父子关系。<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><br></code></pre></td></tr></table></figure><h3 id="2-5-2、并列关系"><a href="#2-5-2、并列关系" class="headerlink" title="2.5.2、并列关系"></a>2.5.2、并列关系</h3><p>类似于兄弟关系。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><br></code></pre></td></tr></table></figure><h3 id="2-5-3、总结"><a href="#2-5-3、总结" class="headerlink" title="2.5.3、总结"></a>2.5.3、总结</h3><ol><li> 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。</li><li> 如果是并列关系，最好上下对齐。</li></ol><h2 id="2-6、文档类型"><a href="#2-6、文档类型" class="headerlink" title="2.6、文档类型"></a>2.6、文档类型</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--用法--&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">他的作用是声明位于文档中的最前面的位置，处于标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。<br></code></pre></td></tr></table></figure><h2 id="2-7、页面语言"><a href="#2-7、页面语言" class="headerlink" title="2.7、页面语言"></a>2.7、页面语言</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--指定html语言种类--&gt;</span><br><span class="hljs-comment">&lt;!--指定该html标签 内容 所用的语言为中文，考虑浏览器和操作系统的兼容性，目前仍然使用 zh-CN 属性值--&gt;</span>```<br><br>最常见的有两个值：<br><br>1. <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>定义语言为英语。<br>2. <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>定义语言为中文。<br><br>## 2.8、字符集<br><br>字符集(Character set)是多个字符的集合。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。<br><br>```html<br><span class="hljs-comment">&lt;!--这句话是让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。--&gt;</span><br><br></code></pre></td></tr></table></figure><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p><ul><li>  gb2312 简单中文 包括6763个汉字 GUO BIAO</li><li>  BIG5 繁体中文 港澳台等用</li><li>  GBK包含全部中文字符 是GB2312的扩展，加入对繁体字的支持，兼容GB2312</li><li>  UTF-8则基本包含全世界所有国家需要用到的字符</li><li>  <strong>这句代码非常关键， 是必须要写的代码，否则可能引起乱码的情况。</strong></li></ul><h2 id="三、HTML常用标签"><a href="#三、HTML常用标签" class="headerlink" title="三、HTML常用标签"></a>三、HTML常用标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。<br></code></pre></td></tr></table></figure><h2 id="3-1、排版标签"><a href="#3-1、排版标签" class="headerlink" title="3.1、排版标签"></a>3.1、排版标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><h3 id="3-1-1、标题标签"><a href="#3-1-1、标题标签" class="headerlink" title="3.1.1、标题标签"></a>3.1.1、标题标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题（h1~h6）<br></code></pre></td></tr></table></figure><p><strong>标题标签语义：</strong> 作为标题使用，并且依据重要性递减</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>h1<span class="hljs-symbol">&amp;gt;</span> 标题文本 <span class="hljs-symbol">&amp;lt;</span>/h1<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>h2<span class="hljs-symbol">&amp;gt;</span> 标题文本 <span class="hljs-symbol">&amp;lt;</span>/h2<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>h3<span class="hljs-symbol">&amp;gt;</span> 标题文本 <span class="hljs-symbol">&amp;lt;</span>/h3<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>h4<span class="hljs-symbol">&amp;gt;</span> 标题文本 <span class="hljs-symbol">&amp;lt;</span>/h4<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>h5<span class="hljs-symbol">&amp;gt;</span> 标题文本 <span class="hljs-symbol">&amp;lt;</span>/h5<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>h6<span class="hljs-symbol">&amp;gt;</span> 标题文本 <span class="hljs-symbol">&amp;lt;</span>/h6<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a0c9df43e0f4f6ea10ae3de32ffd53f7.png" alt="h"></p><h3 id="3-1-2、段落标签"><a href="#3-1-2、段落标签" class="headerlink" title="3.1.2、段落标签"></a>3.1.2、段落标签</h3><p>段落标签可以把 HTML 文档分割为若干段落，在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>p<span class="hljs-symbol">&amp;gt;</span> 文本内容 <span class="hljs-symbol">&amp;lt;</span>/p<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-3、水平线标签"><a href="#3-1-3、水平线标签" class="headerlink" title="3.1.3、水平线标签"></a>3.1.3、水平线标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<br></code></pre></td></tr></table></figure><hr><p>就是创建横跨网页水平线的标签。他可以在网页中显示默认样式的水平线。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>!--单标签--<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>hr /<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-4、换行标签"><a href="#3-1-4、换行标签" class="headerlink" title="3.1.4、换行标签"></a>3.1.4、换行标签</h3><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>br /<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-5、div和span"><a href="#3-1-5、div和span" class="headerlink" title="3.1.5、div和span"></a>3.1.5、div和span</h3><p><code>div</code>、<code>span</code>是没有语义的，他们是我们网页布局主要的2个盒子。用来装我们网页元素的， 只不过他们有区别。</p><ol><li> <code>div</code>标签 用来布局的，但是现在一行只能放一个<code>div</code>。</li><li> <code>span</code>标签 用来布局的，一行上可以放好多个<code>span</code>。</li></ol><h3 id="3-1-6、排版标签总结"><a href="#3-1-6、排版标签总结" class="headerlink" title="3.1.6、排版标签总结"></a>3.1.6、排版标签总结</h3><p>标签名</p><p>定义</p><p>说明</p><p>标题标签</p><p>作为标题使用，并且依据重要性递减</p><p>段落标签 可以把 HTML 文档分割为若干段落</p><hr><p>水平线标签 没啥可说的，就是一条线 换行标签</p><p>div标签 用来布局的，但是现在一行只能放一个div span标签 用来布局的，一行上可以放好多个span</p><h2 id="3-2、文本格式化标签"><a href="#3-2、文本格式化标签" class="headerlink" title="3.2、文本格式化标签"></a>3.2、文本格式化标签</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p>标签</p><p>显示效果</p><p>和</p><p>文字以<strong>加粗</strong>的形式显示</p><p>和</p><p>文字以_斜体_的形式显示</p><p>和</p><p>文字以加删除线的形式显示</p><p>和</p><p>文字以加下划线的形式显示</p><h2 id="3-3、标签属性"><a href="#3-3、标签属性" class="headerlink" title="3.3、标签属性"></a>3.3、标签属性</h2><p>所谓属性就是<strong>外在特性</strong> 比如 手机的颜色手机的尺寸 、颜色等特征。比如我们描述手机特性是：</p><ul><li>  手机的颜色是黑色。</li><li>  手机的尺寸是 8寸。</li><li>  水平线的长度是 200。</li><li>  图片的宽度 是 300。</li></ul><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>标签名 属性1=&quot;属性值1&quot; 属性2=&quot;属性值2&quot; …<span class="hljs-symbol">&amp;gt;</span> 内容 <span class="hljs-symbol">&amp;lt;</span>/标签名<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>手机 颜色=&quot;红色&quot; 大小=&quot;5寸&quot;<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>/手机<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a0c507039ad1b681092940e16aa9d740.png" alt="sm"></p><h2 id="3-4、图像标签img"><a href="#3-4、图像标签img" class="headerlink" title="3.4、图像标签img"></a>3.4、图像标签img</h2><p>要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签以及和他相关的属性。<strong>（它是一个单身狗）</strong>，他的语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>!-- src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。--<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>img src=&quot;图像URL&quot; /<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>他还有几个常见的其他属性。</p><p>属性</p><p>属性值</p><p>描述</p><p>src</p><p>图片的url地址</p><p>图形的路径</p><p>alt</p><p>文本</p><p>图像不能显示时的替换文本</p><p>title</p><p>文本</p><p>鼠标悬停时显示的内容</p><p>width</p><p>像素</p><p>设置图像的宽度</p><p>height</p><p>像素</p><p>设置图像的高度</p><p>border</p><p>数字</p><p>设置图像边框的宽度</p><p>注意：</p><ol><li> 标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li><li> 属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li> 任何标签的属性都有默认值，省略该属性则取默认值。</li><li> 采取 键值对 的格式 key=“value” 的格式 。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">正常的<span class="hljs-symbol">&amp;lt;</span>br /<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>img src=&quot;cz.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; /<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>br /<span class="hljs-symbol">&amp;gt;</span><br>带有边框的<span class="hljs-symbol">&amp;lt;</span>br /<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>img src=&quot;cz.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; border=&quot;3&quot; /<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>br /<span class="hljs-symbol">&amp;gt;</span><br>有提示文本的<span class="hljs-symbol">&amp;lt;</span>br /<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>img src=&quot;cz.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; border=&quot;3&quot; title=&quot;这是个小蒲公英&quot; /<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>br /<span class="hljs-symbol">&amp;gt;</span><br>有替换文本的<span class="hljs-symbol">&amp;lt;</span>br /<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>img src=&quot;cz.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; border=&quot;3&quot; alt=&quot;图片不存在&quot; /<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-5、链接标签"><a href="#2-5、链接标签" class="headerlink" title="2.5、链接标签"></a>2.5、链接标签</h2><p>在HTML中创建超链接非常简单，只需用标签把文字包括起来就好。他的语法格式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot; rel=&quot;noopener&quot;<span class="hljs-symbol">&amp;gt;</span>文本或图像<span class="hljs-symbol">&amp;lt;</span>/a<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>属性</p><p>作用</p><p>href</p><p>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</p><p>target</p><p>用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p><p>注意：</p><ol><li> 外部链接：需要添加 http:// <a href="http://www.baidu.com/">www.baidu.com</a></li><li> 内部链接：直接链接内部页面名称即可 比如 &lt; a href=“index.html”&gt; 首页</li><li> 如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li><li> 不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li></ol><h2 id="2-6、注释标签"><a href="#2-6、注释标签" class="headerlink" title="2.6、注释标签"></a>2.6、注释标签</h2><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。 注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。注释是给人看的，目的是为了更好的解释这部分代码是干啥的， 程序是不执行这个代码的他的语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>!-- 注释语句 --<span class="hljs-symbol">&amp;gt;</span><br>快捷键是：ctrl + /<br>或者 ctrl +shift + /<br></code></pre></td></tr></table></figure><h2 id="2-7、路径"><a href="#2-7、路径" class="headerlink" title="2.7、路径"></a>2.7、路径</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/06cbc4d9b5c0edb8b8fbc6a9b4e1f117.png" alt="dt"> 实际工作中，我们的文件不能随便乱放，否则用起来很难快速的找到他们，因此我们需要一个文件夹来管理他们。这里有目录文件夹和根目录两个概念：</p><ol><li> 目录文件夹就是普通文件夹，里面只不过存放了我们做页面所需要的 相关素材，比如 html文件， 图片等等。</li><li> 打开目录文件夹的第一层就是根目录。</li></ol><p>页面中的图片会非常多， 通常我们再新建一个文件夹专门用于存放图像文件（images），这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。路径可以分为：</p><ol><li> 相对路径。</li><li> 绝对路径。</li></ol><h3 id="2-7-1、相对路径"><a href="#2-7-1、相对路径" class="headerlink" title="2.7.1、相对路径"></a>2.7.1、相对路径</h3><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><p>路径分类</p><p>符号</p><p>说明</p><p>同一级路径</p><p>只需输入图像文件的名称即可。</p><p>下一级路径</p><p>“/”</p><p>上一级路径</p><p>“…/”</p><p>在文件名之前加入“…/” ，如果是上两级，则需要使用 “…/ …/”，以此类推。</p><p>简单来说，相对路径，是从这个文件出发， 去寻找我们的目标文件的，</p><h3 id="2-7-2、绝对路径"><a href="#2-7-2、绝对路径" class="headerlink" title="2.7.2、绝对路径"></a>2.7.2、绝对路径</h3><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的。她是带有磁盘路径或者是完整地网络地址。</p><h2 id="2-8、特殊字符"><a href="#2-8、特殊字符" class="headerlink" title="2.8、特殊字符"></a>2.8、特殊字符</h2><p>一些特殊的符号，我们再html 里面很难或者 不方便直接 使用， 我们此时可以使用下面的替代代码。 <img src="https://img-blog.csdnimg.cn/img_convert/5d5aa41e639b5cd9c69f5cbb4273c000.png" alt="zifu"> <strong>虽然有很多，但是我们平时用的比较较少， 大家重点记住 空格 、大于号、小于号，基本上就可以了，剩下的回来查阅。</strong> <strong>总结：</strong></p><ol><li> 是以<strong>运算符</strong><code>&amp;</code>开头,以<strong>分号运算符</strong><code>;</code>结尾。</li><li> 他们不是标签，而是符号。</li><li> HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体。</li></ol><h2 id="四、表格"><a href="#四、表格" class="headerlink" title="四、表格"></a>四、表格</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/0536fac0acd75fd1601b88519f21a7a0.png" alt="ttt"></p><h2 id="4-1、表格的作用"><a href="#4-1、表格的作用" class="headerlink" title="4.1、表格的作用"></a>4.1、表格的作用</h2><p>表格的现在还是较为常用的一种标签，但不是用来布局，**常见显示、展示表格式数据。**因为它可以让数据显示的非常的规整，可读性非常好。 一个清爽简约的表格能够把繁杂的数据表现得很有条理，虽然 div 布局也可以做到，但是总没有表格来得方便。拿最近火爆的基金来说（需要这个脚本的可以私聊我）： <img src="https://img-blog.csdnimg.cn/img_convert/453c43db1d99b7d9339055e656b30d63.png" alt="image-20210715161315737"></p><h2 id="4-2、创建表格"><a href="#4-2、创建表格" class="headerlink" title="4.2、创建表格"></a>4.2、创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>table<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>单元格内的文字<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br>...<br><span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br>...<br><span class="hljs-symbol">&amp;lt;</span>/table<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>在上面的语法中包含基本的三对HTML标签，分别为 table、tr、td，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释</p><ol><li>table用于定义一个表格标签。</li><li>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</li><li>td 用于定义表格中的单元格，必须嵌套在</li></ol><p>标签中。</p><ol><li> 字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/072f3892cdd3dbe9cdc677d942a93610.png" alt="07table基本结构"></p><h2 id="4-3、表格属性"><a href="#4-3、表格属性" class="headerlink" title="4.3、表格属性"></a>4.3、表格属性</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/9ecd85259debac8223a41f2425212ef1.png" alt="tt"> 表格有部分属性我们不常用，这里重点记住 cellspacing 、 cellpadding。 <img src="https://img-blog.csdnimg.cn/img_convert/9b89a9cba54d6e5ab4012c6c47ceb19d.png" alt="07table表格属性"></p><h2 id="4-4、案例一"><a href="#4-4、案例一" class="headerlink" title="4.4、案例一"></a>4.4、案例一</h2><p>我们说了这么多，光说不练是不行滴，下面我们来做一个简单的案例来巩固一下。 <img src="https://img-blog.csdnimg.cn/img_convert/967d59584be3370a453229db764ad5e5.png" alt="表格效果01"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>table width=&quot;500&quot; height=&quot;300&quot; border=&quot;1&quot; cellpadding=&quot;20&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>th<span class="hljs-symbol">&amp;gt;</span>姓名<span class="hljs-symbol">&amp;lt;</span>/th<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>th<span class="hljs-symbol">&amp;gt;</span>性别<span class="hljs-symbol">&amp;lt;</span>/th<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>th<span class="hljs-symbol">&amp;gt;</span>年龄<span class="hljs-symbol">&amp;lt;</span>/th<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>刘德华<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>男<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>55<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>郭富城<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>男<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>52<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>张学友<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>男<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>58<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>黎明<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>男<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>18<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>刘晓庆<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>女<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>63<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>/table<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-5、表头标签"><a href="#4-5、表头标签" class="headerlink" title="4.5、表头标签"></a>4.5、表头标签</h2><p>一般表头单元格位于表格的第一行或第一列，并且文本加粗居中。 如果我们想定义表头，只需用表头标签   替代相应的单元格标签   即可，th也是一个单元格 只不过和普通的td单元格不一样，它会让自己里面的文字居中且加粗。 <img src="https://img-blog.csdnimg.cn/img_convert/2db43e45e493c6d624891857b462758a.png" alt="th"> <img src="https://img-blog.csdnimg.cn/img_convert/d6e2f7bdc06d3de7a4e24896494f1f65.png" alt="tht"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>table width=&quot;500&quot; border=&quot;1&quot; align=&quot;center&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>th<span class="hljs-symbol">&amp;gt;</span>姓名<span class="hljs-symbol">&amp;lt;</span>/th<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>th<span class="hljs-symbol">&amp;gt;</span>性别<span class="hljs-symbol">&amp;lt;</span>/th<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>th<span class="hljs-symbol">&amp;gt;</span>电话<span class="hljs-symbol">&amp;lt;</span>/th<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>小王<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>女<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>110<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>小明<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>男<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span>120<span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>/table<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-6、表格标题"><a href="#4-6、表格标题" class="headerlink" title="4.6、表格标题"></a>4.6、表格标题</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/8a468acc1f05e0ee7e413c4044eb6092.png" alt="pa"> 如果我们想画一个带标题的表格怎么办，也很简单，只需使用标签进行定义即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>table<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>caption<span class="hljs-symbol">&amp;gt;</span>我是表格标题<span class="hljs-symbol">&amp;lt;</span>/caption<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>/table<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ol><li> caption 元素定义<strong>表格标题</strong>，通常这个标题会被居中且显示于表格之上。</li><li> caption 标签必须紧随 table 标签之后。</li><li> 这个标签只存在 表格里面才有意义。</li></ol><h2 id="4-7、合并单元格"><a href="#4-7、合并单元格" class="headerlink" title="4.7、合并单元格"></a>4.7、合并单元格</h2><h3 id="4-7-1、概述"><a href="#4-7-1、概述" class="headerlink" title="4.7.1、概述"></a>4.7.1、概述</h3><p>合并单元格是我们比较常用的一个操作，但是不会合并的很复杂。我们一般有两种方式进行合并：</p><ol><li> 跨行合并：rowspan=“合并单元格的个数” 。</li><li> 跨列合并：colspan=“合并单元格的个数”。</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/dfa3e6f5380bcbe284d41e212a4ab8bb.png" alt="08table合并单元格"></p><h3 id="4-7-2、合并单元格三步曲"><a href="#4-7-2、合并单元格三步曲" class="headerlink" title="4.7.2、合并单元格三步曲"></a>4.7.2、合并单元格三步曲</h3><ol><li> 先确定是跨行还是跨列合并。</li><li> 根据 先上 后下 先左 后右的原则找到目标单元格 然后写上 合并方式 还有 要合并的单元格数量 比如 ：</li></ol><p> </p><ol><li> 删除多余的单元格 单元格</li></ol><h2 id="4-8、表格划分结构"><a href="#4-8、表格划分结构" class="headerlink" title="4.8、表格划分结构"></a>4.8、表格划分结构</h2><p>对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用：thead、tbody、tfoot来标注， 这样更好的分清表格结构。 <img src="https://img-blog.csdnimg.cn/img_convert/26d624c716bbf3591d4f8c24f20a73a2.png" alt="thead"></p><h2 id="4-9、总结"><a href="#4-9、总结" class="headerlink" title="4.9、总结"></a>4.9、总结</h2><p>标签名</p><p>定义</p><p>说明</p><p>表格标签 就是一个四方的盒子 表格行标签 行标签要再table标签内部才有意义   单元格标签 单元格标签是个容器级元素，可以放任何东西   表头单元格标签 它还是一个单元格，但是里面的文字会居中且加粗   表格标题标签 表格的标题，跟着表格一起走，和表格居中对齐 clospan 和 rowspan 合并属性 用来合并单元格的</p><h2 id="五、列表"><a href="#五、列表" class="headerlink" title="五、列表"></a>五、列表</h2><p>列表最大的特点就是 整齐 、整洁、 有序，跟表格类似，但是他可组合自由度会更高。</p><h2 id="5-1、无序列表-ul"><a href="#5-1、无序列表-ul" class="headerlink" title="5.1、无序列表 ul"></a>5.1、无序列表 ul</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>ul<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>li<span class="hljs-symbol">&amp;gt;</span>列表项1<span class="hljs-symbol">&amp;lt;</span>/li<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>li<span class="hljs-symbol">&amp;gt;</span>列表项2<span class="hljs-symbol">&amp;lt;</span>/li<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>li<span class="hljs-symbol">&amp;gt;</span>列表项3<span class="hljs-symbol">&amp;lt;</span>/li<span class="hljs-symbol">&amp;gt;</span><br>......<br><span class="hljs-symbol">&amp;lt;</span>/ul<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>例如新闻是没有顺序的，不用排队，先到先得，后发布先显示。 <img src="https://img-blog.csdnimg.cn/img_convert/844c217576a8d8d564c5bf3f8e2e7201.png" alt="ul"> 总结： 1. 中只能嵌套</p><p>，直接在 标签中输入其他标签或者文字的做法是不被允许的。 2.</p><ul><li>  与</li></ul><p>之间相当于一个容器，可以容纳所有元素。 3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</p><h2 id="5-2、有序列表-ol"><a href="#5-2、有序列表-ol" class="headerlink" title="5.2、有序列表 ol"></a>5.2、有序列表 ol</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/5a166818d08b40dd22997300dd73ffa2.png" alt="gold"> 有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>ol<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>li<span class="hljs-symbol">&amp;gt;</span>列表项1<span class="hljs-symbol">&amp;lt;</span>/li<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>li<span class="hljs-symbol">&amp;gt;</span>列表项2<span class="hljs-symbol">&amp;lt;</span>/li<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>li<span class="hljs-symbol">&amp;gt;</span>列表项3<span class="hljs-symbol">&amp;lt;</span>/li<span class="hljs-symbol">&amp;gt;</span><br>......<br><span class="hljs-symbol">&amp;lt;</span>/ol<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>所有特性基本与ul 一致。 但是实际中比 无序列表 用的少很多。</p><h2 id="5-3、自定义列表"><a href="#5-3、自定义列表" class="headerlink" title="5.3、自定义列表"></a>5.3、自定义列表</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/1c8464bd246fec66aebeccdfc371c411.png" alt="2"> 定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>dl<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>dt<span class="hljs-symbol">&amp;gt;</span>名词1<span class="hljs-symbol">&amp;lt;</span>/dt<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>dd<span class="hljs-symbol">&amp;gt;</span>名词1解释1<span class="hljs-symbol">&amp;lt;</span>/dd<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>dd<span class="hljs-symbol">&amp;gt;</span>名词1解释2<span class="hljs-symbol">&amp;lt;</span>/dd<span class="hljs-symbol">&amp;gt;</span><br>...<br><span class="hljs-symbol">&amp;lt;</span>dt<span class="hljs-symbol">&amp;gt;</span>名词2<span class="hljs-symbol">&amp;lt;</span>/dt<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>dd<span class="hljs-symbol">&amp;gt;</span>名词2解释1<span class="hljs-symbol">&amp;lt;</span>/dd<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>dd<span class="hljs-symbol">&amp;gt;</span>名词2解释2<span class="hljs-symbol">&amp;lt;</span>/dd<span class="hljs-symbol">&amp;gt;</span><br>...<br><span class="hljs-symbol">&amp;lt;</span>/dl<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><h2 id="5-4、列表总结"><a href="#5-4、列表总结" class="headerlink" title="5.4、列表总结"></a>5.4、列表总结</h2><p>标签名</p><p>定义</p><p>说明</p><p><strong>无序标签</strong></p><p>里面只能包含li 没有顺序，我们以后布局中最常用的列表</p><p>有序标签 里面只能包含li 有顺序， 使用情况较少 自定义列表 里面有2个兄弟， dt 和 dd</p><h2 id="六、表单"><a href="#六、表单" class="headerlink" title="六、表单"></a>六、表单</h2><h2 id="6-1、表单概述"><a href="#6-1、表单概述" class="headerlink" title="6.1、表单概述"></a>6.1、表单概述</h2><p>现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图 <img src="https://img-blog.csdnimg.cn/img_convert/ae786cb6b2f08fd59aba79a89d8cde6f.png" alt="car"> **作用： ** 表单目的是为了收集用户信息，在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。 <img src="https://img-blog.csdnimg.cn/img_convert/3134fad9f2b80061bf7d2539e4a092b0.png" alt="bd"></p><ol><li> 表单控件：</li></ol><p>​ 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><ol><li> 提示信息：</li></ol><p>​ 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><ol><li> 表单域：</li></ol><p>​ 他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="6-2、input-控件"><a href="#6-2、input-控件" class="headerlink" title="6.2、input 控件"></a>6.2、input 控件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>input type=&quot;属性值&quot; value=&quot;你好&quot;<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4d827a163e637a2dee56b13d1a0701bd.png" alt="input"></p><h3 id="6-2-1、type-属性"><a href="#6-2-1、type-属性" class="headerlink" title="6.2.1、type 属性"></a>6.2.1、type 属性</h3><ul><li>  这个属性通过改变值，可以决定了你属于那种input表单。</li><li>  比如 type = ‘text’ 就表示 文本框 可以做 用户名， 昵称等。</li><li>  比如 type = ‘password’ 就是表示密码框 用户输入的内容 是不可见的。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">用户名: <span class="hljs-symbol">&amp;lt;</span>input type=&quot;text&quot; /<span class="hljs-symbol">&amp;gt;</span><br>密 码：<span class="hljs-symbol">&amp;lt;</span>input type=&quot;password&quot; /<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-2-2、value属性"><a href="#6-2-2、value属性" class="headerlink" title="6.2.2、value属性"></a>6.2.2、value属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">用户名:<span class="hljs-symbol">&amp;lt;</span>input type=&quot;text&quot; name=&quot;username&quot; value=&quot;请输入用户名&quot;<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><ul><li>  value 默认的文本值。 有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</li></ul><h3 id="6-2-3、name属性"><a href="#6-2-3、name属性" class="headerlink" title="6.2.3、name属性"></a>6.2.3、name属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">用户名:<span class="hljs-symbol">&amp;lt;</span>input type=&quot;text&quot; name=“username” /<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。</p><ul><li>name属性后面的值，是我们自己定义的。</li><li>radio 如果是一组，我们必须给他们命名相同的名字 name 这样就可以多个选其中的一个啦</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>input type=&quot;radio&quot; name=&quot;sex&quot; /<span class="hljs-symbol">&amp;gt;</span>男<br><span class="hljs-symbol">&amp;lt;</span>input type=&quot;radio&quot; name=&quot;sex&quot; /<span class="hljs-symbol">&amp;gt;</span>女<br></code></pre></td></tr></table></figure><ul><li>  name属性，我们现在用的较少， 但是，当我们学ajax 和后台的时候，是必须的。</li></ul><h3 id="6-2-4、checked属性"><a href="#6-2-4、checked属性" class="headerlink" title="6.2.4、checked属性"></a>6.2.4、checked属性</h3><ul><li>  表示默认选中状态。 较常见于 单选按钮和复选按钮。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">性 别:<br><span class="hljs-symbol">&amp;lt;</span>input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; checked=&quot;checked&quot; /<span class="hljs-symbol">&amp;gt;</span>男<br><span class="hljs-symbol">&amp;lt;</span>input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; /<span class="hljs-symbol">&amp;gt;</span>女<br></code></pre></td></tr></table></figure><h3 id="6-2-5、总结"><a href="#6-2-5、总结" class="headerlink" title="6.2.5、总结"></a>6.2.5、总结</h3><p>属性</p><p>说明</p><p>作用</p><p>type</p><p>表单类型</p><p>用来指定不同的控件类型</p><p>value</p><p>表单值</p><p>表单里面默认显示的文本</p><p>name</p><p>表单名字</p><p>页面中的表单很多，name主要作用就是用于区别不同的表单。</p><p>checked</p><p>默认选中</p><p>表示那个单选或者复选按钮一开始就被选中了</p><h2 id="6-3、-label标签"><a href="#6-3、-label标签" class="headerlink" title="6.3、 label标签"></a>6.3、 label标签</h2><p>label标签用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。我们绑定元素有两种方式：</p><ol><li> 第一种用法就是用label直接包括input表单，适合单个表单选择。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>label<span class="hljs-symbol">&amp;gt;</span> 用户名： <span class="hljs-symbol">&amp;lt;</span>input type=&quot;radio&quot; name=&quot;usename&quot; value=&quot;请输入用户名&quot;<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>/label<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><ol><li> 第二种用法 for 属性规定 label 与哪个表单元素绑定。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>label for=&quot;sex&quot;<span class="hljs-symbol">&amp;gt;</span>男<span class="hljs-symbol">&amp;lt;</span>/label<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;sex&quot;<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-4、textarea控件"><a href="#6-4、textarea控件" class="headerlink" title="6.4、textarea控件"></a>6.4、textarea控件</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/3196f4694c30a87108e87c382ee9d12d.png" alt="textarea"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>textarea <span class="hljs-symbol">&amp;gt;</span><br>文本内容<br><span class="hljs-symbol">&amp;lt;</span>/textarea<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p>他有两个作用：</p><ol><li>通过textarea控件可以轻松地创建多行文本输入框.</li><li>cols=“每行中的字符数” rows=“显示的行数” 我们实际开发不用</li></ol><p>文本框和文本域区别</p><p>表单</p><p>名称</p><p>区别</p><p>默认值显示</p><p>用于场景</p><p>input type=“text”</p><p>文本框</p><p>只能显示一行文本</p><p>单标签，通过value显示默认值</p><p>用户名、昵称、密码等</p><p>textarea</p><p>文本域</p><p>可以显示多行文本</p><p>双标签，默认值写到标签中间</p><p>留言板</p><h2 id="6-5、select下拉列表"><a href="#6-5、select下拉列表" class="headerlink" title="6.5、select下拉列表"></a>6.5、select下拉列表</h2><p>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表。 <img src="https://img-blog.csdnimg.cn/img_convert/d822f971b425dbfae2a7ebddd3c83068.png" alt="sele"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>select<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>option<span class="hljs-symbol">&amp;gt;</span>选项1<span class="hljs-symbol">&amp;lt;</span>/option<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>option<span class="hljs-symbol">&amp;gt;</span>选项2<span class="hljs-symbol">&amp;lt;</span>/option<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>option<span class="hljs-symbol">&amp;gt;</span>选项3<span class="hljs-symbol">&amp;lt;</span>/option<span class="hljs-symbol">&amp;gt;</span><br>...<br><span class="hljs-symbol">&amp;lt;</span>/select<span class="hljs-symbol">&amp;gt;</span><br><br></code></pre></td></tr></table></figure><p>注意： 1.中至少包含一对 option 2. 在option 中定义selected =” selected “时，当前项即为默认选中项。 3. 但是我们实际开发会用的比较少</p><h2 id="6-6、form表单域"><a href="#6-6、form表单域" class="headerlink" title="6.6、form表单域"></a>6.6、form表单域</h2><p>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单名称&quot;<span class="hljs-symbol">&amp;gt;</span><br>各种表单控件<br><span class="hljs-symbol">&amp;lt;</span>/form<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><p>属性</p><p>属性值</p><p>作用</p><p>action</p><p>url地址</p><p>用于指定接收并处理表单数据的服务器程序的url地址。</p><p>method</p><p>get/post</p><p>用于设置表单数据的提交方式，其取值为get或post。</p><p>name</p><p>名称</p><p>用于指定表单的名称，以区分同一个页面中的多个表单。</p><p>每个表单都应该有自己表单域。我们现在做页面，不写看不到效果，但是 如果后面学 ajax 后台交互的时候，必须需要 form表单域。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
